{"version":3,"sources":["Ajax.js","EventEmitter.js","SimulationUpdateEvent.js","Simulator.js","components/NumSlider.jsx","preset.js","components/Inputs.jsx","components/MailModal.jsx","components/Navbar.jsx","components/Chart.jsx","components/Graph.jsx","components/App.jsx","index.js"],"names":["Ajax","Object","classCallCheck","this","createClass","key","value","options","arguments","length","undefined","Promise","resolve","reject","method","url","window","location","origin","headers","query","data","xhr","XMLHttpRequest","h","onload","onerror","err","queryString","open","setRequestHeader","send","JSON","stringify","request","dict","qs","param","concat","substring","EventEmitter","_listeners","event","willTrigger","type","forEach","listener","eventType","push","listeners","i","splice","SimulationUpdateEvent","day","_type","_day","get","src_Simulator","_EventEmitter","Simulator","_this","possibleConstructorReturn","getPrototypeOf","call","_currentDay","_firstInvalidDay","_useErrCorrecting","inherits","_this2","href","includes","Access-Control-Allow-Origin","Error-Correction","isErrCorrecting","then","status","parse","response","parseInt","getResponseHeader","emit","Event","Error","catch","_this3","Content-Type","csvDataBlob","Blob","a","document","createElement","URL","createObjectURL","setAttribute","click","revokeObjectURL","message","currentDay","set","maxDays","hasData","Math","min","NumSlider","_React$Component","props","numRef","React","createRef","rangeRef","current","init","evt","val","parseFloat","target","max","react_default","className","label","showRange","minText","maxText","ref","onChange","onNumber","bind","step","placeholder","required","disabled","onSlide","n","Component","presets","Seasonal Flu","Infection Length","Transmission","Virulence","Smallpox","Polio","Measles","Ebola","H1N1 Flu","H5N1 Flu","1918 Flu","Inputs","intialImmunityRef","transmissionRef","virulenceRef","initialInfectedRef","intialPopRef","infectionLengthRef","daysRef","state","pending","lastBtn","isDisabled","on","onSimulatorLoad","onSimulatorError","URLSearchParams","search","immune_percent","transmission_rate","virulence","initial_infected","initial_population","infection_length","simulation_length","setState","reset","nextDay","load","getInputsDictionary","autoRun","_this4","downloadCSVFile","preventDefault","dayByDay","downloadCSV","getAttribute","preset","onSubmit","NumSlider_NumSlider","onPresetChange","onClick","onFormClick","btn","onReset","MailModal","textRef","errorRef","headerRef","typeError","errorTime","errorMsg","other","errMessage","successMessage","prevProps","showModal","e","goodHeader","BuildArray","post","text","lib_default","isOpen","closeModal","submitClick","onTypeSelect","name","TypeOther","rows","cols","Navbar","showNav","showAdvanced","prev","reactstrap_es","color","expand","toggleNavbar","navbar","openModal","toggle","toggleDropdown","caret","toggleErrorCorrection","MailModal_MailModal","Chart","onSimulatorData","onSimulatorReset","onSimulatorUpdate","Array","_loop","susceptible","round","Susceptible","infected","Infected","immune","Immune","dead","Dead","population","TotalPopulation","style","tooltip","firstInvalidDay","borderLeft","borderRight","title","setGraphDay","renderRows","Graph","yLabel","onSimulatorUpdateGraph","largestY","values","valuesObj","row","y","pt","x","allData","getDataForAllLabels","getData","dataToRender","endX","xScale","d3","scale","linear","domain","range","WIDTH","yScale","HEIGHT","onYLabelChange","react_d3_components_lib","axes","width","height","margin","top","bottom","left","right","xAxis","yAxis","colorScale","category20","tooltipMode","tooltipContained","tooltipHtml","App","apply","Navbar_Navbar","Inputs_Inputs","Graph_Graph","Chart_Chart","ReactDOM","render","App_App","querySelector"],"mappings":"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","file":"static/js/main.964d9a38.chunk.js","sourcesContent":["export class Ajax{\r\n    // sends an async http request \r\n    static request(options={}){\r\n        return new Promise((resolve, reject) => {\r\n            // extract config from options object\r\n            let method = (typeof options.method === \"string\") ? options.method : \"GET\",\r\n                url = (typeof options.url === \"string\") ? options.url : window.location.origin,\r\n                headers = (typeof options.headers === \"object\" && options.headers) ? options.headers : {},\r\n                query = (typeof options.query === \"object\" && options.query) ? options.query : {},\r\n                data = (typeof options.data !== \"undefined\") ? options.data : null;\r\n\r\n            // create the request\r\n            let xhr = new XMLHttpRequest();\r\n\r\n            // attach listeners\r\n            xhr.onload = () => resolve(xhr);\r\n            xhr.onerror = err => reject(err);\r\n\r\n            // apply query string\r\n            if(query){\r\n                url += Ajax.queryString(query);\r\n            }\r\n\r\n            // open the request\r\n            xhr.open(method, url);\r\n\r\n            // apply http headers\r\n            for(let h in headers){\r\n                xhr.setRequestHeader(h, headers[h]);\r\n            }\r\n\r\n            // send the request\r\n            // send JSON if the data is not a string\r\n            if(data){\r\n                if(typeof data !== \"string\"){\r\n                    xhr.send(JSON.stringify(data));\r\n                }\r\n                else xhr.send(data);\r\n            }\r\n            else xhr.send();\r\n        });\r\n    }\r\n\r\n    // async http get request\r\n    static get(url, headers, query){\r\n        return Ajax.request({method: \"GET\", url, headers, query});\r\n    }\r\n\r\n    // async http post request\r\n    static post(url, headers, data){\r\n        return Ajax.request({method: \"POST\", url, headers, data});\r\n    }\r\n\r\n    // creates a query string from an object\r\n    static queryString(dict){\r\n        let qs = \"?\";\r\n\r\n        for(let param in dict){\r\n            qs += `${param}=${dict[param]}&`;\r\n        }\r\n\r\n        return qs.substring(0, qs.length - 1);\r\n    }\r\n}","// simple event emitter class\r\nexport class EventEmitter{\r\n    constructor(){\r\n        this._listeners = {};   // 'private' dictionary of {eventType: listenerFunction}\r\n    }\r\n\r\n    // triggers all listening functions\r\n    emit(event){\r\n        if(this.willTrigger(event.type)){\r\n            this._listeners[event.type].forEach(listener => listener(event));\r\n        }\r\n    }\r\n\r\n    // adds a listener\r\n    on(eventType, listener){\r\n        if(this.willTrigger(eventType)){\r\n            this._listeners[eventType].push(listener);\r\n        }\r\n        else{\r\n            this._listeners[eventType] = [listener];\r\n        }\r\n    }\r\n\r\n    // removes a listener\r\n    off(eventType, listener){\r\n        if(this.willTrigger(eventType)){\r\n            let listeners = this._listeners[eventType];\r\n\r\n            for(let i = 0; i < listeners.length; i++){\r\n                if(listeners[i] === listener){\r\n                    listeners.splice(i, 1);\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // checks if there are any listeners for a given type\r\n    willTrigger(eventType){\r\n        return eventType in this._listeners;\r\n    }\r\n}","// simple event object for simulation updates \r\nexport class SimulationUpdateEvent{\r\n    constructor(type, day=null){\r\n        this._type = type;\r\n        this._day = day;\r\n    }\r\n\r\n    get type(){\r\n        return this._type;\r\n    }\r\n\r\n    get day(){\r\n        return this._day;\r\n    }\r\n}","import { Ajax } from \"./Ajax\";\r\nimport { EventEmitter } from \"./EventEmitter\";\r\nimport { SimulationUpdateEvent } from \"./SimulationUpdateEvent\";\r\n\r\n// singleton for holding simulation data\r\n// event-driven to keep chart + graph updated\r\nlet Simulator = class Simulator extends EventEmitter{\r\n    constructor(){\r\n        super();\r\n\r\n        this.data = null;                   // simulation data array\r\n        this._currentDay = 0;               // 'private' current simulation day\r\n        this._firstInvalidDay = -1;         // first invalid day (-1 = no invalid days)\r\n        this._useErrCorrecting = true;      // use error correction?\r\n    }\r\n\r\n    // hits the API for data, signals progress\r\n    // query should be a dictionary of the inputs, will be converted into a query string\r\n    load(query){\r\n        return new Promise((resolve, reject) => {\r\n            // figure out endpoint\r\n            let url = window.location.href.includes(\"localhost\") ? \"http://localhost:8080/plague\" : `${window.location.origin}/plague`;\r\n            \r\n            // CORS headers (use foreign domain)\r\n            let headers = {\r\n                \"Access-Control-Allow-Origin\": window.location.origin,\r\n                \"Error-Correction\": this.isErrCorrecting\r\n            };\r\n\r\n            // ajax call with query string\r\n            // (null headers)\r\n            Ajax.get(url, headers, query)\r\n                .then(xhr => {    \r\n                    // ajax resolved (could be bad/good request, but server responded)\r\n                    if(xhr.status === 200){\r\n                        // good request - attempt to parse results json\r\n                        try{\r\n                            // parse json\r\n                            this.data = JSON.parse(xhr.response);\r\n\r\n                            // extract first invalid day\r\n                            this._firstInvalidDay = parseInt(xhr.getResponseHeader(\"First-Invalid-Day\")) || -1;\r\n                        }\r\n                        catch(err){\r\n                            // json parse error (should never happen)\r\n                            reject(err);\r\n                            this.emit(new Event(\"error\"));  // server responded with bad request signal\r\n                        }\r\n\r\n                        // done, resolve promise and emit load + data\r\n                        resolve();\r\n                        this.emit(new Event(\"load\"));   // server responded with good request signal\r\n\r\n                        this.emit(new Event(\"data\"));   // parsed data signal\r\n                    }\r\n                    else{\r\n                        // bad request\r\n                        reject(new Error(xhr.response || \"Bad request\"));\r\n                        this.emit(new Event(\"error\"));  // server responded with bad request signal\r\n                    }\r\n                })\r\n                .catch(err => {\r\n                    // ajax request died (really bad NOT a 400 error!)\r\n                    reject(err);\r\n                    this.emit(new Event(\"error\"));  // request died signal\r\n                });\r\n        });\r\n    }\r\n\r\n    // asychronously downloads a csv file using ajax\r\n    downloadCSVFile(query){\r\n        return new Promise((resolve, reject) => {\r\n            // figure out endpoint origin\r\n            let origin = window.location.origin.includes(\"localhost\") ? \"http://localhost:8080\" : window.location.origin;\r\n\r\n            // figure out endpoint using origin\r\n            let url = `${origin}/plague`;\r\n\r\n            // http request headers\r\n            let headers = {\r\n                \"Access-Control-Allow-Origin\": window.location.origin,\r\n                \"Content-Type\": \"text/csv\",\r\n                \"Error-Correction\": this.isErrCorrecting\r\n            };\r\n\r\n            // get csv file via Ajax\r\n            Ajax.get(url, headers, query)\r\n                .then(xhr => {\r\n                    // server responded\r\n                    if(xhr.status === 200){\r\n                        // good http status - download\r\n                        // xhr.response = csv text\r\n                        // convert to blob\r\n                        let csvDataBlob = new Blob([xhr.response], {type: \"octet/stream\"});\r\n\r\n                        // create a 'secret' link using the blob\r\n                        let a = document.createElement(\"a\");\r\n                        let url = window.URL.createObjectURL(csvDataBlob);\r\n\r\n                        // setup the link to download blob data\r\n                        a.setAttribute(\"download\", \"data.csv\");\r\n                        a.setAttribute(\"href\", url);\r\n\r\n                        // click the link to download the file\r\n                        a.click();\r\n                        window.URL.revokeObjectURL(url);\r\n\r\n                        // trigger any listeners\r\n                        resolve(\"File downloaded.\");\r\n                    }\r\n                    else{\r\n                        // bad http status - trigger listeners with error\r\n                        reject(new Error(xhr.response || \"Error downloading CSV file.\"));\r\n                    }\r\n                })\r\n                .catch(err => {\r\n                    // server did not responed - trigger listeners with error\r\n                    reject(new Error(err.message || \"Unable to download CSV file.\"))\r\n                });\r\n        });\r\n    }\r\n\r\n    // simulation moves to the last day\r\n    // (triggers listeners)\r\n    autoRun(){\r\n        this.currentDay = this.data.length - 1; // auto emits update\r\n    }\r\n\r\n    // steps the simulation forward one day\r\n    // (triggers listeners)\r\n    nextDay(){\r\n        if(this.currentDay < this.data.length){\r\n            this.currentDay++;  // auto emits update\r\n        }\r\n    }\r\n\r\n    // resets simulation to day 0 and clears all stored data\r\n    // (triggers listeners)\r\n    reset(){\r\n        this.data = null;\r\n        this.currentDay = 0;\r\n        this.emit(new Event(\"reset\"));\r\n    }\r\n\r\n    // updates the graph day \r\n    setGraphDay(day){\r\n        this.emit(new SimulationUpdateEvent(\"update-graph\", day));\r\n    }\r\n\r\n    // always emit update\r\n    set currentDay(day){\r\n        let maxDays = this.hasData ? (this.data.length - 1) : 0;\r\n        this._currentDay = Math.min(day, maxDays); \r\n        this.emit(new SimulationUpdateEvent(\"update\", this.currentDay));\r\n    }\r\n\r\n    set isErrCorrecting(value){\r\n        if(typeof value === \"boolean\"){\r\n            this._useErrCorrecting = value;\r\n        }\r\n        else throw new Error(\"isErrCorrecting must be set to a boolean value.\");\r\n    }\r\n\r\n    get hasData(){\r\n        return this.data !== null;\r\n    }\r\n\r\n    get currentDay(){\r\n        return this._currentDay;\r\n    }\r\n\r\n    get firstInvalidDay(){\r\n        return this._firstInvalidDay;\r\n    }\r\n\r\n    get isErrCorrecting(){\r\n        return this._useErrCorrecting;\r\n    }\r\n}\r\n\r\n// singleton\r\nexport default new Simulator();","import \"./NumSlider.css\";\r\nimport React from \"react\";\r\n\r\nexport class NumSlider extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.numRef = React.createRef();\r\n        this.rangeRef = React.createRef();\r\n    }\r\n\r\n    // mounted - set the default numbers\r\n    componentDidMount(){\r\n        this.numRef.current.value = this.props.init || this.props.min;\r\n        this.rangeRef.current.value = this.props.init || this.props.min;\r\n    }\r\n\r\n    // on text field input\r\n    onNumber(evt){\r\n        // set the range value to the number value\r\n        let val = parseFloat(evt.target.value);\r\n    \r\n        if(val){\r\n            // enforce min/max constraints\r\n            val = Math.min(Math.max(val, this.props.min), this.props.max); \r\n\r\n            // update inputs\r\n            this.numRef.current.value = val;\r\n            this.rangeRef.current.value = val;\r\n        }\r\n        else{\r\n            // empty input - range at min and number will be empty\r\n            this.rangeRef.current.value = this.props.min;\r\n        }\r\n    }\r\n\r\n    // on range bar move\r\n    onSlide(evt){\r\n        // set the text value to the number value\r\n        let val = evt.target.value;\r\n\r\n        // enforce min/max constraints \r\n        val = Math.min(Math.max(val, this.props.min), this.props.max);\r\n\r\n        // update number input\r\n        this.numRef.current.value = val;\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"num-slider-container\">\r\n                <div>\r\n                    <label>{this.props.label}</label>\r\n                    {this.props.showRange ? (` ${this.minText}-${this.maxText}`) : null}\r\n                </div>\r\n                <div>\r\n                    <input \r\n                        ref={this.numRef}\r\n                        onChange={this.onNumber.bind(this)}\r\n                        type=\"number\"\r\n                        min={this.props.min}\r\n                        max={this.props.max}\r\n                        step={this.props.step}\r\n                        placeholder={this.props.placeholder}\r\n                        required={this.props.required}\r\n                        disabled={this.props.disabled}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <input\r\n                        ref={this.rangeRef}\r\n                        onChange={this.onSlide.bind(this)}\r\n                        type=\"range\"\r\n                        min={this.props.min}\r\n                        max={this.props.max}\r\n                        step={this.props.step}\r\n                        disabled={this.props.disabled}\r\n                        className=\"num-slider-slider\"\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    set value(n){\r\n        this.numRef.current.value = n;\r\n        this.rangeRef.current.value = n;\r\n    }\r\n\r\n    get minText(){\r\n        return this.props.minText ? this.props.minText : this.props.min;\r\n    }\r\n\r\n    get maxText(){\r\n        return this.props.maxText ? this.props.maxText : this.props.max;\r\n    }\r\n\r\n    get value(){\r\n        return this.numRef.current.value;\r\n    }\r\n}","export const presets ={\r\n    //presets in the inputs go here\r\n    //seasonal flu\r\n   \"Seasonal Flu\":{\r\n       \"Infection Length\": 8,\r\n       \"Transmission\": 1.2,\r\n       \"Virulence\": 0.01\r\n   },\r\n   //smallpox\r\n   \"Smallpox\":{\r\n    \"Infection Length\": 14,\r\n    \"Transmission\": 2.5,\r\n    \"Virulence\": 0.25 \r\n   },\r\n   //polio\r\n   \"Polio\":{\r\n    \"Infection Length\": 18,\r\n    \"Transmission\": 1,\r\n    \"Virulence\": 0.01 \r\n   },\r\n   //measles\r\n   \"Measles\":{\r\n    \"Infection Length\": 8,\r\n    \"Transmission\": 10,\r\n    \"Virulence\": 0.01 \r\n   },\r\n   //Ebola\r\n   \"Ebola\":{\r\n    \"Infection Length\": 13,\r\n    \"Transmission\": 1.5,\r\n    \"Virulence\": 0.75 \r\n   },\r\n    //H1N1 Flu\r\n    \"H1N1 Flu\":{\r\n    \"Infection Length\": 8,\r\n    \"Transmission\": 1.6,\r\n    \"Virulence\": 0.01 \r\n    },\r\n    //H5N1 Flu\r\n   \"H5N1 Flu\":{\r\n    \"Infection Length\": 8,\r\n    \"Transmission\": 0.1,\r\n    \"Virulence\": 0.6 \r\n   },\r\n    //1918 Flu\r\n    \"1918 Flu\":{\r\n    \"Infection Length\": 8,\r\n    \"Transmission\": 2,\r\n    \"Virulence\": 0.03 \r\n    }\r\n}\r\nexport default presets;\r\n","import React from \"react\";\r\nimport Simulator from \"../Simulator\";\r\nimport { NumSlider } from \"./NumSlider\";\r\nimport preset from \"../preset\"\r\nimport { Ajax } from \"../Ajax\";\r\n\r\nexport class Inputs extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        // input refs\r\n        this.intialImmunityRef = React.createRef();\r\n        this.transmissionRef = React.createRef();\r\n        this.virulenceRef = React.createRef();\r\n        this.initialInfectedRef = React.createRef();\r\n        this.intialPopRef = React.createRef();\r\n        this.infectionLengthRef = React.createRef();\r\n        this.daysRef = React.createRef();\r\n\r\n        this.state = {\r\n            pending: false,         // no new requests while pending (disable buttons)\r\n            message: null,          // message to display (errors)\r\n            lastBtn: null,\r\n            isDisabled: false       // to disable/enable fields depending on what preset is selected\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        Simulator.on(\"load\", this.onSimulatorLoad.bind(this));\r\n        Simulator.on(\"error\", this.onSimulatorError.bind(this));\r\n\r\n        // test values\r\n        if(new URLSearchParams(window.location.search).get(\"test\") === \"true\"){\r\n            this.initialInfectedRef.current.value = 500;\r\n            this.intialImmunityRef.current.value = 0.10;\r\n            this.intialPopRef.current.value = 1000000;\r\n            this.virulenceRef.current.value = 0.25;\r\n            this.daysRef.current.value = 365;\r\n            this.infectionLengthRef.current.value = 100;\r\n            this.transmissionRef.current.value = 0.2;\r\n        }\r\n    }\r\n\r\n    // creates a dictionary of all the inputs and their values (names formatted for the API call) \r\n    getInputsDictionary(){\r\n        // extract data from inputs to use in query string \r\n        let immune_percent =        this.intialImmunityRef.current.value,\r\n            transmission_rate =     this.transmissionRef.current.value,\r\n            virulence =             this.virulenceRef.current.value,\r\n            initial_infected =      this.initialInfectedRef.current.value,\r\n            initial_population =    this.intialPopRef.current.value,\r\n            infection_length =      this.infectionLengthRef.current.value,\r\n            simulation_length =     this.daysRef.current.value;\r\n\r\n        // make sure infected <= population\r\n        initial_infected = Math.min(initial_infected, initial_population);\r\n\r\n        // MUST match API expectations! \r\n        return {immune_percent, transmission_rate, virulence, initial_infected, initial_population, infection_length, simulation_length};\r\n    }\r\n\r\n    onSimulatorError(){\r\n        this.setState({pending: false});    // enable buttons\r\n    }\r\n\r\n    onSimulatorLoad(){\r\n        this.setState({pending: false});    // enable buttons\r\n    }\r\n\r\n    // called when then the reset button is clicked\r\n    onReset(){\r\n        // cleared stored simulation data\r\n        Simulator.reset();\r\n    }\r\n\r\n    dayByDay(){\r\n        if(!Simulator.hasData){\r\n            // disable buttons for loading time\r\n            this.setState({pending: true});\r\n\r\n            // load data then show next day\r\n            Simulator.load(this.getInputsDictionary())\r\n                .then(() => {\r\n                    this.setState({message: null}); // remove possible err message\r\n                    Simulator.nextDay();\r\n                })\r\n                .catch(err => this.setState({message: err.message}));\r\n        }\r\n        else{\r\n            Simulator.nextDay();\r\n        }\r\n    }\r\n\r\n    autoRun(){\r\n        if(!Simulator.hasData){\r\n            // disable buttons for loading time\r\n            this.setState({pending: true});\r\n\r\n            // load data then auto run\r\n            Simulator.load(this.getInputsDictionary())\r\n                .then(() => {\r\n                    this.setState({message: null}); // remove possible err message\r\n                    Simulator.autoRun();\r\n                })\r\n                .catch(err => this.setState({message: err.message}));\r\n        }\r\n        else{\r\n            Simulator.autoRun();\r\n        }\r\n    }\r\n\r\n    // downloads the csv file\r\n    downloadCSV(){\r\n        if(!this.state.pending){\r\n            // disable buttons\r\n            this.setState({pending: true});\r\n\r\n            Simulator.downloadCSVFile(this.getInputsDictionary())\r\n                .catch(err => {\r\n                    // something went wrong (server did not respond or bad request)\r\n                    this.setState({message: err.message});\r\n                })\r\n                .then(() => {\r\n                    // (this fires when any response happens not successful only!)\r\n                    // always enable buttons\r\n                    this.setState({pending: false})\r\n                });\r\n        }\r\n    }\r\n\r\n    // called when the form is 'submitted'\r\n    // entire purpose is to block the sending of the form\r\n    // (submit enforces 'required', 'min', 'max' constraints)\r\n    onSubmit(evt){\r\n        // no default submission (using ajax instead)\r\n        evt.preventDefault();\r\n\r\n        // problem - both autorun + next day activate this... (only way to do it with using form requires)\r\n\r\n        // day-by-day was the trigger\r\n        if(this.state.lastBtn === \"day-by-day\"){\r\n            this.dayByDay();\r\n        }\r\n\r\n        // autorun was the trigger\r\n        else if(this.state.lastBtn === \"auto-run\"){\r\n            this.autoRun();\r\n        }\r\n\r\n        // csv export was the trigger\r\n        else if(this.state.lastBtn === \"export-csv\"){\r\n            this.downloadCSV();\r\n        }\r\n        \r\n    }\r\n\r\n    // sets the last button to 'day-by-day' or 'autorun'\r\n    // kinda ugly but its because form has 2 submit buttons\r\n    onFormClick(evt){\r\n        this.setState({lastBtn: evt.target.getAttribute(\"btn\")});\r\n    }\r\n\r\n    onPresetChange(evt){\r\n        if(evt.target.value != \"Custom\"){\r\n            this.setState({isDisabled:true});\r\n            this.infectionLengthRef.current.value = preset[evt.target.value][\"Infection Length\"];\r\n            this.transmissionRef.current.value = preset[evt.target.value][\"Transmission\"];\r\n            this.virulenceRef.current.value = preset[evt.target.value][\"Virulence\"]\r\n        }else{\r\n            this.setState({isDisabled:false});\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <h5 className=\"text-center\">Experimental Variables</h5>\r\n                <form onSubmit={this.onSubmit.bind(this)}>\r\n                    <div className=\"row\">\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <NumSlider\r\n                                label={\"Length of Infection (Days)\"}\r\n                                showRange={true}\r\n                                min={1}\r\n                                max={365}\r\n                                step={1}\r\n                                required={true}\r\n                                ref={this.infectionLengthRef}\r\n                                disabled={this.state.isDisabled}\r\n                            />\r\n                        </div>\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <NumSlider\r\n                                label={\"Transmission Rate\"}\r\n                                showRange={true}\r\n                                min={0}\r\n                                max={20}\r\n                                step={0.01}\r\n                                required={true}\r\n                                ref={this.transmissionRef}\r\n                                disabled={this.state.isDisabled}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <NumSlider\r\n                                label={\"Virulence\"}\r\n                                showRange={true}\r\n                                min={0}\r\n                                max={1}\r\n                                step={0.001}\r\n                                required={true}\r\n                                ref={this.virulenceRef}\r\n                                disabled={this.state.isDisabled}\r\n                            />\r\n                        </div>\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <NumSlider\r\n                                label={\"Initial Population\"}\r\n                                showRange={true}\r\n                                min={1}\r\n                                max={1000000}\r\n                                step={1}\r\n                                required={true}\r\n                                ref={this.intialPopRef}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <NumSlider\r\n                                label={\"Initial Immunity Percent\"}\r\n                                showRange={true}\r\n                                min={0}\r\n                                max={1}\r\n                                step={0.01}\r\n                                required={true}\r\n                                ref={this.intialImmunityRef}\r\n                            />\r\n                        </div>\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <NumSlider\r\n                                label={\"Initial Infected\"}\r\n                                showRange={true}\r\n                                min={0}\r\n                                max={1000000}\r\n                                maxText={\"Population\"}\r\n                                step={1}\r\n                                required={true}\r\n                                ref={this.initialInfectedRef}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <NumSlider\r\n                                label={\"Simulation Length (Days)\"}\r\n                                showRange={true}\r\n                                min={1}\r\n                                max={365}\r\n                                step={1}\r\n                                required={true}\r\n                                ref={this.daysRef}\r\n                            />\r\n                        </div>\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <label>Presets:</label>\r\n                            <select className=\"form-control\" onChange={this.onPresetChange.bind(this)}>\r\n                                <option>Custom</option>\r\n                                <option>Seasonal Flu</option>\r\n                                <option>Smallpox</option>\r\n                                <option>Polio</option>\r\n                                <option>Measles</option>\r\n                                <option>Ebola</option>\r\n                                <option>H1N1 Flu</option>\r\n                                <option>H5N1 Flu</option>\r\n                                <option>1918 Flu</option>\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group text-center\">\r\n                        <button onClick={this.onFormClick.bind(this)} className=\"input-btn\" disabled={this.state.pending} btn=\"day-by-day\">Day-By-Day</button>&nbsp;\r\n                        <button onClick={this.onFormClick.bind(this)} className=\"input-btn\" disabled={this.state.pending} btn=\"auto-run\">Auto Run</button>&nbsp;\r\n                        <button onClick={this.onReset.bind(this)} className=\"input-btn\" disabled={this.state.pending} type=\"button\" >Reset</button>&nbsp;\r\n                        <button onClick={this.onFormClick.bind(this)} className=\"input-btn\" disabled={this.state.pending} btn=\"export-csv\">Export CSV</button>\r\n                    </div>\r\n                </form>\r\n                <div>{this.state.message}</div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport ReactModal from \"react-modal\"\r\nimport { Ajax } from \"../Ajax\";\r\n\r\nexport class MailModal extends React.Component{\r\n\r\n\tconstructor(props){\r\n        super(props);\r\n\r\n        // input refs\r\n        this.textRef = React.createRef();\r\n        this.errorRef = React.createRef();\r\n        this.headerRef = React.createRef();\r\n\r\n        this.type = null;\r\n        this.typeError = true;\r\n        this.errorTime = false;\r\n        this.errorMsg = \"\";\r\n\r\n        this.state = { \r\n\t\t\tother: false,\r\n\t\t\terrMessage:null,\r\n\t\t\tsuccessMessage:null\r\n        };\r\n\r\n        //Modal.setAppElement(this.props.app);\r\n\t}\r\n\r\n\tcomponentDidUpdate(prevProps){\r\n\t\t// clear messages when the visibility changes\r\n\t\tif(prevProps.showModal && !this.props.showModal){\r\n\t\t\tthis.setState({errMessage: null, successMessage: null});\r\n\t\t}\r\n\t}\r\n\r\n\t// on click of submit button \r\n\tsubmitClick(e){\r\n\t\tthis.setState({errMessage:null});\r\n\t\te.preventDefault();\r\n\t\tlet goodHeader = this.headerRef.current ? (this.headerRef.current.value.length > 0) : true;\r\n\t\tif(this.type != null && this.textRef.current.value != \"\" && goodHeader){\r\n\t\t\tlet message = this.BuildArray();\r\n\r\n\t\t\t// localhost = dev, else = prod\r\n\t\t\tlet origin = window.location.origin.includes(\"localhost\") ? \"http://localhost:8080\" : window.location.origin;\r\n\r\n\t\t\tAjax.post(`${origin}/mail`,null,{message})\r\n\t\t\t\t.then(xhr => {    \r\n                    // ajax resolved (could be bad/good request, but server responded)\r\n                    if(xhr.status === 200){\r\n                        // good request - attempt to parse results json\r\n                        try{\r\n\t\t\t\t\t\t\tthis.setState({successMessage:\"Submit Successful\"});\r\n                        }\r\n                        catch(err){\r\n\t\t\t\t\t\t\t// json parse error (should never happen)\r\n\t\t\t\t\t\t\tthis.setState({errMessage:JSON.parse(err)});\r\n\t\t\t\t\t\t\t// server responded with bad request signal\r\n                        }\r\n                    }\r\n                    else{\r\n\t\t\t\t\t\t// bad request\r\n\t\t\t\t\t\tthis.setState({errMessage:\"Bad Request Error\"});\r\n                    }\r\n                })\r\n                .catch(err => {\r\n                    // ajax request died (really bad NOT a 400 error!)\r\n\t\t\t\t\tthis.setState({errMessage:\"Cannot reach server\"});// request died signal\r\n                });\r\n\t\t}\r\n\t}\r\n\t\r\n\t//Build the JSON array that is sent over the Ajax request\r\n\tBuildArray(){\r\n\t\t//get the text in the the message textarea\r\n\t\tlet text = this.textRef.current.value;\r\n\t\t//\r\n        let type = \"\";\r\n\r\n        if(this.state.other){\r\n        \ttype = this.headerRef.current.value;\r\n        }else{\r\n        \ttype = this.type;\r\n        }\r\n\r\n        // MUST match API expectations! \r\n        return {type,text};\r\n    }\r\n\r\n\t// on change of radio button set type\r\n\tonTypeSelect(type){\r\n\t\t//get the type of the radio button selected\r\n\t \tthis.type = type;\r\n\r\n\t\t// check to see if other is selected\r\n\t\tthis.setState({other: this.type === \"other\"});\r\n\r\n\t \tthis.typeError = false;\r\n\t }\r\n\r\n\t //Check if other is selcted and load elements based on that\r\n \t TypeOther(){\r\n\t \tif(!this.state.other){\r\n\t\t\t // remove element of screen\r\n\t \t\treturn null;\r\n\t \t}else{\r\n\t\t\t //load element onto screen\r\n\t \t\treturn(\r\n\t \t\t\t<div>\r\n\t \t\t\t\t<label>Other: </label> <input type=\"text\" placeholder=\"Input for other\" ref={this.headerRef} required/>\r\n\t \t\t\t</div>\r\n\t \t\t);\r\n\t \t}\r\n\t }\r\n\t \r\n\trender(){\r\n\t\treturn this.props.showModal ? (\r\n\t\t\t<form>\r\n\t\t\t\t<ReactModal isOpen={this.props.showModal} >\r\n\t\t\t\t\t<div className=\"col-lg-1\">\r\n\t\t\t  \t\t\t<span className=\"nav-link\" onClick={this.props.closeModal}>&times;</span>\r\n\t\t\t  \t\t</div>\r\n\t\t\t  \t\t<div className=\"container border\">\r\n\t\t\t\t\t  <form onSubmit={this.submitClick.bind(this)}>\r\n\t\t\t\t\t\t\t<div className=\"col-lg-12 header center\">\r\n\t\t\t\t\t\t\t\t<h2 className=\"modalHeader\">Contact Us</h2>\r\n\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t<span className=\"error\">\r\n\t\t\t\t\t\t\t\t\t\t{this.state.errMessage}\r\n\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t\t<span className=\"success\">\r\n\t\t\t\t\t\t\t\t\t\t{this.state.successMessage}\r\n\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div className=\"col-lg-12 center\">\r\n\t\t\t\t\t\t\t\t<input type=\"radio\" onChange={() => this.onTypeSelect(\"Bug Report\")} name=\"types\" value=\"problem\" required/>Have a problem?\r\n\t\t\t\t\t\t\t\t&nbsp;\r\n\t\t\t\t\t\t\t\t<input type=\"radio\" onChange={() => this.onTypeSelect(\"Feature Request\")} name=\"types\" value=\"idea\" required/>Have an idea?\r\n\t\t\t\t\t\t\t\t&nbsp;\r\n\t\t\t\t\t\t\t\t<input type=\"radio\" onChange={() => this.onTypeSelect(\"other\")} name=\"types\" value=\"other\" required/>Other\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div className=\"col-lg-12 center\">\r\n\t\t\t\t\t\t\t\t{this.TypeOther()}\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div className=\"col-lg-12 center\">\r\n\t\t\t\t\t\t\t\t<textarea rows=\"4\" cols=\"100\" placeholder=\"Type message in here.\" ref={this.textRef} required></textarea>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div className=\"col-lg-12 center\">\r\n\t\t\t\t\t\t\t\t<input type=\"submit\" />\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</form>\r\n\t\t\t\t\t</div>\r\n      \t\t\t</ReactModal>\r\n\t\t\t</form>\r\n\t\t) : null;\r\n\t}\r\n}","import React from \"react\";\r\nimport { Dropdown, DropdownToggle, DropdownMenu, DropdownItem, Navbar as RNavbar, NavItem, Collapse, NavbarToggler, Nav } from \"reactstrap\";\r\nimport { MailModal } from \"./MailModal\"\r\nimport Simulator from \"../Simulator\";\r\n\r\nexport class Navbar extends React.Component{\r\n\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\r\n\t    this.state = {\r\n\t\t\tshowNav: false,\t\t\t// navbar collapse\r\n\t\t\tshowModal: false,\t\t// mail modal visibility\r\n\t\t\tshowAdvanced: false\t\t// advanced dropdown menu visibility\r\n\t    };\r\n\r\n\t}\r\n\r\n\t// close the mail modal\r\n\tcloseModal(){\r\n\t\tthis.setState({showModal: false});\r\n\t}\r\n\r\n\t// show the mail modal\r\n\topenModal(){\r\n\t\tthis.setState({showModal: true});\r\n\t}\r\n\r\n\t// toggles the navbar collapse state\r\n\ttoggleNavbar(){\r\n\t\tthis.setState(prev => ({showNav: !prev.showNav}));\r\n\t}\r\n\r\n\t// toggle advanced dropdown\r\n\ttoggleDropdown(){\r\n\t\tthis.setState(prev => ({showAdvanced: !prev.showAdvanced}));\r\n\t}\r\n\r\n\t// advanced dropdown error correction option toggle\r\n\ttoggleErrorCorrection(){\r\n\t\tSimulator.isErrCorrecting = !Simulator.isErrCorrecting;\r\n\t}\r\n\r\n\trender(){\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<RNavbar color=\"light\" expand=\"md\">\r\n\t\t\t\t\t<NavbarToggler onClick={this.toggleNavbar.bind(this)}/>\r\n\t\t\t\t\t<Collapse isOpen={this.state.showNav} navbar>\r\n\t\t\t\t\t\t<Nav navbar>\r\n\t\t\t\t\t\t\t<NavItem>\r\n\t\t\t\t\t\t\t\t<span className=\"nav-link\" onClick={this.openModal.bind(this)}>Contact Us <span className=\"sr-only\">(current)</span></span>\r\n\t\t\t\t\t\t\t</NavItem>\r\n\t\t\t\t\t\t\t<NavItem>\r\n\t\t\t\t\t\t\t\t<Dropdown isOpen={this.state.showAdvanced} toggle={this.toggleDropdown.bind(this)}>\r\n\t\t\t\t\t\t\t\t\t\t<DropdownToggle caret color=\"light\">\r\n\t\t\t\t\t\t\t\t\t\t\tAdvanced\r\n\t\t\t\t\t\t\t\t\t\t</DropdownToggle>\r\n\t\t\t\t\t\t\t\t\t\t<DropdownMenu>\r\n\t\t\t\t\t\t\t\t\t\t\t<DropdownItem onClick={this.toggleErrorCorrection.bind(this)}>\r\n\t\t\t\t\t\t\t\t\t\t\t\tToggle Error Correction ({Simulator.isErrCorrecting ? \"Enabled\" : \"Disabled\"})\r\n\t\t\t\t\t\t\t\t\t\t\t</DropdownItem>\r\n\t\t\t\t\t\t\t\t\t\t</DropdownMenu>\r\n\t\t\t\t\t\t\t\t\t</Dropdown>\r\n\t\t\t\t\t\t\t</NavItem>\r\n\t\t\t\t\t\t</Nav>\r\n\t\t\t\t\t</Collapse>\r\n\t\t\t\t</RNavbar>\r\n\t\t\t\t<MailModal showModal={this.state.showModal} closeModal={this.closeModal.bind(this)} />\r\n\t      \t</div>\r\n\t\t);\r\n\t}\r\n}","import React from \"react\";\r\nimport Simulator from \"../Simulator\";\r\n\r\nexport class Chart extends React.Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\tdata: null,\t\t// simulatoion data set\r\n\t\t\tday: 0\t\t\t// current simulation day\r\n\t\t};\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\t// simulator singles data set loaded\r\n\t\tSimulator.on(\"data\", this.onSimulatorData.bind(this));\r\n\r\n\t\t// simulator signals a reset\r\n\t\tSimulator.on(\"reset\", this.onSimulatorReset.bind(this));\r\n\r\n\t\t// simulator signals a different day\r\n\t\tSimulator.on(\"update\", this.onSimulatorUpdate.bind(this));\r\n\t}\r\n\r\n\t// simulator got data - store it\r\n\tonSimulatorData(){\r\n\t\tthis.setState({data: Simulator.data});\r\n\t}\r\n\r\n\t// simulator reset - reset this component\r\n\tonSimulatorReset(){\r\n\t\tthis.setState({data: null, day: 0});\r\n\t}\r\n\r\n\t// simulator day changed - update component day\r\n\tonSimulatorUpdate(){\r\n\t\tthis.setState({day: Simulator.currentDay});\r\n\t}\r\n\r\n\t// renders table rows up to the current simulation day\r\n\trenderRows(){\r\n\t\tif(Simulator.hasData){\r\n\t\t\tlet rows = new Array(Simulator.currentDay + 1);\r\n\r\n\t\t\tfor(let i = 0; i <= Simulator.currentDay; i++){\r\n\t\t\t\t// get json for the say\r\n\t\t\t\tlet day = Simulator.data[i];\r\n\r\n\t\t\t\t// extract data\r\n\t\t\t\tlet susceptible = Math.round(day.Susceptible),\r\n\t\t\t\t\tinfected = Math.round(day.Infected),\r\n\t\t\t\t\timmune = Math.round(day.Immune),\r\n\t\t\t\t\tdead = Math.round(day.Dead),\r\n\t\t\t\t\tpopulation = Math.round(day.TotalPopulation);\r\n\r\n\t\t\t\t// first invalid day?\r\n\t\t\t\tlet style = null, tooltip = null;\r\n\t\t\t\tif(i === Simulator.firstInvalidDay){\r\n\t\t\t\t\t// this row is first invalid day\r\n\t\t\t\t\tstyle = {\r\n\t\t\t\t\t\tborderLeft: \"5px solid red\",\r\n\t\t\t\t\t\tborderRight: \"5px solid red\"\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\ttooltip = `Data correction begins at day ${i}.`;\r\n\t\t\t\t}\r\n\r\n\t\t\t\trows[i] = (\r\n\t\t\t\t\t<tr key={i} style={style} title={tooltip}>\r\n\t\t\t\t\t\t<td onClick={()=>Simulator.setGraphDay(i)}>{i}</td>\r\n\t\t\t\t\t\t<td>{susceptible}</td>\r\n\t\t\t\t\t\t<td>{infected}</td>\r\n\t\t\t\t\t\t<td>{immune}</td>\r\n\t\t\t\t\t\t<td>{dead}</td>\r\n\t\t\t\t\t\t<td>{population}</td>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\treturn rows;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n\r\n\trender(){\r\n\t\treturn this.state.data !== null ? (\r\n\t\t\t<div>\r\n\t\t\t\t<table className=\"table table-striped overflow-table\">\r\n\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t<th>Day</th>\r\n\t\t\t\t\t\t\t<th>Susceptible</th>\r\n\t\t\t\t\t\t\t<th>Infected</th>\r\n\t\t\t\t\t\t\t<th>Immune</th>\r\n\t\t\t\t\t\t\t<th>Dead</th>\r\n\t\t\t\t\t\t\t<th>Total Population</th>\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t</thead>\r\n\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t{this.renderRows()}\r\n\t\t\t\t\t</tbody>\r\n\t\t\t\t</table>\r\n\t\t\t</div>\r\n\t\t) : null;\r\n\t}\r\n}","import React from \"react\";\r\nimport Simulator from \"../Simulator\";\r\nimport { LineChart, d3 } from \"react-d3-components\";\r\n\r\nexport class Graph extends React.Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\t\r\n\t    this.state = {\r\n\t\t\tdata: null,\t\t\t// graph data\r\n\t\t\tday: 0,\t\t\t\t// current simulation day\r\n\t\t\tyLabel: \"Infected\"\t// y-axis value\r\n\t    };\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\t// when the simulator signals it has received data\r\n\t\tSimulator.on(\"data\", this.onSimulatorData.bind(this));\r\n\r\n\t\t// when the simulator signals a reset\r\n\t\tSimulator.on(\"reset\", this.onSimulatorReset.bind(this));\r\n\r\n\t\t// when the simulator changes the day\r\n\t\tSimulator.on(\"update\", this.onSimulatorUpdate.bind(this));\r\n\r\n\t\t// when the simulator changes the graph\r\n\t\tSimulator.on(\"update-graph\", this.onSimulatorUpdateGraph.bind(this));\r\n\t}\r\n\r\n\t// simulator has data - convert to d3 format and store it\r\n\tonSimulatorData(){\r\n\t\t// update\r\n\t\tthis.setState({data: Simulator.data});\r\n\t}\r\n\r\n\t// simulator reset - reset this component\r\n\tonSimulatorReset(){\r\n\t\tthis.setState({data: null, day: 0});\r\n\t}\r\n\r\n\t// simulator update - update to the current day\r\n\tonSimulatorUpdate(){\r\n\t\tthis.setState({day: Simulator.currentDay});\r\n\t}\r\n\r\n\t// simulator update - graph change\r\n\tonSimulatorUpdateGraph(evt){\r\n\t\t// day change\r\n\t\tif(typeof evt.day === \"number\"){\r\n\t\t\tthis.setState({day: evt.day});\r\n\t\t}\r\n\t}\r\n\r\n\t// when the graph y axis drop down is changed\r\n\tonYLabelChange(evt){\r\n\t\tthis.setState({yLabel: evt.target.value})\r\n\t}\r\n\r\n\t// gets the data values (multiple lines) up to do the current\r\n\tgetDataForAllLabels(){\r\n\t\tlet largestY = 0;\r\n\r\n\t\tlet values = [];\t\t// holds the correctly formatted values\r\n\t\tlet valuesObj = {};\t\t// helps to sort by label ('Infected', 'Susceptible', etc)\r\n\r\n\t\t// iterate over each day...\r\n\t\tfor(let i = 0; i <= this.state.day; i++){\r\n\t\t\t// day json, example: {'Infected': 100, 'Susceptible': 5, etc}\r\n\t\t\tlet row = this.state.data[i]; \r\n\r\n\t\t\t// for each label... (row[label] is the y value for the y label (ex: how many infected))\r\n\t\t\tfor(let label in row){\r\n\t\t\t\tlet y = parseFloat(row[label]);\r\n\r\n\t\t\t\tlargestY = Math.max(largestY, y);\r\n\r\n\t\t\t\tlet pt = {x: i, y};\r\n\r\n\t\t\t\tif(label in valuesObj){\r\n\t\t\t\t\tvaluesObj[label].values.push(pt);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tvaluesObj[label] = {\r\n\t\t\t\t\t\tlabel, values: [pt]\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// convert the dictionary into the correctly formatted array\r\n\t\tfor(let key in valuesObj){\r\n\t\t\tvalues.push(valuesObj[key]);\r\n\t\t}\r\n\r\n\t\t// allData is used by render method to determine multiline\r\n\t\treturn {values, largestY, allData: true};\r\n\t}\r\n\r\n\t// gets the data values up to the current day\r\n\tgetData(){\r\n\t\t// make sure there is data\r\n\t\tif(!this.state.data || this.state.day < 1){\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\t// All = multiline, this function is for one line\r\n\t\tif(this.state.yLabel === \"All\"){\r\n\t\t\treturn this.getDataForAllLabels();\r\n\t\t}\r\n\r\n\t\tlet largestY = 0;\r\n\r\n\t\tlet values = [];\r\n\r\n\t\t// iterate... find largest Y and populate values with {x, y} format\r\n\t\tfor(let i = 0; i <= this.state.day; i++){\r\n\t\t\tlet y = parseFloat(this.state.data[i][this.state.yLabel]);\r\n\r\n\t\t\t\tlargestY = Math.max(largestY, y);\r\n\r\n\t\t\t\tvalues.push({x: i, y});\r\n\t\t}\r\n\r\n\t\t// d3 wants {values:[...]}\r\n\t\treturn {values, largestY};\r\n\t}\r\n\r\n\trender(){\r\n\t\t// graph size constants\r\n\t\tconst WIDTH = \t\t540,\r\n\t\t\tHEIGHT = \t\t525,\r\n\t\t\tMARGIN_TOP = \t10,\r\n\t\t\tMARGIN_BOTTOM =\t50,\r\n\t\t\tMARGIN_LEFT = \t80,\r\n\t\t\tMARGIN_RIGHT = \t10;\r\n\r\n\t\tlet data = this.getData();\r\n\t\tif(data){\r\n\t\t\t// 2 ways to render based on multiline or 1 line\r\n\t\t\t// 1 line = {values: [....]}\r\n\t\t\t// multiline = [ { label: \"\", values: [ {x, y} ] } ]\r\n\t\t\t// \"allData\" in data === multiline \r\n\t\t\tlet dataToRender = \"allData\" in data ? data.values : data;\r\n\t\t\tlet endX = \"allData\" in data ? data.values[0].values.length : data.values.length;\r\n\r\n\t\t\t// scale the x-axis (0 - last day) with graph width\r\n\t\t\tlet xScale = d3.scale.linear()\r\n\t\t\t\t.domain([0, endX-1])\r\n\t\t\t\t.range([0, WIDTH - MARGIN_LEFT - MARGIN_RIGHT]);\r\n\t\t\t\r\n\t\t\t// scale the y-axis based on (0 - biggest y) with graph height\r\n\t\t\tlet yScale = d3.scale.linear()\r\n\t\t\t\t.domain([data.largestY, 0])\r\n\t\t\t\t.range([0, HEIGHT - MARGIN_TOP - MARGIN_BOTTOM]);\r\n\r\n\t\t\treturn (\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<h5></h5>\r\n\t\t\t\t\t<div className=\"GraphDropdown\" onChange={this.onYLabelChange.bind(this)}>\r\n\t\t\t\t\t\t<select className=\"form-control\">\r\n\t\t\t\t\t\t\t<option>Infected</option>\r\n\t\t\t\t\t\t\t<option>Susceptible</option>\r\n\t\t\t\t\t\t\t<option>Immune</option>\r\n\t\t\t\t\t\t\t<option>Dead</option>\r\n\t\t\t\t\t\t\t<option>All</option>\r\n\t\t\t\t\t\t</select>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<LineChart\r\n\t\t\t\t\t\t\tdata={dataToRender}\r\n\t\t\t\t\t\t\taxes\r\n\t\t\t\t\t\t\twidth={WIDTH}\r\n\t\t\t\t\t\t\theight={HEIGHT}\r\n\t\t\t\t\t\t\tmargin={{\r\n\t\t\t\t\t\t\t\ttop: MARGIN_TOP, bottom: MARGIN_BOTTOM,\r\n\t\t\t\t\t\t\t\tleft: MARGIN_LEFT, right: MARGIN_RIGHT\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\txAxis={{label: \"Day\"}}\r\n\t\t\t\t\t\t\tyAxis={{label: this.state.yLabel}}\r\n\t\t\t\t\t\t\txScale={xScale}\r\n\t\t\t\t\t\t\tyScale={yScale}\r\n\t\t\t\t\t\t\tcolorScale={d3.scale.category20()}\r\n\t\t\t\t\t\t\ttooltipMode={\"element\"}\r\n\t\t\t\t\t\t\ttooltipContained={true}\r\n\t\t\t\t\t\t\ttooltipHtml={(label, pt) => `Day ${pt.x} - ${pt.y} ${label || this.state.yLabel}`}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n}","import \"../lib/bootstrap.min.css\";\r\nimport \"./App.css\";\r\nimport React from \"react\";\r\nimport { Inputs } from \"./Inputs\";\r\nimport { Navbar } from \"./Navbar\";\r\nimport { Chart } from \"./Chart\";\r\nimport { Graph } from \"./Graph\";\r\n\r\nexport class App extends React.Component{\r\n    render(){\r\n        return (\r\n            <div>\r\n                <Navbar/>\r\n                <br/>\r\n                <span className=\"Version\">V0.2</span>\r\n                <main className=\"container card card-body bg-light\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-lg-6\">\r\n                            <Inputs/>\r\n                        </div>\r\n                        <div className=\"col-lg-6 graph\">\r\n                            <Graph/>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-lg-12\">\r\n                        <Chart/>\r\n                    </div>\r\n                </main>\r\n                <footer className=\"container text-center\">\r\n                    <hr/>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-lg-6\">\r\n                            Juall | Rosenblum | Pojero | Erry \r\n                        </div>\r\n                        <div className=\"col-lg-6\">\r\n                            <a href=\"https://opensource.org/licenses/MIT\" target=\"_blank\">MIT License</a>\r\n                        </div>\r\n                    </div>\r\n                </footer>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { App } from \"./components/App\";\r\n\r\nReactDOM.render(<App/>, document.querySelector(\"#root\"));"],"sourceRoot":""}