{"version":3,"sources":["Ajax.js","Simulator.js","EventEmitter.js","components/Inputs.jsx","components/Modal.jsx","components/Navbar.jsx","components/Chart.jsx","components/Graph.jsx","components/App.jsx","index.js"],"names":["Ajax","Object","classCallCheck","this","createClass","key","value","options","arguments","length","undefined","Promise","resolve","reject","method","url","window","location","origin","headers","query","data","xhr","XMLHttpRequest","h","onload","onerror","err","queryString","open","setRequestHeader","send","JSON","stringify","request","dict","qs","param","concat","substring","src_Simulator","_EventEmitter","Simulator","_this","possibleConstructorReturn","getPrototypeOf","call","_currentDay","inherits","_this2","href","includes","get","then","status","parse","response","emit","Event","Error","catch","currentDay","set","day","EventEmitter","_listeners","event","willTrigger","type","forEach","listener","eventType","push","listeners","i","splice","Inputs","_React$Component","props","intialImmunityRef","React","createRef","virilityRef","fatalityRef","initialInfectedRef","intialPopRef","infectionLengthRef","daysRef","state","pending","message","lastBtn","on","onSimulatorLoad","bind","onSimulatorError","immune_percent","current","virility","fatal_percent","initial_infected","initial_population","infection_length","simulation_length","setState","reset","hasData","nextDay","load","getInputsDictionary","_this3","autoRun","createCSVDownloadURL","link","document","createElement","setAttribute","click","evt","preventDefault","dayByDay","downloadCSV","target","getAttribute","react_default","a","className","onSubmit","ref","min","max","placeholder","required","step","onClick","onFormClick","disabled","btn","onReset","Component","Modal","apply","lib_default","isOpen","showModal","closeModal","rows","cols","Navbar","id","openModal","Modal_Modal","Chart","onSimulatorData","onSimulatorReset","onSimulatorUpdate","Array","susceptible","Math","floor","infected","immune","dead","population","total_population","renderRows","Graph","map","row","index","x","y","values","slice","react_d3_components_lib","getData","axes","width","height","margin","top","bottom","left","right","xAxis","label","yAxis","App","Navbar_Navbar","Inputs_Inputs","Graph_Graph","Chart_Chart","ReactDOM","render","App_App","querySelector"],"mappings":"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","file":"static/js/main.7bb9ac6b.chunk.js","sourcesContent":["export class Ajax{\r\n    // sends an async http request \r\n    static request(options={}){\r\n        return new Promise((resolve, reject) => {\r\n            // extract config from options object\r\n            let method = (typeof options.method === \"string\") ? options.method : \"GET\",\r\n                url = (typeof options.url === \"string\") ? options.url : window.location.origin,\r\n                headers = (typeof options.headers === \"object\" && options.headers) ? options.headers : {},\r\n                query = (typeof options.query === \"object\" && options.query) ? options.query : {},\r\n                data = (typeof options.data !== \"undefined\") ? options.data : null;\r\n\r\n            // create the request\r\n            let xhr = new XMLHttpRequest();\r\n\r\n            // attach listeners\r\n            xhr.onload = () => resolve(xhr);\r\n            xhr.onerror = err => reject(err);\r\n\r\n            // apply query string\r\n            if(query){\r\n                url += Ajax.queryString(query);\r\n            }\r\n\r\n            // open the request\r\n            xhr.open(method, url);\r\n\r\n            // apply http headers\r\n            for(let h in headers){\r\n                xhr.setRequestHeader(h, headers[h]);\r\n            }\r\n\r\n            // send the request\r\n            // send JSON if the data is not a string\r\n            if(data){\r\n                if(typeof data !== \"string\"){\r\n                    xhr.send(JSON.stringify(data));\r\n                }\r\n                else xhr.send(data);\r\n            }\r\n            else xhr.send();\r\n        });\r\n    }\r\n\r\n    // async http get request\r\n    static get(url, headers, query){\r\n        return Ajax.request({method: \"GET\", url, headers, query});\r\n    }\r\n\r\n    // async http post request\r\n    static post(url, headers, data){\r\n        return Ajax.request({method: \"POST\", url, headers, data});\r\n    }\r\n\r\n    // creates a query string from an object\r\n    static queryString(dict){\r\n        let qs = \"?\";\r\n\r\n        for(let param in dict){\r\n            qs += `${param}=${dict[param]}&`;\r\n        }\r\n\r\n        return qs.substring(0, qs.length - 1);\r\n    }\r\n}","import { Ajax } from \"./Ajax\";\r\nimport { EventEmitter } from \"./EventEmitter\";\r\n\r\n// singleton for holding simulation data\r\n// event-driven to keep chart + graph updated\r\nlet Simulator = class Simulator extends EventEmitter{\r\n    constructor(){\r\n        super();\r\n\r\n        this.data = null;       // simulation data array\r\n        this._currentDay = 0;    // 'private' current simulation day\r\n    }\r\n\r\n    // hits the API for data, signals progress\r\n    // query should be a dictionary of the inputs, will be converted into a query string\r\n    load(query){\r\n        return new Promise((resolve, reject) => {\r\n            // figure out endpoint\r\n            let url = window.location.href.includes(\"localhost\") ? \"http://localhost:8080/plague\" : `${window.location.origin}/plague`;\r\n            \r\n            // ajax call with query string\r\n            // (null headers)\r\n            Ajax.get(url, null, query)\r\n                .then(xhr => {    \r\n                    // ajax resolved (could be bad/good request, but server responded)\r\n                    if(xhr.status === 200){\r\n                        // good request - attempt to parse results json\r\n                        try{\r\n                            // parse json\r\n                            this.data = JSON.parse(xhr.response);\r\n                        }\r\n                        catch(err){\r\n                            // json parse error (should never happen)\r\n                            reject(err);\r\n                            this.emit(new Event(\"error\"));  // server responded with bad request signal\r\n                        }\r\n\r\n                        // done, resolve promise and emit load + data\r\n                        resolve();\r\n                        this.emit(new Event(\"load\"));   // server responded with good request signal\r\n\r\n                        this.emit(new Event(\"data\"));   // parsed data signal\r\n                    }\r\n                    else{\r\n                        // bad request\r\n                        reject(new Error(xhr.response || \"Bad request\"));\r\n                        this.emit(new Event(\"error\"));  // server responded with bad request signal\r\n                    }\r\n                })\r\n                .catch(err => {\r\n                    // ajax request died (really bad NOT a 400 error!)\r\n                    reject(err);\r\n                    this.emit(new Event(\"error\"));  // request died signal\r\n                });\r\n        });\r\n    }\r\n\r\n    // async download\r\n    downloadCSV(query){\r\n        let url = window.location.href.includes(\"localhost\") ? `http://localhost:8080/plague/csv` : `${window.location.origin}/plague/csv`;\r\n        return Ajax.get(url, null, query);\r\n    }\r\n\r\n    // csv download url\r\n    createCSVDownloadURL(query){\r\n        let qs = Ajax.queryString(query);\r\n        return window.location.href.includes(\"localhost\") ? `http://localhost:8080/plague/csv${qs}` : `${window.location.origin}/plague/csv${qs}`;\r\n    }\r\n\r\n    // simulation moves to the last day\r\n    // (triggers listeners)\r\n    autoRun(){\r\n        this.currentDay = this.data.length - 1; // auto emits update\r\n    }\r\n\r\n    // steps the simulation forward one day\r\n    // (triggers listeners)\r\n    nextDay(){\r\n        if(this.currentDay < this.data.length){\r\n            this.currentDay++;  // auto emits update\r\n        }\r\n    }\r\n\r\n    // resets simulation to day 0 and clears all stored data\r\n    // (triggers listeners)\r\n    reset(){\r\n        this.data = null;\r\n        this.currentDay = 0;\r\n        this.emit(new Event(\"reset\"));\r\n    }\r\n\r\n    // always emit update\r\n    set currentDay(day){\r\n        this._currentDay = day; \r\n        this.emit(new Event(\"update\"));\r\n    }\r\n\r\n    get hasData(){\r\n        return this.data !== null;\r\n    }\r\n\r\n    get currentDay(){\r\n        return this._currentDay;\r\n    }\r\n}\r\n\r\n// singleton\r\nexport default new Simulator();","// simple event emitter class\r\nexport class EventEmitter{\r\n    constructor(){\r\n        this._listeners = {};   // 'private' dictionary of {eventType: listenerFunction}\r\n    }\r\n\r\n    // triggers all listening functions\r\n    emit(event){\r\n        if(this.willTrigger(event.type)){\r\n            this._listeners[event.type].forEach(listener => listener(event));\r\n        }\r\n    }\r\n\r\n    // adds a listener\r\n    on(eventType, listener){\r\n        if(this.willTrigger(eventType)){\r\n            this._listeners[eventType].push(listener);\r\n        }\r\n        else{\r\n            this._listeners[eventType] = [listener];\r\n        }\r\n    }\r\n\r\n    // removes a listener\r\n    off(eventType, listener){\r\n        if(this.willTrigger(eventType)){\r\n            let listeners = this._listeners[eventType];\r\n\r\n            for(let i = 0; i < listeners.length; i++){\r\n                if(listeners[i] === listener){\r\n                    listeners.splice(i, 1);\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // checks if there are any listeners for a given type\r\n    willTrigger(eventType){\r\n        return eventType in this._listeners;\r\n    }\r\n}","import React from \"react\";\r\nimport Simulator from \"../Simulator\";\r\n\r\nexport class Inputs extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        // input refs\r\n        this.intialImmunityRef = React.createRef();\r\n        this.virilityRef = React.createRef();\r\n        this.fatalityRef = React.createRef();\r\n        this.initialInfectedRef = React.createRef();\r\n        this.intialPopRef = React.createRef();\r\n        this.infectionLengthRef = React.createRef();\r\n        this.daysRef = React.createRef();\r\n\r\n        this.state = {\r\n            pending: false,         // no new requests while pending (disable buttons)\r\n            message: null,          // message to display (errors)\r\n            lastBtn: null\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        Simulator.on(\"load\", this.onSimulatorLoad.bind(this));\r\n        Simulator.on(\"error\", this.onSimulatorError.bind(this));\r\n    }\r\n\r\n    // creates a dictionary of all the inputs and their values (names formatted for the API call) \r\n    getInputsDictionary(){\r\n        // extract data from inputs to use in query string \r\n        let immune_percent = this.intialImmunityRef.current.value,\r\n            virility = this.virilityRef.current.value,\r\n            fatal_percent = this.fatalityRef.current.value,\r\n            initial_infected = this.initialInfectedRef.current.value,\r\n            initial_population = this.intialPopRef.current.value,\r\n            infection_length = this.infectionLengthRef.current.value,\r\n            simulation_length = this.daysRef.current.value;\r\n\r\n        // MUST match API expectations! \r\n        return {immune_percent, virility, fatal_percent, initial_infected, initial_population, infection_length, simulation_length};\r\n    }\r\n\r\n    onSimulatorError(){\r\n        this.setState({pending: false});    // enable buttons\r\n    }\r\n\r\n    onSimulatorLoad(){\r\n        this.setState({pending: false});    // enable buttons\r\n    }\r\n\r\n    // called when then the reset button is clicked\r\n    onReset(){\r\n        // clear input fields?\r\n        /*this.intialImmunityRef.current.value = \"\";\r\n        this.virilityRef.current.value = \"\";\r\n        this.fatalityRef.current.value = \"\";\r\n        this.initialInfectedRef.current.value = \"\";\r\n        this.intialPopRef.current.value = \"\";\r\n        this.daysRef.current.value = \"\";*/\r\n\r\n        // cleared stored simulation data\r\n        Simulator.reset();\r\n    }\r\n\r\n    dayByDay(){\r\n        if(!Simulator.hasData){\r\n            // disable buttons for loading time\r\n            this.setState({pending: true});\r\n\r\n            // load data then show next day\r\n            Simulator.load(this.getInputsDictionary())\r\n                .then(() => {\r\n                    this.setState({message: null}); // remove possible err message\r\n                    Simulator.nextDay();\r\n                })\r\n                .catch(err => this.setState({message: err.message}));\r\n        }\r\n        else{\r\n            Simulator.nextDay();\r\n        }\r\n    }\r\n\r\n    autoRun(){\r\n        if(!Simulator.hasData){\r\n            // disable buttons for loading time\r\n            this.setState({pending: true});\r\n\r\n            // load data then auto run\r\n            Simulator.load(this.getInputsDictionary())\r\n                .then(() => {\r\n                    this.setState({message: null}); // remove possible err message\r\n                    Simulator.autoRun();\r\n                })\r\n                .catch(err => this.setState({message: err.message}));\r\n        }\r\n        else{\r\n            Simulator.autoRun();\r\n        }\r\n    }\r\n\r\n    // downloads the csv file\r\n    downloadCSV(){\r\n        if(!this.state.pending){\r\n            // create download link (never rendered)\r\n            let url = Simulator.createCSVDownloadURL(this.getInputsDictionary());\r\n\r\n            // create a link tag\r\n            let link = document.createElement(\"a\");\r\n            link.setAttribute(\"href\", url);\r\n            link.setAttribute(\"target\", \"_blank\");\r\n            link.setAttribute(\"download\", \"download\");\r\n\r\n            // click the tag\r\n            link.click();\r\n            link = null;\r\n\r\n            /*\r\n            //this.setState({pending: true});     // disable buttons\r\n\r\n            // async csv download request\r\n            Simulator.downloadCSV(this.getInputsDictionary())\r\n                .catch(err => this.setState({message: err.message}))    // error\r\n                .then(() => this.setState({pending: false}));           // enable buttons after fulfilled/rejected\r\n            */\r\n        }\r\n    }\r\n\r\n    // called when the form is 'submitted'\r\n    // entire purpose is to block the sending of the form\r\n    // (submit enforces 'required', 'min', 'max' constraints)\r\n    onSubmit(evt){\r\n        // no default submission (using ajax instead)\r\n        evt.preventDefault();\r\n\r\n        // problem - both autorun + next day activate this... (only way to do it with using form requires)\r\n\r\n        // day-by-day was the trigger\r\n        if(this.state.lastBtn === \"day-by-day\"){\r\n            this.dayByDay();\r\n        }\r\n\r\n        // autorun was the trigger\r\n        else if(this.state.lastBtn === \"auto-run\"){\r\n            this.autoRun();\r\n        }\r\n\r\n        // csv export was the trigger\r\n        else if(this.state.lastBtn === \"export-csv\"){\r\n            this.downloadCSV();\r\n        }\r\n        \r\n    }\r\n\r\n    // sets the last button to 'day-by-day' or 'autorun'\r\n    // kinda ugly but its because form has 2 submit buttons\r\n    onFormClick(evt){\r\n        this.setState({lastBtn: evt.target.getAttribute(\"btn\")});\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <h5 className=\"text-center\">Experimental Variables</h5>\r\n                <form onSubmit={this.onSubmit.bind(this)}>\r\n                    <div className=\"form-group\">\r\n                        <label>Length of Infection (Days)</label>\r\n                        <input ref={this.infectionLengthRef} className=\"form-control\" type=\"number\" min=\"1\" max=\"365\" placeholder=\"How many days does the infection last?\" required/>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Virility</label>\r\n                        <input ref={this.virilityRef} className=\"form-control\" type=\"number\" min=\"0\" max=\"20\" step=\"0.01\" placeholder=\"How infectious (transmission rate)?\" required/>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Fatality Percentage</label>\r\n                        <input ref={this.fatalityRef} className=\"form-control\" type=\"number\" min=\"0\" max=\"1\" step=\"0.001\" placeholder=\"What % of people die when infected?\" required/>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Initial Population</label>\r\n                        <input ref={this.intialPopRef} className=\"form-control\" type=\"number\" min=\"1\" max=\"1000000\" placeholder=\"How many people in the initial population?\" required/>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Initial Immunity Percentage</label>\r\n                        <input ref={this.intialImmunityRef} className=\"form-control\" type=\"number\" min=\"0\" max=\"1\" step=\"0.01\" placeholder=\"What % of the intial population people is immune?\" required/>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Initial Infected</label>\r\n                        <input ref={this.initialInfectedRef} className=\"form-control\" type=\"number\" min=\"0\" max=\"1000000\" placeholder=\"How many infected people in the initial population?\" required/>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Simulation Length (Days)</label>\r\n                        <input ref={this.daysRef} className=\"form-control\" type=\"number\" min=\"1\" max=\"365\" placeholder=\"How many days is the simulation?\" required/>\r\n                    </div>\r\n                    <div className=\"form-group text-center\">\r\n                        <button onClick={this.onFormClick.bind(this)} className=\"input-btn\" disabled={this.state.pending} btn=\"day-by-day\">Day-By-Day</button>&nbsp;\r\n                        <button onClick={this.onFormClick.bind(this)} className=\"input-btn\" disabled={this.state.pending} btn=\"auto-run\">Auto Run</button>&nbsp;\r\n                        <button onClick={this.onReset.bind(this)} className=\"input-btn\" disabled={this.state.pending} type=\"button\" >Reset</button>&nbsp;\r\n                        <button onClick={this.onFormClick.bind(this)} className=\"input-btn\" disabled={this.state.pending} btn=\"export-csv\">Export CSV</button>\r\n                    </div>\r\n                </form>\r\n                <div>{this.state.message}</div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport ReactModal from \"react-modal\"\r\n\r\nexport class Modal extends React.Component{\r\n\r\n\tonClick(){\r\n\r\n\t}\r\n\r\n\trender(){\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<ReactModal isOpen={this.props.showModal} >\r\n      \t\t\t\t<span className=\"close\" onClick={this.props.closeModal}>&times;</span>\r\n      \t\t\t\t\t<h2 className=\"modalHeader\">Report Bug or Request New Feature</h2>\r\n      \t\t\t\t\t<table className=\"reportsTable\">\r\n      \t\t\t\t\t\t<tr>\r\n\t      \t\t\t\t\t\t<td className=\"bugReport\">\r\n\t      \t\t\t\t\t\t\t<h5>Report Bug:</h5>\r\n\t\t\t      \t\t\t\t\t<textarea rows=\"4\" cols=\"100\">\r\n\t\t\t      \t\t\t\t\t\tReport Bug Here\r\n\t\t\t      \t\t\t\t\t</textarea>\r\n\t\t\t      \t\t\t\t\t<br/>\r\n\t\t\t      \t\t\t\t\t<button onClick={this.onClick.bind(this)}>Submit</button>\r\n\t\t      \t\t\t\t\t</td>\r\n\t\t      \t\t\t\t\t<td className=\"featureRequest\">\r\n\t\t      \t\t\t\t\t\t<h5>Request Feature:</h5>\r\n\t\t\t      \t\t\t\t\t<textarea rows=\"4\" cols=\"100\">\r\n\t\t\t      \t\t\t\t\t\t Request Feature Here\r\n\t\t\t      \t\t\t\t\t</textarea>\r\n\t\t\t      \t\t\t\t\t<br/>\r\n\t\t\t      \t\t\t\t\t<button onClick={this.onClick.bind(this)}>Submit</button>\r\n\t\t      \t\t\t\t\t</td>\r\n\t      \t\t\t\t\t</tr>\r\n      \t\t\t\t\t</table>\r\n      \t\t\t</ReactModal>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n","import React from \"react\";\r\nimport { Modal } from \"./Modal\"\r\n\r\nexport class Navbar extends React.Component{\r\n\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\r\n\t    this.state = {\r\n\t    \tshowModal: false,\r\n\t    \tcloseModal:false\r\n\t    };\r\n\r\n\t}\r\n\r\n\tcloseModal(){\r\n\t\tthis.setState({showModal:false});\r\n\t}\r\n\r\n\topenModal(){\r\n\t\tthis.setState({showModal:true});\r\n\t}\r\n\r\n\trender(){\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n\t\t\t\t\t<div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n\t\t\t\t\t\t<ul className=\"navbar-nav mr-auto\">\r\n\t\t  \t\t\t\t\t<li className=\"nav-item active\">\r\n\t\t    \t\t\t\t\t<span className=\"nav-link\" onClick={this.openModal.bind(this)}>Report Bug <span className=\"sr-only\">(current)</span></span>\r\n\t\t  \t\t\t\t\t</li>\r\n\t\t  \t\t\t\t</ul>\r\n\t\t  \t\t\t</div>\r\n\t      \t\t</nav>\r\n\t      \t\t<Modal showModal={this.state.showModal} closeModal={this.closeModal.bind(this)} />\r\n\t      \t</div>\r\n\t\t);\r\n\t}\r\n}","import React from \"react\";\r\nimport Simulator from \"../Simulator\";\r\n\r\nexport class Chart extends React.Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\tdata: null,\t\t// simulatoion data set\r\n\t\t\tday: 0\t\t\t// current simulation day\r\n\t\t};\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\t// simulator singles data set loaded\r\n\t\tSimulator.on(\"data\", this.onSimulatorData.bind(this));\r\n\r\n\t\t// simulator signals a reset\r\n\t\tSimulator.on(\"reset\", this.onSimulatorReset.bind(this));\r\n\r\n\t\t// simulator signals a different day\r\n\t\tSimulator.on(\"update\", this.onSimulatorUpdate.bind(this));\r\n\t}\r\n\r\n\t// simulator got data - store it\r\n\tonSimulatorData(){\r\n\t\tthis.setState({data: Simulator.data});\r\n\t}\r\n\r\n\t// simulator reset - reset this component\r\n\tonSimulatorReset(){\r\n\t\tthis.setState({data: null, day: 0});\r\n\t}\r\n\r\n\t// simulator day changed - update component day\r\n\tonSimulatorUpdate(){\r\n\t\tthis.setState({day: Simulator.currentDay});\r\n\t}\r\n\r\n\t// renders table rows up to the current simulation day\r\n\trenderRows(){\r\n\t\tif(Simulator.hasData){\r\n\t\t\tlet rows = new Array(Simulator.currentDay + 1);\r\n\r\n\t\t\tfor(let i = 0, day; i < Simulator.currentDay; i++){\r\n\t\t\t\tday = Simulator.data[i];\r\n\r\n\t\t\t\tlet susceptible = Math.floor(day.susceptible),\r\n\t\t\t\t\tinfected = Math.floor(day.infected),\r\n\t\t\t\t\timmune = Math.floor(day.immune),\r\n\t\t\t\t\tdead = Math.floor(day.dead),\r\n\t\t\t\t\tpopulation = Math.floor(day.total_population);\r\n\r\n\t\t\t\trows[i] = (\r\n\t\t\t\t\t<tr key={i}>\r\n\t\t\t\t\t\t<td>{i}</td>\r\n\t\t\t\t\t\t<td>{susceptible}</td>\r\n\t\t\t\t\t\t<td>{infected}</td>\r\n\t\t\t\t\t\t<td>{immune}</td>\r\n\t\t\t\t\t\t<td>{dead}</td>\r\n\t\t\t\t\t\t<td>{population}</td>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\treturn rows;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n\r\n\trender(){\r\n\t\treturn this.state.data !== null ? (\r\n\t\t\t<div>\r\n\t\t\t\t<table className=\"table table-striped overflow-table\">\r\n\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t<th>Day</th>\r\n\t\t\t\t\t\t\t<th>Susceptible</th>\r\n\t\t\t\t\t\t\t<th>Infected</th>\r\n\t\t\t\t\t\t\t<th>Immune</th>\r\n\t\t\t\t\t\t\t<th>Dead</th>\r\n\t\t\t\t\t\t\t<th>Total Population</th>\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t</thead>\r\n\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t{this.renderRows()}\r\n\t\t\t\t\t</tbody>\r\n\t\t\t\t</table>\r\n\t\t\t</div>\r\n\t\t) : null;\r\n\t}\r\n}","import React from \"react\";\r\nimport Simulator from \"../Simulator\";\r\nimport { LineChart } from \"react-d3-components\";\r\n\r\nexport class Graph extends React.Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\r\n\t    this.state = {\r\n\t\t\tdata: null,\t\t// graph points\r\n\t\t\tday: 0\t\t\t// current simulation day\r\n\t    };\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\t// when the simulator signals it has received data\r\n\t\tSimulator.on(\"data\", this.onSimulatorData.bind(this));\r\n\r\n\t\t// when the simulator signals a reset\r\n\t\tSimulator.on(\"reset\", this.onSimulatorReset.bind(this));\r\n\r\n\t\t// when the simulator changes the day\r\n\t\tSimulator.on(\"update\", this.onSimulatorUpdate.bind(this));\r\n\t}\r\n\r\n\t// simulator has data - convert to d3 format and store it\r\n\tonSimulatorData(){\r\n\t\t// map a new array of {x: day, y: dead}\r\n\t\tlet data = Simulator.data.map((row, index) => {\r\n\t\t\treturn {\r\n\t\t\t\tx: index,\r\n\t\t\t\ty: row.dead\r\n\t\t\t};\r\n\t\t});\r\n\r\n\t\t// update\r\n\t\tthis.setState({data});\r\n\t}\r\n\r\n\t// simulator reset - reset this component\r\n\tonSimulatorReset(){\r\n\t\tthis.setState({data: null, day: 0});\r\n\t}\r\n\r\n\t// simulator update - update to the current day\r\n\tonSimulatorUpdate(){\r\n\t\tthis.setState({day: Simulator.currentDay});\r\n\t}\r\n\r\n\t// gets the data values up to the current day\r\n\tgetData(){\r\n\t\tif(!this.state.data || this.state.day < 1){\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\t// d3 wants {values:[...]}\r\n\t\tlet values = this.state.data.slice(0, this.state.day + 1);\r\n\t\treturn {values};\r\n\t}\r\n\r\n\trender(){\r\n\t\treturn this.state.data !== null ? (\r\n\t\t\t<div>\r\n\t\t\t\t<h5></h5>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<LineChart\r\n\t\t\t\t\t\tdata={this.getData()}\r\n\t\t\t\t\t\taxes\r\n\t\t\t\t\t\twidth={400}\r\n\t\t\t\t\t\theight={400}\r\n\t\t\t\t\t\tmargin={{top: 10, bottom: 50, left: 50, right: 10}}\r\n\t\t\t\t\t\txAxis={{label: \"Days\"}}\r\n\t\t\t\t\t\tyAxis={{label: \"Dead\"}}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t) : null;\r\n\t}\r\n}","import \"../lib/bootstrap.min.css\";\r\nimport \"./App.css\";\r\nimport React from \"react\";\r\nimport { Inputs } from \"./Inputs\";\r\nimport { Navbar } from \"./Navbar\";\r\nimport { Chart } from \"./Chart\";\r\nimport { Graph } from \"./Graph\";\r\n\r\nexport class App extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            rows: null\r\n        };\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <Navbar/>\r\n                <br/>\r\n                <main className=\"container card card-body bg-light\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-lg-6\">\r\n                            <Inputs/>\r\n                        </div>\r\n                        <div className=\"col-lg-6\">\r\n                            <Graph rows={this.state.rows}/>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-lg-12\">\r\n                        <Chart/>\r\n                    </div>\r\n                </main>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { App } from \"./components/App\";\r\n\r\nReactDOM.render(<App/>, document.querySelector(\"#root\"));"],"sourceRoot":""}