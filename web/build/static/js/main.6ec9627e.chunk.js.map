{"version":3,"sources":["Ajax.js","EventEmitter.js","SimulationUpdateEvent.js","Simulator.js","ParamStorage.js","components/NumSlider.jsx","preset.js","components/Inputs.jsx","components/MailModal.jsx","components/Navbar.jsx","components/Chart.jsx","components/Graph.jsx","components/App.jsx","index.js"],"names":["Ajax","Object","classCallCheck","this","createClass","key","value","options","arguments","length","undefined","Promise","resolve","reject","method","url","window","location","origin","headers","query","data","xhr","XMLHttpRequest","h","onload","onerror","err","queryString","open","setRequestHeader","send","JSON","stringify","request","dict","qs","param","concat","substring","EventEmitter","_listeners","event","willTrigger","type","forEach","listener","eventType","push","listeners","i","splice","SimulationUpdateEvent","day","_type","_day","get","src_Simulator","_EventEmitter","Simulator","_this","possibleConstructorReturn","getPrototypeOf","call","_currentDay","_firstInvalidDay","_useErrCorrecting","inherits","_this2","href","includes","Access-Control-Allow-Origin","Error-Correction","isErrCorrecting","then","status","parse","response","parseInt","getResponseHeader","emit","Event","Error","catch","_this3","Content-Type","csvDataBlob","Blob","a","document","createElement","URL","createObjectURL","setAttribute","Date","now","click","revokeObjectURL","message","currentDay","set","maxDays","hasData","Math","min","src_ParamStorage","ParamStorage","_numParamSets","_lastParamSet","_currDay","sessionStorage","clear","params","infectionLength","infection_length","transmissionRate","transmission_rate","virulence","initialPopulation","initial_population","immunePercent","immune_percent","initialInfected","initial_infected","simulationLength","simulation_length","preset","paramsNotLastSave","setItem","numParamSets","removeItem","saveParamsInputsDict","newParams","paramId","json","getItem","firstStoredDay","getSavedParams","NumSlider","_React$Component","props","numRef","React","createRef","rangeRef","current","init","evt","val","parseFloat","target","max","react_default","className","label","showRange","minText","maxText","ref","onChange","onNumber","bind","step","placeholder","required","disabled","onSlide","n","Component","presets","Seasonal Flu","Infection Length","Transmission","Virulence","Smallpox","Polio","Measles","Ebola","H1N1 Flu","H5N1 Flu","1918 Flu","Inputs","intialImmunityRef","transmissionRef","virulenceRef","initialInfectedRef","intialPopRef","infectionLengthRef","daysRef","presetRef","state","pending","lastBtn","isDisabled","on","onSimulatorLoad","onSimulatorError","URLSearchParams","search","getInputsDictionary","setState","reset","nextDay","load","autoRun","_this4","downloadCSVFile","preventDefault","dayByDay","downloadCSV","getAttribute","direction","stepBackwards","stepForwards","currentParams","onPresetChange","_this5","id","onClick","switchParamSet","onSubmit","NumSlider_NumSlider","onFormClick","btn","onReset","MailModal","textRef","errorRef","headerRef","typeError","errorTime","errorMsg","other","errMessage","successMessage","prevProps","showModal","e","goodHeader","BuildArray","post","text","lib_default","isOpen","closeModal","submitClick","onTypeSelect","name","TypeOther","Navbar","showNav","showAdvanced","prev","reactstrap_es","color","light","expand","toggleNavbar","navbar","selected","openModal","toggle","toggleDropdown","caret","toggleErrorCorrection","MailModal_MailModal","Chart","onSimulatorData","onSimulatorReset","onSimulatorUpdate","rows","Array","_loop","susceptible","round","Susceptible","infected","Infected","immune","Immune","dead","Dead","population","TotalPopulation","style","tooltip","firstInvalidDay","borderLeft","borderRight","title","setGraphDay","toLocaleString","renderRows","WIDTH","COLORS","Graph","graphContainerRef","yLabel","containerWidth","onSimulatorUpdateGraph","addEventListener","onResize","prevState","values","valuesObj","row","pt","x","y","labels","largestY","getDataForAllLabels","toLowerCase","element","getBoundingClientRect","width","keys","getData","numDays","onYLabelChange","react_easy_chart_lib","height","margin","top","bottom","left","right","axes","axisLabels","dataPoints","xDomainRange","yDomainRange","lineColors","map","clickHandler","onGraphClick",".label","fill",".axis","fontSize","fontFamily","renderGraphKey","App","apply","Navbar_Navbar","Inputs_Inputs","Graph_Graph","Chart_Chart","ReactDOM","render","App_App","querySelector"],"mappings":"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","file":"static/js/main.6ec9627e.chunk.js","sourcesContent":["export class Ajax{\r\n    // sends an async http request \r\n    static request(options={}){\r\n        return new Promise((resolve, reject) => {\r\n            // extract config from options object\r\n            let method = (typeof options.method === \"string\") ? options.method : \"GET\",\r\n                url = (typeof options.url === \"string\") ? options.url : window.location.origin,\r\n                headers = (typeof options.headers === \"object\" && options.headers) ? options.headers : {},\r\n                query = (typeof options.query === \"object\" && options.query) ? options.query : {},\r\n                data = (typeof options.data !== \"undefined\") ? options.data : null;\r\n\r\n            // create the request\r\n            let xhr = new XMLHttpRequest();\r\n\r\n            // attach listeners\r\n            xhr.onload = () => resolve(xhr);\r\n            xhr.onerror = err => reject(err);\r\n\r\n            // apply query string\r\n            if(query){\r\n                url += Ajax.queryString(query);\r\n            }\r\n\r\n            // open the request\r\n            xhr.open(method, url);\r\n\r\n            // apply http headers\r\n            for(let h in headers){\r\n                xhr.setRequestHeader(h, headers[h]);\r\n            }\r\n\r\n            // send the request\r\n            // send JSON if the data is not a string\r\n            if(data){\r\n                if(typeof data !== \"string\"){\r\n                    xhr.send(JSON.stringify(data));\r\n                }\r\n                else xhr.send(data);\r\n            }\r\n            else xhr.send();\r\n        });\r\n    }\r\n\r\n    // async http get request\r\n    static get(url, headers, query){\r\n        return Ajax.request({method: \"GET\", url, headers, query});\r\n    }\r\n\r\n    // async http post request\r\n    static post(url, headers, data){\r\n        return Ajax.request({method: \"POST\", url, headers, data});\r\n    }\r\n\r\n    // creates a query string from an object\r\n    static queryString(dict){\r\n        let qs = \"?\";\r\n\r\n        for(let param in dict){\r\n            qs += `${param}=${dict[param]}&`;\r\n        }\r\n\r\n        return qs.substring(0, qs.length - 1);\r\n    }\r\n}","// simple event emitter class\r\nexport class EventEmitter{\r\n    constructor(){\r\n        this._listeners = {};   // 'private' dictionary of {eventType: listenerFunction}\r\n    }\r\n\r\n    // triggers all listening functions\r\n    emit(event){\r\n        if(this.willTrigger(event.type)){\r\n            this._listeners[event.type].forEach(listener => listener(event));\r\n        }\r\n    }\r\n\r\n    // adds a listener\r\n    on(eventType, listener){\r\n        if(this.willTrigger(eventType)){\r\n            this._listeners[eventType].push(listener);\r\n        }\r\n        else{\r\n            this._listeners[eventType] = [listener];\r\n        }\r\n    }\r\n\r\n    // removes a listener\r\n    off(eventType, listener){\r\n        if(this.willTrigger(eventType)){\r\n            let listeners = this._listeners[eventType];\r\n\r\n            for(let i = 0; i < listeners.length; i++){\r\n                if(listeners[i] === listener){\r\n                    listeners.splice(i, 1);\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // checks if there are any listeners for a given type\r\n    willTrigger(eventType){\r\n        return eventType in this._listeners;\r\n    }\r\n}","// simple event object for simulation updates \r\nexport class SimulationUpdateEvent{\r\n    constructor(type, day=null){\r\n        this._type = type;\r\n        this._day = day;\r\n    }\r\n\r\n    get type(){\r\n        return this._type;\r\n    }\r\n\r\n    get day(){\r\n        return this._day;\r\n    }\r\n}","import { Ajax } from \"./Ajax\";\r\nimport { EventEmitter } from \"./EventEmitter\";\r\nimport { SimulationUpdateEvent } from \"./SimulationUpdateEvent\";\r\n\r\n// singleton for holding simulation data\r\n// event-driven to keep chart + graph updated\r\nlet Simulator = class Simulator extends EventEmitter{\r\n    constructor(){\r\n        super();\r\n\r\n        this.data = null;                   // simulation data array\r\n        this._currentDay = 0;               // 'private' current simulation day\r\n        this._firstInvalidDay = -1;         // first invalid day (-1 = no invalid days)\r\n        this._useErrCorrecting = true;      // use error correction?\r\n    }\r\n\r\n    // hits the API for data, signals progress\r\n    // query should be a dictionary of the inputs, will be converted into a query string\r\n    load(query){\r\n        return new Promise((resolve, reject) => {\r\n            // figure out endpoint\r\n            let url = window.location.href.includes(\"localhost\") ? \"http://localhost:8080/plague\" : `${window.location.origin}/plague`;\r\n            \r\n            // CORS headers (use foreign domain)\r\n            let headers = {\r\n                \"Access-Control-Allow-Origin\": window.location.origin,\r\n                \"Error-Correction\": this.isErrCorrecting\r\n            };\r\n\r\n            // ajax call with query string\r\n            // (null headers)\r\n            Ajax.get(url, headers, query)\r\n                .then(xhr => {    \r\n                    // ajax resolved (could be bad/good request, but server responded)\r\n                    if(xhr.status === 200){\r\n                        // good request - attempt to parse results json\r\n                        try{\r\n                            // parse json\r\n                            this.data = JSON.parse(xhr.response);\r\n\r\n                            // extract first invalid day\r\n                            this._firstInvalidDay = parseInt(xhr.getResponseHeader(\"First-Invalid-Day\")) || -1;\r\n                        }\r\n                        catch(err){\r\n                            // json parse error (should never happen)\r\n                            reject(err);\r\n                            this.emit(new Event(\"error\"));  // server responded with bad request signal\r\n                        }\r\n\r\n                        // done, resolve promise and emit load + data\r\n                        resolve();\r\n                        this.emit(new Event(\"load\"));   // server responded with good request signal\r\n\r\n                        this.emit(new Event(\"data\"));   // parsed data signal\r\n                    }\r\n                    else{\r\n                        // bad request\r\n                        reject(new Error(xhr.response || \"Bad request\"));\r\n                        this.emit(new Event(\"error\"));  // server responded with bad request signal\r\n                    }\r\n                })\r\n                .catch(err => {\r\n                    // ajax request died (really bad NOT a 400 error!)\r\n                    reject(err);\r\n                    this.emit(new Event(\"error\"));  // request died signal\r\n                });\r\n        });\r\n    }\r\n\r\n    // asychronously downloads a csv file using ajax\r\n    downloadCSVFile(query){\r\n        return new Promise((resolve, reject) => {\r\n            // figure out endpoint origin\r\n            let origin = window.location.origin.includes(\"localhost\") ? \"http://localhost:8080\" : window.location.origin;\r\n\r\n            // figure out endpoint using origin\r\n            let url = `${origin}/plague`;\r\n\r\n            // http request headers\r\n            let headers = {\r\n                \"Access-Control-Allow-Origin\": window.location.origin,\r\n                \"Content-Type\": \"text/csv\",\r\n                \"Error-Correction\": this.isErrCorrecting\r\n            };\r\n\r\n            // get csv file via Ajax\r\n            Ajax.get(url, headers, query)\r\n                .then(xhr => {\r\n                    // server responded\r\n                    if(xhr.status === 200){\r\n                        // good http status - download\r\n                        // xhr.response = csv text\r\n                        // convert to blob\r\n                        let csvDataBlob = new Blob([xhr.response], {type: \"octet/stream\"});\r\n\r\n                        // create a 'secret' link using the blob\r\n                        let a = document.createElement(\"a\");\r\n                        let url = window.URL.createObjectURL(csvDataBlob);\r\n                        \r\n                        // setup the link to download blob data\r\n                        a.setAttribute(\"download\", `data_${Date.now()}.csv`);\r\n                        a.setAttribute(\"href\", url);\r\n\r\n                        // click the link to download the file\r\n                        a.click();\r\n                        window.URL.revokeObjectURL(url);\r\n\r\n                        // trigger any listeners\r\n                        resolve(\"File downloaded.\");\r\n                    }\r\n                    else{\r\n                        // bad http status - trigger listeners with error\r\n                        reject(new Error(xhr.response || \"Error downloading CSV file.\"));\r\n                    }\r\n                })\r\n                .catch(err => {\r\n                    // server did not responed - trigger listeners with error\r\n                    reject(new Error(err.message || \"Unable to download CSV file.\"))\r\n                });\r\n        });\r\n    }\r\n\r\n    // simulation moves to the last day\r\n    // (triggers listeners)\r\n    autoRun(){\r\n        this.currentDay = this.data.length - 1; // auto emits update\r\n    }\r\n\r\n    // steps the simulation forward one day\r\n    // (triggers listeners)\r\n    nextDay(){\r\n        if(this.currentDay < this.data.length){\r\n            this.currentDay++;  // auto emits update\r\n        }\r\n    }\r\n\r\n    // resets simulation to day 0 and clears all stored data\r\n    // (triggers listeners)\r\n    reset(){\r\n        this.data = null;\r\n        this.currentDay = 0;\r\n        this.emit(new Event(\"reset\"));\r\n    }\r\n\r\n    // updates the graph day \r\n    setGraphDay(day){\r\n        this.emit(new SimulationUpdateEvent(\"update-graph\", day));\r\n    }\r\n\r\n    // always emit update\r\n    set currentDay(day){\r\n        let maxDays = this.hasData ? (this.data.length - 1) : 0;\r\n        this._currentDay = Math.min(day, maxDays); \r\n        this.emit(new SimulationUpdateEvent(\"update\", this.currentDay));\r\n    }\r\n\r\n    set isErrCorrecting(value){\r\n        if(typeof value === \"boolean\"){\r\n            this._useErrCorrecting = value;\r\n        }\r\n        else throw new Error(\"isErrCorrecting must be set to a boolean value.\");\r\n    }\r\n\r\n    get hasData(){\r\n        return this.data !== null;\r\n    }\r\n\r\n    get currentDay(){\r\n        return this._currentDay;\r\n    }\r\n\r\n    get firstInvalidDay(){\r\n        return this._firstInvalidDay;\r\n    }\r\n\r\n    get isErrCorrecting(){\r\n        return this._useErrCorrecting;\r\n    }\r\n}\r\n\r\n// singleton\r\nexport default new Simulator();","// class for managing parameter data history using session storage\r\nconst PARAM_STORAGE_LIMIT = 100;\r\n\r\nclass ParamStorage{\r\n    constructor(){\r\n        this._numParamSets = 0;\r\n        this._lastParamSet = null;\r\n        this._currDay = 0;\r\n\r\n        window.sessionStorage.clear();\r\n    }\r\n    \r\n    // saves parameters to session storage - expects query string format (as provided by inputs.jsx)\r\n    saveParamsInputsDict(dict){\r\n        let params = {\r\n            infectionLength:    dict.infection_length,\r\n            transmissionRate:   dict.transmission_rate,\r\n            virulence:          dict.virulence,\r\n            initialPopulation:  dict.initial_population,\r\n            immunePercent:      dict.immune_percent,\r\n            initialInfected:    dict.initial_infected,\r\n            simulationLength:   dict.simulation_length,\r\n            preset:             dict.preset\r\n        };\r\n\r\n        // prevent saving multiple set same time in a row\r\n        if(this.paramsNotLastSave(params)){\r\n            window.sessionStorage.setItem(++this._numParamSets, JSON.stringify(params))\r\n            this._currDay = this.numParamSets;\r\n\r\n            // enforce storage capacity - begin deleting from the left bound\r\n            if(this.numParamSets > PARAM_STORAGE_LIMIT){\r\n                window.sessionStorage.removeItem(this.numParamSets - PARAM_STORAGE_LIMIT);\r\n            }\r\n\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // saves parameters to session storage\r\n    saveParams(infectionLength, transmissionRate, virulence, initialPopulation, immunePercent, initialInfected, simulationLength, preset){\r\n        return this.saveParamsInputsDict({\r\n            infection_length:   infectionLength,\r\n            transmission_rate:  transmissionRate,\r\n            virulence,\r\n            initial_population: initialPopulation,\r\n            immune_percent:     immunePercent,\r\n            initial_infected:   initialInfected,\r\n            simulation_length:  simulationLength,\r\n            preset\r\n        });\r\n    }\r\n\r\n    // checks if 'newParams' is content different from the last save param set\r\n    paramsNotLastSave(newParams){\r\n        if(!this._lastParamSet) return true;\r\n\r\n        for(let param in this._lastParamSet){\r\n            if(this._lastParamSet[param] !== newParams[param]){\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // gets saved parameters\r\n    getSavedParams(paramId){\r\n        let json = window.sessionStorage.getItem(paramId) || null;\r\n        return json ? JSON.parse(json) : null;\r\n    }\r\n\r\n    // moves current day one into the backwards\r\n    stepBackwards(){\r\n        if(this._currDay - 1 >= this.firstStoredDay){\r\n            this._lastParamSet = this.getSavedParams(--this._currDay);\r\n        }\r\n    }\r\n\r\n    // move sthe current day one day forwards\r\n    stepForwards(){\r\n        if(this._currDay + 1 <= this.numParamSets){\r\n            this._lastParamSet = this.getSavedParams(++this._currDay);\r\n        }\r\n    }\r\n\r\n    get firstStoredDay(){\r\n        if(this.numParamSets > PARAM_STORAGE_LIMIT){\r\n            return this.numParamSets - PARAM_STORAGE_LIMIT;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    get currentParams(){\r\n        return this.getSavedParams(this._currDay);\r\n    }\r\n\r\n    get currentDay(){\r\n        return this._currDay;\r\n    }\r\n\r\n    get numParamSets(){\r\n        return this._numParamSets;\r\n    }\r\n}\r\n\r\nexport default new ParamStorage();","import \"./NumSlider.css\";\r\nimport React from \"react\";\r\n\r\nexport class NumSlider extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.numRef = React.createRef();\r\n        this.rangeRef = React.createRef();\r\n    }\r\n\r\n    // mounted - set the default numbers\r\n    componentDidMount(){\r\n        this.numRef.current.value = this.props.init || this.props.min;\r\n        this.rangeRef.current.value = this.props.init || this.props.min;\r\n    }\r\n\r\n    // on text field input\r\n    onNumber(evt){\r\n        // set the range value to the number value\r\n        let val = parseFloat(evt.target.value);\r\n    \r\n        if(val){\r\n            // enforce min/max constraints\r\n            val = Math.min(Math.max(val, this.props.min), this.props.max); \r\n\r\n            // update inputs\r\n            this.numRef.current.value = val;\r\n            this.rangeRef.current.value = val;\r\n        }\r\n        else{\r\n            // empty input - range at min and number will be empty\r\n            this.rangeRef.current.value = this.props.min;\r\n        }\r\n    }\r\n\r\n    // on range bar move\r\n    onSlide(evt){\r\n        // set the text value to the number value\r\n        let val = evt.target.value;\r\n\r\n        // enforce min/max constraints \r\n        val = Math.min(Math.max(val, this.props.min), this.props.max);\r\n\r\n        // update number input\r\n        this.numRef.current.value = val;\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"num-slider-container\">\r\n                <div>\r\n                    <label>{this.props.label}</label>\r\n                    {this.props.showRange ? (` ${this.minText}-${this.maxText}`) : null}\r\n                </div>\r\n                <div>\r\n                    <input \r\n                        ref={this.numRef}\r\n                        onChange={this.onNumber.bind(this)}\r\n                        type=\"number\"\r\n                        min={this.props.min}\r\n                        max={this.props.max}\r\n                        step={this.props.step}\r\n                        placeholder={this.props.placeholder}\r\n                        required={this.props.required}\r\n                        disabled={this.props.disabled}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <input\r\n                        ref={this.rangeRef}\r\n                        onChange={this.onSlide.bind(this)}\r\n                        type=\"range\"\r\n                        min={this.props.min}\r\n                        max={this.props.max}\r\n                        step={this.props.step}\r\n                        disabled={this.props.disabled}\r\n                        className=\"num-slider-slider\"\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    set value(n){\r\n        this.numRef.current.value = n;\r\n        this.rangeRef.current.value = n;\r\n    }\r\n\r\n    get minText(){\r\n        return this.props.minText ? this.props.minText : this.props.min;\r\n    }\r\n\r\n    get maxText(){\r\n        return this.props.maxText ? this.props.maxText : this.props.max;\r\n    }\r\n\r\n    get value(){\r\n        return this.numRef.current.value;\r\n    }\r\n}","export const presets ={\r\n    //presets in the inputs go here\r\n    //seasonal flu\r\n   \"Seasonal Flu\":{\r\n       \"Infection Length\": 8,\r\n       \"Transmission\": 1.2,\r\n       \"Virulence\": 0.01\r\n   },\r\n   //smallpox\r\n   \"Smallpox\":{\r\n    \"Infection Length\": 14,\r\n    \"Transmission\": 2.5,\r\n    \"Virulence\": 0.25 \r\n   },\r\n   //polio\r\n   \"Polio\":{\r\n    \"Infection Length\": 18,\r\n    \"Transmission\": 1,\r\n    \"Virulence\": 0.01 \r\n   },\r\n   //measles\r\n   \"Measles\":{\r\n    \"Infection Length\": 8,\r\n    \"Transmission\": 10,\r\n    \"Virulence\": 0.01 \r\n   },\r\n   //Ebola\r\n   \"Ebola\":{\r\n    \"Infection Length\": 13,\r\n    \"Transmission\": 1.5,\r\n    \"Virulence\": 0.75 \r\n   },\r\n    //H1N1 Flu\r\n    \"H1N1 Flu\":{\r\n    \"Infection Length\": 8,\r\n    \"Transmission\": 1.6,\r\n    \"Virulence\": 0.01 \r\n    },\r\n    //H5N1 Flu\r\n   \"H5N1 Flu\":{\r\n    \"Infection Length\": 8,\r\n    \"Transmission\": 0.1,\r\n    \"Virulence\": 0.6 \r\n   },\r\n    //1918 Flu\r\n    \"1918 Flu\":{\r\n    \"Infection Length\": 8,\r\n    \"Transmission\": 2,\r\n    \"Virulence\": 0.03 \r\n    }\r\n}\r\nexport default presets;\r\n","import React from \"react\";\r\nimport Simulator from \"../Simulator\";\r\nimport ParamStorage from \"../ParamStorage\";\r\nimport { NumSlider } from \"./NumSlider\";\r\nimport preset from \"../preset\"\r\n\r\nexport class Inputs extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        // input refs\r\n        this.intialImmunityRef = React.createRef();\r\n        this.transmissionRef = React.createRef();\r\n        this.virulenceRef = React.createRef();\r\n        this.initialInfectedRef = React.createRef();\r\n        this.intialPopRef = React.createRef();\r\n        this.infectionLengthRef = React.createRef();\r\n        this.daysRef = React.createRef();\r\n        this.presetRef = React.createRef();\r\n\r\n        this.state = {\r\n            pending: false,         // no new requests while pending (disable buttons)\r\n            message: null,          // message to display (errors)\r\n            lastBtn: null,\r\n            isDisabled: false       // to disable/enable fields depending on what preset is selected\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        Simulator.on(\"load\", this.onSimulatorLoad.bind(this));\r\n        Simulator.on(\"error\", this.onSimulatorError.bind(this));\r\n\r\n        // test values\r\n        if(new URLSearchParams(window.location.search).get(\"test\") === \"true\"){\r\n            this.initialInfectedRef.current.value = 500;\r\n            this.intialImmunityRef.current.value = 0.10;\r\n            this.intialPopRef.current.value = 1000000;\r\n            this.virulenceRef.current.value = 0.25;\r\n            this.daysRef.current.value = 365;\r\n            this.infectionLengthRef.current.value = 100;\r\n            this.transmissionRef.current.value = 0.2;\r\n\r\n            ParamStorage.saveParamsInputsDict(this.getInputsDictionary());\r\n        }\r\n    }\r\n\r\n    // creates a dictionary of all the inputs and their values (names formatted for the API call) \r\n    getInputsDictionary(){\r\n        // extract data from inputs to use in query string \r\n        let immune_percent =        this.intialImmunityRef.current.value,\r\n            transmission_rate =     this.transmissionRef.current.value,\r\n            virulence =             this.virulenceRef.current.value,\r\n            initial_infected =      this.initialInfectedRef.current.value,\r\n            initial_population =    this.intialPopRef.current.value,\r\n            infection_length =      this.infectionLengthRef.current.value,\r\n            simulation_length =     this.daysRef.current.value,\r\n            preset =                this.presetRef.current.value;\r\n\r\n        // make sure infected <= population\r\n        initial_infected = Math.min(initial_infected, initial_population);\r\n\r\n        // MUST match API expectations! \r\n        return {immune_percent, transmission_rate, virulence, initial_infected, initial_population, infection_length, simulation_length, preset};\r\n    }\r\n\r\n    onSimulatorError(){\r\n        this.setState({pending: false});    // enable buttons\r\n    }\r\n\r\n    onSimulatorLoad(){\r\n        this.setState({pending: false});    // enable buttons\r\n    }\r\n\r\n    // called when then the reset button is clicked\r\n    onReset(){\r\n        // cleared stored simulation data\r\n        Simulator.reset();\r\n    }\r\n\r\n    dayByDay(){\r\n        if(!Simulator.hasData){\r\n            // disable buttons for loading time\r\n            this.setState({pending: true});\r\n\r\n            // load data then show next day\r\n            Simulator.load(this.getInputsDictionary())\r\n                .then(() => {\r\n                    this.setState({message: null}); // remove possible err message\r\n                    Simulator.nextDay();\r\n\r\n                    ParamStorage.saveParamsInputsDict(this.getInputsDictionary());  // save parameters\r\n                })\r\n                .catch(err => this.setState({message: err.message}));\r\n        }\r\n        else{\r\n            Simulator.nextDay();\r\n        }\r\n    }\r\n\r\n    autoRun(){\r\n        if(!Simulator.hasData){\r\n            // disable buttons for loading time\r\n            this.setState({pending: true});\r\n\r\n            // load data then auto run\r\n            Simulator.load(this.getInputsDictionary())\r\n                .then(() => {\r\n                    this.setState({message: null}); // remove possible err message\r\n                    Simulator.autoRun();\r\n\r\n                    ParamStorage.saveParamsInputsDict(this.getInputsDictionary());  // save parameters\r\n                })\r\n                .catch(err => this.setState({message: err.message}));\r\n        }\r\n        else{\r\n            Simulator.autoRun();\r\n        }\r\n    }\r\n\r\n    // downloads the csv file\r\n    downloadCSV(){\r\n        if(!this.state.pending){\r\n            // disable buttons\r\n            this.setState({pending: true});\r\n\r\n            Simulator.downloadCSVFile(this.getInputsDictionary())\r\n                .catch(err => {\r\n                    // something went wrong (server did not respond or bad request)\r\n                    this.setState({message: err.message});\r\n                })\r\n                .then(() => {\r\n                    // (this fires when any response happens not successful only!)\r\n                    // always enable buttons\r\n                    this.setState({pending: false})\r\n                });\r\n        }\r\n    }\r\n\r\n    // called when the form is 'submitted'\r\n    // entire purpose is to block the sending of the form\r\n    // (submit enforces 'required', 'min', 'max' constraints)\r\n    onSubmit(evt){\r\n        // no default submission (using ajax instead)\r\n        evt.preventDefault();\r\n\r\n        // problem - both autorun + next day activate this... (only way to do it with using form requires)\r\n\r\n        // day-by-day was the trigger\r\n        if(this.state.lastBtn === \"day-by-day\"){\r\n            this.dayByDay();\r\n        }\r\n\r\n        // autorun was the trigger\r\n        else if(this.state.lastBtn === \"auto-run\"){\r\n            this.autoRun();\r\n        }\r\n\r\n        // csv export was the trigger\r\n        else if(this.state.lastBtn === \"export-csv\"){\r\n            this.downloadCSV();\r\n        }\r\n        \r\n    }\r\n\r\n    // sets the last button to 'day-by-day' or 'autorun'\r\n    // kinda ugly but its because form has 2 submit buttons\r\n    onFormClick(evt){\r\n        this.setState({lastBtn: evt.target.getAttribute(\"btn\")});\r\n    }\r\n\r\n    onPresetChange(){\r\n        let value = this.presetRef.current.value;\r\n        \r\n        if(value !== \"Custom\"){\r\n            this.setState({isDisabled: true});\r\n            this.infectionLengthRef.current.value = preset[value][\"Infection Length\"];\r\n            this.transmissionRef.current.value = preset[value][\"Transmission\"];\r\n            this.virulenceRef.current.value = preset[value][\"Virulence\"]\r\n        }else{\r\n            this.setState({isDisabled: false});\r\n        }\r\n    }\r\n\r\n    // moves the parameter storage day & updates UI inputs\r\n    switchParamSet(direction){\r\n        // move the day\r\n        if(direction === \"backwards\"){\r\n            ParamStorage.stepBackwards();\r\n        }\r\n        else if(direction === \"forwards\"){\r\n            ParamStorage.stepForwards();\r\n        }\r\n        else throw new Error(\"Parameter switch direction must be 'forwards' or 'backwards'.\");\r\n\r\n        // bail if nothing already saved\r\n        let params = ParamStorage.currentParams || null;\r\n        if(!params) return; // nothing saved\r\n\r\n        // fill out UI form\r\n        this.infectionLengthRef.current.value = params.infectionLength;\r\n        this.transmissionRef.current.value = params.transmissionRate;\r\n        this.virulenceRef.current.value = params.virulence;\r\n        this.intialPopRef.current.value = params.initialPopulation;\r\n        this.intialImmunityRef.current.value = params.immunePercent;\r\n        this.initialInfectedRef.current.value = params.initialInfected;\r\n        this.daysRef.current.value = params.simulationLength;\r\n\r\n        this.presetRef.current.value = params.preset;\r\n        this.onPresetChange();\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <div id=\"inputs-header-container\" className=\"text-center\">\r\n                    <button onClick={() => this.switchParamSet(\"backwards\")}>&larr;</button>\r\n                    <h5 className=\"text-center\">Experimental Variables</h5>\r\n                    <button onClick={() => this.switchParamSet(\"forwards\")}>&rarr;</button>\r\n                </div>\r\n                <br/>\r\n                <form onSubmit={this.onSubmit.bind(this)}>\r\n                    <div className=\"row\">\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <NumSlider\r\n                                label={\"Length of Infection (Days)\"}\r\n                                showRange={true}\r\n                                min={1}\r\n                                max={365}\r\n                                step={1}\r\n                                required={true}\r\n                                ref={this.infectionLengthRef}\r\n                                disabled={this.state.isDisabled}\r\n                            />\r\n                        </div>\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <NumSlider\r\n                                label={\"Transmission Rate\"}\r\n                                showRange={true}\r\n                                min={0}\r\n                                max={20}\r\n                                step={0.01}\r\n                                required={true}\r\n                                ref={this.transmissionRef}\r\n                                disabled={this.state.isDisabled}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <NumSlider\r\n                                label={\"Virulence\"}\r\n                                showRange={true}\r\n                                min={0}\r\n                                max={1}\r\n                                step={0.001}\r\n                                required={true}\r\n                                ref={this.virulenceRef}\r\n                                disabled={this.state.isDisabled}\r\n                            />\r\n                        </div>\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <NumSlider\r\n                                label={\"Initial Population\"}\r\n                                showRange={true}\r\n                                min={1}\r\n                                max={1000000}\r\n                                step={1}\r\n                                required={true}\r\n                                ref={this.intialPopRef}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <NumSlider\r\n                                label={\"Initial Immunity Percent\"}\r\n                                showRange={true}\r\n                                min={0}\r\n                                max={1}\r\n                                step={0.01}\r\n                                required={true}\r\n                                ref={this.intialImmunityRef}\r\n                            />\r\n                        </div>\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <NumSlider\r\n                                label={\"Initial Infected\"}\r\n                                showRange={true}\r\n                                min={0}\r\n                                max={1000000}\r\n                                maxText={\"Population\"}\r\n                                step={1}\r\n                                required={true}\r\n                                ref={this.initialInfectedRef}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <NumSlider\r\n                                label={\"Simulation Length (Days)\"}\r\n                                showRange={true}\r\n                                min={1}\r\n                                max={365}\r\n                                step={1}\r\n                                required={true}\r\n                                ref={this.daysRef}\r\n                            />\r\n                        </div>\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <label>Presets:</label>\r\n                            <select ref={this.presetRef} className=\"form-control\" onChange={this.onPresetChange.bind(this)}>\r\n                                <option>Custom</option>\r\n                                <option>Seasonal Flu</option>\r\n                                <option>Smallpox</option>\r\n                                <option>Polio</option>\r\n                                <option>Measles</option>\r\n                                <option>Ebola</option>\r\n                                <option>H1N1 Flu</option>\r\n                                <option>H5N1 Flu</option>\r\n                                <option>1918 Flu</option>\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group text-center\">\r\n                        <button onClick={this.onFormClick.bind(this)} className=\"input-btn\" disabled={this.state.pending} btn=\"day-by-day\">Day-By-Day</button>&nbsp;\r\n                        <button onClick={this.onFormClick.bind(this)} className=\"input-btn\" disabled={this.state.pending} btn=\"auto-run\">Auto Run</button>&nbsp;\r\n                        <button onClick={this.onReset.bind(this)} className=\"input-btn\" disabled={this.state.pending} type=\"button\" >Reset</button>&nbsp;\r\n                        <button onClick={this.onFormClick.bind(this)} className=\"input-btn\" disabled={this.state.pending} btn=\"export-csv\">Export CSV</button>\r\n                    </div>\r\n                </form>\r\n                <div>{this.state.message}</div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport ReactModal from \"react-modal\"\r\nimport { Ajax } from \"../Ajax\";\r\n\r\nexport class MailModal extends React.Component{\r\n\r\n\tconstructor(props){\r\n        super(props);\r\n\r\n        // input refs\r\n        this.textRef = React.createRef();\r\n        this.errorRef = React.createRef();\r\n        this.headerRef = React.createRef();\r\n\r\n        this.type = null;\r\n        this.typeError = true;\r\n        this.errorTime = false;\r\n        this.errorMsg = \"\";\r\n\r\n        this.state = { \r\n\t\t\tother: false,\r\n\t\t\terrMessage:null,\r\n\t\t\tsuccessMessage:null,\r\n\t\t\tdisabled: false\r\n        };\r\n\r\n        //Modal.setAppElement(this.props.app);\r\n\t}\r\n\r\n\tcomponentDidUpdate(prevProps){\r\n\t\t// clear messages when the visibility changes\r\n\t\tif(prevProps.showModal && !this.props.showModal){\r\n\t\t\tthis.setState({errMessage: null, successMessage: null});\r\n\t\t}\r\n\t}\r\n\r\n\t// on click of submit button \r\n\tsubmitClick(e){\r\n\t\tthis.setState({errMessage:null});\r\n\t\te.preventDefault();\r\n\t\tlet goodHeader = this.headerRef.current ? (this.headerRef.current.value.length > 0) : true;\r\n\t\tif(this.type != null && this.textRef.current.value != \"\" && goodHeader){\r\n\t\t\tlet message = this.BuildArray();\r\n\r\n\t\t\t// localhost = dev, else = prod\r\n\t\t\tlet origin = window.location.origin.includes(\"localhost\") ? \"http://localhost:8080\" : window.location.origin;\r\n\r\n\t\t\t// sending message, disable send button\r\n\t\t\tthis.setState({successMessage: \"Sending...\", errMessage: null, disabled: true});\r\n\r\n\t\t\tAjax.post(`${origin}/mail`, null, message)\r\n\t\t\t\t.then(xhr => {  \r\n                    // ajax resolved (could be bad/good request, but server responded)\r\n                    if(xhr.status === 200){\r\n\t\t\t\t\t\t// good request - attempt to parse results json\r\n\t\t\t\t\t\tthis.setState({successMessage:\"Submit Successful\", errMessage: null, disabled: false});\r\n                    }\r\n                    else{\r\n\t\t\t\t\t\t// bad request\r\n\t\t\t\t\t\tthis.setState({errMessage:\"Bad Request Error\", successMessage: null, disabled: false});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\t// clear inputs\r\n\t\t\t\t\tif(this.headerRef.current){\r\n\t\t\t\t\t\tthis.headerRef.current.value = \"\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.textRef.current.value = \"\";\r\n                })\r\n                .catch(err => {\r\n                    // ajax request died (really bad NOT a 400 error!)\r\n\t\t\t\t\tthis.setState({errMessage:\"Cannot reach server\", disabled: false});// request died signal\r\n                });\r\n\t\t}\r\n\t}\r\n\t\r\n\t//Build the JSON array that is sent over the Ajax request\r\n\tBuildArray(){\r\n\t\t//get the text in the the message textarea\r\n\t\tlet text = this.textRef.current.value;\r\n\t\t//\r\n        let type = \"\";\r\n\r\n        if(this.state.other){\r\n        \ttype = this.headerRef.current.value;\r\n        }else{\r\n        \ttype = this.type;\r\n        }\r\n\r\n        // MUST match API expectations! \r\n        return {type,text};\r\n    }\r\n\r\n\t// on change of radio button set type\r\n\tonTypeSelect(type){\r\n\t\t//get the type of the radio button selected\r\n\t \tthis.type = type;\r\n\r\n\t\t// check to see if other is selected\r\n\t\tthis.setState({other: this.type === \"other\"});\r\n\r\n\t \tthis.typeError = false;\r\n\t }\r\n\r\n\t //Check if other is selcted and load elements based on that\r\n \t TypeOther(){\r\n\t \tif(!this.state.other){\r\n\t\t\t // remove element of screen\r\n\t \t\treturn null;\r\n\t \t}else{\r\n\t\t\t //load element onto screen\r\n\t \t\treturn(\r\n\t \t\t\t<div>\r\n\t \t\t\t\t<label>Other: </label> <input type=\"text\" placeholder=\"Input for other\" ref={this.headerRef} required/>\r\n\t \t\t\t</div>\r\n\t \t\t);\r\n\t \t}\r\n\t }\r\n\t \r\n\trender(){\r\n\t\treturn this.props.showModal ? (\r\n\t\t\t<div>\r\n\t\t\t\t<ReactModal isOpen={this.props.showModal} >\r\n\t\t\t\t\t<div className=\"col-lg-1\">\r\n\t\t\t  \t\t\t<span className=\"nav-link\" onClick={this.props.closeModal}>&times;</span>\r\n\t\t\t  \t\t</div>\r\n\t\t\t  \t\t<div className=\"container border\">\r\n\t\t\t\t\t  <form onSubmit={this.submitClick.bind(this)}>\r\n\t\t\t\t\t  \t\t<div>\r\n\t\t\t\t\t\t\t\t<div className=\"header center\">\r\n\t\t\t\t\t\t\t\t\t<h2 className=\"modalHeader\">Contact Us</h2>\r\n\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t<span className=\"error\">\r\n\t\t\t\t\t\t\t\t\t\t{this.state.errMessage}\r\n\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t\t<span className=\"success\">\r\n\t\t\t\t\t\t\t\t\t\t{this.state.successMessage}\r\n\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div className=\"form-group center\">\r\n\t\t\t\t\t\t\t\t\t<input type=\"radio\" onChange={() => this.onTypeSelect(\"Bug Report\")} name=\"types\" value=\"problem\" required/>Have a problem?\r\n\t\t\t\t\t\t\t\t\t&nbsp;\r\n\t\t\t\t\t\t\t\t\t<input type=\"radio\" onChange={() => this.onTypeSelect(\"Feature Request\")} name=\"types\" value=\"idea\" required/>Have an idea?\r\n\t\t\t\t\t\t\t\t\t&nbsp;\r\n\t\t\t\t\t\t\t\t\t<input type=\"radio\" onChange={() => this.onTypeSelect(\"other\")} name=\"types\" value=\"other\" required/>Other\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div className=\"form-group center\">\r\n\t\t\t\t\t\t\t\t\t{this.TypeOther()}\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div className=\"form-group center\">\r\n\t\t\t\t\t\t\t\t\t<textarea className=\"modal-text-area\" placeholder=\"Type message in here.\" ref={this.textRef} required></textarea>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div className=\"form-group center\">\r\n\t\t\t\t\t\t\t\t\t<input className=\"input-btn\" type=\"submit\" disabled={this.state.disabled} />\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</form>\r\n\t\t\t\t\t</div>\r\n      \t\t\t</ReactModal>\r\n\t\t\t</div>\r\n\t\t) : null;\r\n\t}\r\n}","import React from \"react\";\r\nimport { Dropdown, DropdownToggle, DropdownMenu, DropdownItem, Navbar as RNavbar, NavItem, Collapse, NavbarToggler, Nav, NavLink } from \"reactstrap\";\r\nimport { MailModal } from \"./MailModal\"\r\nimport Simulator from \"../Simulator\";\r\n\r\nexport class Navbar extends React.Component{\r\n\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\r\n\t    this.state = {\r\n\t\t\tshowNav: false,\t\t\t// navbar collapse\r\n\t\t\tshowModal: false,\t\t// mail modal visibility\r\n\t\t\tshowAdvanced: false\t\t// advanced dropdown menu visibility\r\n\t    };\r\n\r\n\t}\r\n\r\n\t// close the mail modal\r\n\tcloseModal(){\r\n\t\tthis.setState({showModal: false});\r\n\t}\r\n\r\n\t// show the mail modal\r\n\topenModal(){\r\n\t\tthis.setState({showModal: true});\r\n\t}\r\n\r\n\t// toggles the navbar collapse state\r\n\ttoggleNavbar(){\r\n\t\tthis.setState(prev => ({showNav: !prev.showNav}));\r\n\t}\r\n\r\n\t// toggle advanced dropdown\r\n\ttoggleDropdown(){\r\n\t\tthis.setState(prev => ({showAdvanced: !prev.showAdvanced}));\r\n\t}\r\n\r\n\t// advanced dropdown error correction option toggle\r\n\ttoggleErrorCorrection(){\r\n\t\tSimulator.isErrCorrecting = !Simulator.isErrCorrecting;\r\n\t}\r\n\r\n\trender(){\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<RNavbar color=\"light\" light expand=\"md\">\r\n\t\t\t\t\t<NavbarToggler color=\"dark\" onClick={this.toggleNavbar.bind(this)}/>\r\n\t\t\t\t\t<Collapse isOpen={this.state.showNav} navbar>\r\n\t\t\t\t\t\t<Nav navbar>\r\n\t\t\t\t\t\t\t<NavItem>\r\n\t\t\t\t\t\t\t\t<NavLink selected onClick={this.openModal.bind(this)}>Contact Us</NavLink>\r\n\t\t\t\t\t\t\t</NavItem>\r\n\t\t\t\t\t\t\t<NavItem>\r\n\t\t\t\t\t\t\t\t<Dropdown isOpen={this.state.showAdvanced} toggle={this.toggleDropdown.bind(this)}>\r\n\t\t\t\t\t\t\t\t\t\t<DropdownToggle caret color=\"light\">\r\n\t\t\t\t\t\t\t\t\t\t\tAdvanced\r\n\t\t\t\t\t\t\t\t\t\t</DropdownToggle>\r\n\t\t\t\t\t\t\t\t\t\t<DropdownMenu>\r\n\t\t\t\t\t\t\t\t\t\t\t<DropdownItem onClick={this.toggleErrorCorrection.bind(this)}>\r\n\t\t\t\t\t\t\t\t\t\t\t\tToggle Error Correction (Currently {Simulator.isErrCorrecting ? \"Enabled\" : \"Disabled\"})\r\n\t\t\t\t\t\t\t\t\t\t\t</DropdownItem>\r\n\t\t\t\t\t\t\t\t\t\t</DropdownMenu>\r\n\t\t\t\t\t\t\t\t\t</Dropdown>\r\n\t\t\t\t\t\t\t</NavItem>\r\n\t\t\t\t\t\t</Nav>\r\n\t\t\t\t\t</Collapse>\r\n\t\t\t\t</RNavbar>\r\n\t\t\t\t<MailModal showModal={this.state.showModal} closeModal={this.closeModal.bind(this)} />\r\n\t      \t</div>\r\n\t\t);\r\n\t}\r\n}","import React from \"react\";\r\nimport Simulator from \"../Simulator\";\r\n\r\nexport class Chart extends React.Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\tdata: null,\t\t// simulatoion data set\r\n\t\t\tday: 0\t\t\t// current simulation day\r\n\t\t};\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\t// simulator singles data set loaded\r\n\t\tSimulator.on(\"data\", this.onSimulatorData.bind(this));\r\n\r\n\t\t// simulator signals a reset\r\n\t\tSimulator.on(\"reset\", this.onSimulatorReset.bind(this));\r\n\r\n\t\t// simulator signals a different day\r\n\t\tSimulator.on(\"update\", this.onSimulatorUpdate.bind(this));\r\n\t}\r\n\r\n\t// simulator got data - store it\r\n\tonSimulatorData(){\r\n\t\tthis.setState({data: Simulator.data});\r\n\t}\r\n\r\n\t// simulator reset - reset this component\r\n\tonSimulatorReset(){\r\n\t\tthis.setState({data: null, day: 0});\r\n\t}\r\n\r\n\t// simulator day changed - update component day\r\n\tonSimulatorUpdate(){\r\n\t\tthis.setState({day: Simulator.currentDay});\r\n\t}\r\n\r\n\t// renders table rows up to the current simulation day\r\n\trenderRows(){\r\n\t\tif(Simulator.hasData){\r\n\t\t\tlet rows = new Array(Simulator.currentDay + 1);\r\n\r\n\t\t\tfor(let i = 0; i <= Simulator.currentDay; i++){\r\n\t\t\t\t// get json for the say\r\n\t\t\t\tlet day = Simulator.data[i];\r\n\r\n\t\t\t\t// extract data\r\n\t\t\t\tlet susceptible = Math.round(day.Susceptible),\r\n\t\t\t\t\tinfected = Math.round(day.Infected),\r\n\t\t\t\t\timmune = Math.round(day.Immune),\r\n\t\t\t\t\tdead = Math.round(day.Dead),\r\n\t\t\t\t\tpopulation = Math.round(day.TotalPopulation);\r\n\r\n\t\t\t\t// first invalid day?\r\n\t\t\t\tlet style = null, tooltip = null;\r\n\r\n\t\t\t\tif(Simulator.firstInvalidDay > -1){\r\n\t\t\t\t\tif(i === Simulator.firstInvalidDay){\r\n\t\t\t\t\t\t// this row is first invalid day\r\n\t\t\t\t\t\tstyle = {\r\n\t\t\t\t\t\t\tborderLeft: \"5px solid red\",\r\n\t\t\t\t\t\t\tborderRight: \"5px solid red\"\r\n\t\t\t\t\t\t};\r\n\t\r\n\t\t\t\t\t\ttooltip = `Data correction begins at day ${i}.`;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if(i > Simulator.firstInvalidDay){\r\n\t\t\t\t\t\t// subsequent invalid days\r\n\t\t\t\t\t\tstyle = {\r\n\t\t\t\t\t\t\tborderLeft: \"1px solid red\",\r\n\t\t\t\t\t\t\tborderRight: \"1px solid red\"\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// create table row\r\n\t\t\t\t// (toLocalString adds the ',' as the number grows in thousands)\r\n\t\t\t\trows[i] = (\r\n\t\t\t\t\t<tr key={i} style={style} title={tooltip}>\r\n\t\t\t\t\t\t<td onClick={()=>Simulator.setGraphDay(i)}>{i}</td>\r\n\t\t\t\t\t\t<td>{susceptible.toLocaleString()}</td>\r\n\t\t\t\t\t\t<td>{infected.toLocaleString()}</td>\r\n\t\t\t\t\t\t<td>{immune.toLocaleString()}</td>\r\n\t\t\t\t\t\t<td>{dead.toLocaleString()}</td>\r\n\t\t\t\t\t\t<td>{population.toLocaleString()}</td>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\treturn rows;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n\r\n\trender(){\r\n\t\treturn this.state.data !== null ? (\r\n\t\t\t<div>\r\n\t\t\t\t<table className=\"table table-striped overflow-table\">\r\n\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t<th>Day</th>\r\n\t\t\t\t\t\t\t<th>Susceptible</th>\r\n\t\t\t\t\t\t\t<th>Infected</th>\r\n\t\t\t\t\t\t\t<th>Immune</th>\r\n\t\t\t\t\t\t\t<th>Dead</th>\r\n\t\t\t\t\t\t\t<th>Total Population</th>\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t</thead>\r\n\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t{this.renderRows()}\r\n\t\t\t\t\t</tbody>\r\n\t\t\t\t</table>\r\n\t\t\t\t<div className=\"text-center\">\r\n\t\t\t\t\t{Simulator.firstInvalidDay > -1 ? `* Error correction begins on day ${Simulator.firstInvalidDay} *` : null}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t) : null;\r\n\t}\r\n}","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Simulator from \"../Simulator\";\r\nimport { LineChart } from \"react-easy-chart\"\r\n\r\n// graph size constants\r\nconst WIDTH = \t\t540,\r\n\tHEIGHT = \t\t475,\r\n\tMARGIN_TOP = \t10,\r\n\tMARGIN_BOTTOM =\t50,\r\n\tMARGIN_LEFT = \t80,\r\n\tMARGIN_RIGHT = \t10;\r\n\r\n// graph line colors\r\nconst COLORS = {\r\n\t\"Infected\": \t\"green\",\r\n\t\"Susceptible\": \t\"red\",\r\n\t\"Immune\": \t\t\"steelblue\",\r\n\t\"Dead\": \t\t\"gray\"\r\n};\r\n\r\nexport class Graph extends React.Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\r\n\t\tthis.graphContainerRef = React.createRef();\r\n\t\t\r\n\t    this.state = {\r\n\t\t\tdata: null,\t\t\t\t\t\t\t// graph data\r\n\t\t\tday: 0,\t\t\t\t\t\t\t\t// current simulation day\r\n\t\t\tyLabel: \"Infected\",\t\t\t\t\t// y-axis value\r\n\t\t\ttooltip: null,\t\t\t\t\t\t// text to display\r\n\t\t\tcontainerWidth: WIDTH\t\t\t\t// line graph parent width\r\n\t    };\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\t// when the simulator signals it has received data\r\n\t\tSimulator.on(\"data\", this.onSimulatorData.bind(this));\r\n\r\n\t\t// when the simulator signals a reset\r\n\t\tSimulator.on(\"reset\", this.onSimulatorReset.bind(this));\r\n\r\n\t\t// when the simulator changes the day\r\n\t\tSimulator.on(\"update\", this.onSimulatorUpdate.bind(this));\r\n\r\n\t\t// when the simulator changes the graph\r\n\t\tSimulator.on(\"update-graph\", this.onSimulatorUpdateGraph.bind(this));\r\n\r\n\t\t// when the window size changes - resize the graph if neccessary\r\n\t\twindow.addEventListener(\"resize\", this.onResize.bind(this));\r\n\t\tthis.onResize();\r\n\t}\r\n\r\n\tcomponentDidUpdate(prevProps, prevState){\r\n\t\tif(prevState.yLabel !== this.state.yLabel){\r\n\t\t\tthis.setState({tooltip: null});\r\n\t\t}\r\n\t}\r\n\r\n\t// simulator has data - convert to d3 format and store it\r\n\tonSimulatorData(){\r\n\t\t// update\r\n\t\tthis.setState({data: Simulator.data});\r\n\t}\r\n\r\n\t// simulator reset - reset this component\r\n\tonSimulatorReset(){\r\n\t\tthis.setState({data: null, day: 0});\r\n\t}\r\n\r\n\t// simulator update - update to the current day\r\n\tonSimulatorUpdate(){\r\n\t\tthis.setState({day: Simulator.currentDay});\r\n\t}\r\n\r\n\t// simulator update - graph change\r\n\tonSimulatorUpdateGraph(evt){\r\n\t\t// day change\r\n\t\tif(typeof evt.day === \"number\"){\r\n\t\t\tthis.setState({day: evt.day});\r\n\t\t}\r\n\t}\r\n\r\n\t// when the graph y axis drop down is changed\r\n\tonYLabelChange(evt){\r\n\t\tthis.setState({yLabel: evt.target.value})\r\n\t}\r\n\r\n\t// gets the data values (multiple lines) up to do the current\r\n\tgetDataForAllLabels(){\r\n\t\tlet values = [];\t\t// holds the correctly formatted values\r\n\t\tlet valuesObj = {};\t\t// helps to sort by label ('Infected', 'Susceptible', etc)\r\n\r\n\t\t// iterate over each day...\r\n\t\tfor(let i = 0; i <= this.state.day; i++){\r\n\t\t\t// day json, example: {'Infected': 100, 'Susceptible': 5, etc}\r\n\t\t\tlet row = this.state.data[i]; \r\n\r\n\t\t\t// for each label... (row[label] is the y value for the y label (ex: how many infected))\r\n\t\t\tfor(let label in row){\r\n\t\t\t\tif(label === \"TotalPopulation\") continue;\r\n\r\n\t\t\t\tlet y = parseFloat(row[label]);\r\n\r\n\t\t\t\tlet pt = {x: i, y};\r\n\r\n\t\t\t\tif(label in valuesObj){\r\n\t\t\t\t\tvaluesObj[label].push(pt);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tvaluesObj[label] = [pt];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// labels IN ORDER\r\n\t\tlet labels = [];\r\n\r\n\t\t// convert the dictionary into the correctly formatted array\r\n\t\tfor(let key in valuesObj){\r\n\t\t\tvalues.push(valuesObj[key]);\r\n\t\t\tlabels.push(key);\r\n\t\t}\r\n\r\n\t\t// allData is used by render method to determine multiline\r\n\t\treturn {values, labels, largestY: this.state.data[0].TotalPopulation};\r\n\t}\r\n\r\n\t// gets the data values up to the current day (single line)\r\n\tgetData(){\r\n\t\t// make sure there is data\r\n\t\tif(!this.state.data || this.state.day < 1){\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\t// All = multiline, this function is for one line\r\n\t\tif(this.state.yLabel === \"All\"){\r\n\t\t\treturn this.getDataForAllLabels();\r\n\t\t}\r\n\r\n\t\tlet largestY = 0;\r\n\r\n\t\tlet values = [];\r\n\r\n\t\t// iterate... find largest Y and populate values with {x, y} format\r\n\t\tfor(let i = 0; i <= this.state.day; i++){\r\n\t\t\tlet y = parseFloat(this.state.data[i][this.state.yLabel]);\r\n\r\n\t\t\tlargestY = Math.max(largestY, y);\r\n\r\n\t\t\tvalues.push({x: i, y});\r\n\t\t}\r\n\r\n\t\treturn {values: [values], label: this.state.yLabel, largestY};\r\n\t}\r\n\r\n\t// when a point on the graph is clicked...\r\n\tonGraphClick(data, evt){\r\n\t\tif(this.state.yLabel !== \"All\"){\r\n\t\t\tlet {x, y} = data;\r\n\r\n\t\t\tthis.setState({tooltip: `${Math.round(y)} people ${this.state.yLabel.toLowerCase()} on day ${x}.`});\r\n\t\t}\r\n\t}\r\n\r\n    onResize(){\r\n        // updates the state to reflect the maximum size allowed for the graph\r\n        let element = this.graphContainerRef.current;\r\n\t\tif(element){\r\n\t\t\tthis.setState({containerWidth: element.getBoundingClientRect().width});\r\n\t\t}\r\n    }\r\n\r\n\t// renders a simple HTML key for the graph line/colors\r\n\trenderGraphKey(){\r\n\t\tlet keys = [];\r\n\r\n\t\tfor(let label in COLORS){\r\n\t\t\tkeys.push(\r\n\t\t\t\t<span style={{color: COLORS[label]}}>\r\n\t\t\t\t\t{` ${label} `}\r\n\t\t\t\t</span>\r\n\t\t\t)\r\n\t\t}\r\n\r\n\t\treturn <div>{keys}</div>\r\n\t}\r\n\r\n\trender(){\r\n\t\tlet data = this.getData();\r\n\t\tif(data){\r\n\t\t\tlet numDays = data.values[0].length - 1; // day zero = initial params\r\n\r\n\t\t\tlet width = Math.min(this.state.containerWidth, WIDTH);\r\n\r\n\t\t\treturn (\r\n\t\t\t\t<div ref={this.graphContainerRef}>\r\n\t\t\t\t\t<h5>Simulated {this.state.yLabel}</h5>\r\n\t\t\t\t\t<div className=\"GraphDropdown\" onChange={this.onYLabelChange.bind(this)}>\r\n\t\t\t\t\t\t<select className=\"form-control\">\r\n\t\t\t\t\t\t\t<option>Infected</option>\r\n\t\t\t\t\t\t\t<option>Susceptible</option>\r\n\t\t\t\t\t\t\t<option>Immune</option>\r\n\t\t\t\t\t\t\t<option>Dead</option>\r\n\t\t\t\t\t\t\t<option>All</option>\r\n\t\t\t\t\t\t</select>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<LineChart\r\n\t\t\t\t\t\t\tdata={data.values}\r\n\t\t\t\t\t\t\twidth={width}\r\n\t\t\t\t\t\t\theight={HEIGHT}\r\n\t\t\t\t\t\t\tmargin={{\r\n\t\t\t\t\t\t\t\ttop: MARGIN_TOP, bottom: MARGIN_BOTTOM,\r\n\t\t\t\t\t\t\t\tleft: MARGIN_LEFT, right: MARGIN_RIGHT\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\taxes\r\n\t\t\t\t\t\t\taxisLabels={{x: \"Days Elapsed\", y: (this.state.yLabel === \"All\" ? \"People\" : `People ${this.state.yLabel}`)}}\r\n\t\t\t\t\t\t\tdataPoints={numDays < 50 && this.state.yLabel !== \"All\"}\r\n\t\t\t\t\t\t\txDomainRange={[0, numDays]}\r\n\t\t\t\t\t\t\tyDomainRange={[0, data.largestY]}\r\n\t\t\t\t\t\t\tlineColors={data.values.length !== 1 ? data.labels.map(label => COLORS[label]) : [COLORS[data.label]]}\r\n\t\t\t\t\t\t\tclickHandler={this.onGraphClick.bind(this)}\r\n\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\".label\": {fill: \"black\"},\r\n\t\t\t\t\t\t\t\t\".axis\": {fontSize: \"0.75em\", fontFamily: \"arial\"}\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t{this.renderGraphKey()}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"text-center\">\r\n\t\t\t\t\t\t{this.state.tooltip}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t\treturn <div ref={this.graphContainerRef}></div> // required for resize to work! \r\n\t}\r\n}","import \"../lib/bootstrap.min.css\";\r\nimport \"./App.css\";\r\nimport React from \"react\";\r\nimport { Inputs } from \"./Inputs\";\r\nimport { Navbar } from \"./Navbar\";\r\nimport { Chart } from \"./Chart\";\r\nimport { Graph } from \"./Graph\";\r\n\r\nexport class App extends React.Component{\r\n    render(){\r\n        return (\r\n            <div>\r\n                <Navbar/>\r\n                <br/>\r\n                <span className=\"Version\">V0.2</span>\r\n                <main className=\"container card card-body bg-light\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-lg-6\">\r\n                            <Inputs/>\r\n                        </div>\r\n                        <div className=\"col-lg-6 graph\">\r\n                            <Graph/>\r\n                        </div>\r\n                    </div>\r\n                    <br/>\r\n                    <div>\r\n                        <Chart/>\r\n                    </div>\r\n                </main>\r\n                <footer className=\"container text-center\">\r\n                    <hr/>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-lg-6\">\r\n                            Juall | Rosenblum | Pojero | Erry \r\n                        </div>\r\n                        <div className=\"col-lg-6\">\r\n                            <a href=\"https://opensource.org/licenses/MIT\" target=\"_blank\">MIT License</a>\r\n                        </div>\r\n                    </div>\r\n                </footer>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { App } from \"./components/App\";\r\n\r\nReactDOM.render(<App/>, document.querySelector(\"#root\"));"],"sourceRoot":""}