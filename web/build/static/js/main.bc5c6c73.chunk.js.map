{"version":3,"sources":["Ajax.js","EventEmitter.js","Simulator.js","ParamStorage.js","GraphData.js","components/NumSlider.jsx","components/ExportsModal.jsx","preset.js","components/Inputs.jsx","components/MailModal.jsx","components/Navbar.jsx","components/Table.jsx","components/GraphRange.jsx","components/TrendLine.jsx","components/Graph.jsx","components/App.jsx","index.js"],"names":["Ajax","Object","classCallCheck","this","createClass","key","value","options","arguments","length","undefined","Promise","resolve","reject","method","url","window","location","origin","headers","query","data","xhr","XMLHttpRequest","h","onload","onerror","err","queryString","open","setRequestHeader","send","JSON","stringify","request","dict","qs","param","concat","substring","EventEmitter","_listeners","event","willTrigger","type","forEach","listener","eventType","push","listeners","i","splice","src_Simulator","Simulator","_this","possibleConstructorReturn","getPrototypeOf","call","_firstInvalidDay","_useErrCorrecting","_this2","href","includes","Access-Control-Allow-Origin","Error-Correction","isErrCorrecting","get","then","status","parse","response","parseInt","getResponseHeader","emit","Event","Error","catch","_this3","filename","Content-Type","csvDataBlob","Blob","a","document","createElement","URL","createObjectURL","setAttribute","Date","now","click","revokeObjectURL","console","log","message","src_ParamStorage","ParamStorage","_numParamSets","_lastParamSet","_currDay","sessionStorage","clear","params","convertToTitleCase","paramsNotLastSave","setItem","numParamSets","removeItem","infectionLength","transmissionRate","virulence","initialPopulation","immunePercent","initialInfected","simulationLength","preset","saveParamsInputsDict","infection_length","transmission_rate","initial_population","immune_percent","initial_infected","simulation_length","newParams","paramId","json","getItem","firstStoredDay","getSavedParams","src_GraphData","GraphData","_startDay","_endDay","Number","MAX_SAFE_INTEGER","_trendLineY","extractTrendLine","URLSearchParams","search","trendLineY","parseFloat","keysDict","simData","labeledPoints","largestY","start","startDay","end","endDay","day","label","y","pt","x","Math","max","Array","fill","map","val","index","values","keys","labels","filter","min","NumSlider","_React$Component","props","numRef","React","createRef","rangeRef","inherits","current","init","evt","target","react_default","className","showRange","minText","maxText","ref","onChange","onNumber","bind","step","placeholder","required","disabled","onSlide","set","n","Component","ExportsModal","exportUrlRef","csvFilenameElement","state","exportOption","exportDropdown","copyMessage","pending","setState","downloadCSVFile","getInputsDictionary","toggle","prev","elem","select","execCommand","reactstrap_es","innerRef","element","maxLength","color","onClick","downloadCSV","defaultValue","getExportURL","readOnly","copyLinkText","_this4","isOpen","toggleModal","toggleExportDropdown","caret","renderExportOptBody","presets","Seasonal Flu","Infection Length","Transmission","Virulence","Smallpox","Polio","Measles","Ebola","H1N1 Flu","H5N1 Flu","1918 Flu","INPUT_RANGES","Inputs","intialImmunityRef","transmissionRef","virulenceRef","initialInfectedRef","intialPopRef","infectionLengthRef","daysRef","presetRef","isDisabled","exportModalOpen","on","onSimulatorLoad","onSimulatorError","extractQueryStringParams","useTestValues","healthy","reset","hasData","currParams","runSimulation","load","preventDefault","direction","stepBackwards","stepForwards","currentParams","onPresetChange","id","switchParamSet","onSubmit","NumSlider_NumSlider","onReset","toggleExportModal","ExportsModal_ExportsModal","MailModal","textRef","errorRef","headerRef","typeError","errorTime","errorMsg","other","errMessage","successMessage","prevProps","showModal","e","goodHeader","BuildArray","post","text","lib_default","closeModal","submitClick","onTypeSelect","name","TypeOther","Navbar","showNav","showAdvanced","light","expand","toggleNavbar","navbar","selected","openModal","toggleDropdown","toggleErrorCorrection","MailModal_MailModal","Table","visible","style","firstInvalidDay","borderLeft","borderRight","rows","dayData","susceptible","round","Susceptible","infected","Infected","immune","Immune","dead","Dead","population","TotalPopulation","getStyleForDay","toLocaleString","renderRows","GraphRange","lowerRef","upperRef","lowValue","low","high","selectedMax","highValue","selectedMin","onChangeLow","onChangeHigh","TrendLine","WIDTH","COLORS","Graph","graphContainerRef","tooltip","containerWidth","graphLabels","toggleLabel","forceUpdate","addEventListener","onResize","prevState","yLabel","nextLabels","assign","getBoundingClientRect","width","borders","borderBottom","container","svgElement","querySelector","canvas","ctx","getContext","getAttribute","height","svgXml","XMLSerializer","serializeToString","blob","svgUrl","svgImage","imageSmoothingEnabled","imageSmoothingQuality","drawImage","globalCompositeOperation","fillStyle","fillRect","jpg","toDataURL","getData","dayCount","join","renderLabelButtons","react_easy_chart_lib","margin","top","bottom","left","right","axes","axisLabels","dataPoints","xDomainRange","yDomainRange","lineColors","clickHandler","onGraphClick",".label",".axis","fontSize","fontFamily","TrendLine_TrendLine","GraphRange_GraphRange","App","apply","Navbar_Navbar","lg","Inputs_Inputs","Graph_Graph","Table_Table","ReactDOM","render","App_App"],"mappings":"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","file":"static/js/main.bc5c6c73.chunk.js","sourcesContent":["export class Ajax{\r\n    // sends an async http request \r\n    static request(options={}){\r\n        return new Promise((resolve, reject) => {\r\n            // extract config from options object\r\n            let method = (typeof options.method === \"string\") ? options.method : \"GET\",\r\n                url = (typeof options.url === \"string\") ? options.url : window.location.origin,\r\n                headers = (typeof options.headers === \"object\" && options.headers) ? options.headers : {},\r\n                query = (typeof options.query === \"object\" && options.query) ? options.query : {},\r\n                data = (typeof options.data !== \"undefined\") ? options.data : null;\r\n\r\n            // create the request\r\n            let xhr = new XMLHttpRequest();\r\n\r\n            // attach listeners\r\n            xhr.onload = () => resolve(xhr);\r\n            xhr.onerror = err => reject(err);\r\n\r\n            // apply query string\r\n            if(query){\r\n                url += Ajax.queryString(query);\r\n            }\r\n\r\n            // open the request\r\n            xhr.open(method, url);\r\n\r\n            // apply http headers\r\n            for(let h in headers){\r\n                xhr.setRequestHeader(h, headers[h]);\r\n            }\r\n\r\n            // send the request\r\n            // send JSON if the data is not a string\r\n            if(data){\r\n                if(typeof data !== \"string\"){\r\n                    xhr.send(JSON.stringify(data));\r\n                }\r\n                else xhr.send(data);\r\n            }\r\n            else xhr.send();\r\n        });\r\n    }\r\n\r\n    // async http get request\r\n    static get(url, headers, query){\r\n        return Ajax.request({method: \"GET\", url, headers, query});\r\n    }\r\n\r\n    // async http post request\r\n    static post(url, headers, data){\r\n        return Ajax.request({method: \"POST\", url, headers, data});\r\n    }\r\n\r\n    // creates a query string from an object\r\n    static queryString(dict){\r\n        let qs = \"?\";\r\n\r\n        for(let param in dict){\r\n            qs += `${param}=${dict[param]}&`;\r\n        }\r\n\r\n        return qs.substring(0, qs.length - 1);\r\n    }\r\n}","// simple event emitter class\r\nexport class EventEmitter{\r\n    constructor(){\r\n        this._listeners = {};   // 'private' dictionary of {eventType: listenerFunction}\r\n    }\r\n\r\n    // triggers all listening functions\r\n    emit(event){\r\n        if(this.willTrigger(event.type)){\r\n            this._listeners[event.type].forEach(listener => listener(event));\r\n        }\r\n    }\r\n\r\n    // adds a listener\r\n    on(eventType, listener){\r\n        if(this.willTrigger(eventType)){\r\n            this._listeners[eventType].push(listener);\r\n        }\r\n        else{\r\n            this._listeners[eventType] = [listener];\r\n        }\r\n    }\r\n\r\n    // removes a listener\r\n    off(eventType, listener){\r\n        if(this.willTrigger(eventType)){\r\n            let listeners = this._listeners[eventType];\r\n\r\n            for(let i = 0; i < listeners.length; i++){\r\n                if(listeners[i] === listener){\r\n                    listeners.splice(i, 1);\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // checks if there are any listeners for a given type\r\n    willTrigger(eventType){\r\n        return eventType in this._listeners;\r\n    }\r\n}","import { Ajax } from \"./Ajax\";\r\nimport { EventEmitter } from \"./EventEmitter\";\r\n\r\n// singleton for holding simulation data\r\n// event-driven to keep chart + graph updated\r\nclass Simulator extends EventEmitter{\r\n    constructor(){\r\n        super();\r\n\r\n        this.data = null;                   // simulation data array\r\n        this._firstInvalidDay = -1;         // first invalid day (-1 = no invalid days)\r\n        this._useErrCorrecting = true;      // use error correction?\r\n    }\r\n\r\n    // hits the API for data, signals progress\r\n    // query should be a dictionary of the inputs, will be converted into a query string\r\n    load(query){\r\n        return new Promise((resolve, reject) => {\r\n            // figure out endpoint\r\n            let url = window.location.href.includes(\"localhost\") ? \"http://localhost:8080/plague\" : `${window.location.origin}/plague`;\r\n            \r\n            // CORS headers (use foreign domain)\r\n            let headers = {\r\n                \"Access-Control-Allow-Origin\": window.location.origin,\r\n                \"Error-Correction\": this.isErrCorrecting\r\n            };\r\n\r\n            // ajax call with query string\r\n            // (null headers)\r\n            Ajax.get(url, headers, query)\r\n                .then(xhr => {    \r\n                    // ajax resolved (could be bad/good request, but server responded)\r\n                    if(xhr.status === 200){\r\n                        // good request - attempt to parse results json\r\n                        try{\r\n                            // parse json\r\n                            this.data = JSON.parse(xhr.response);\r\n\r\n                            // extract first invalid day\r\n                            this._firstInvalidDay = parseInt(xhr.getResponseHeader(\"First-Invalid-Day\")) || -1;\r\n                        }\r\n                        catch(err){\r\n                            // json parse error (should never happen)\r\n                            reject(err);\r\n                            this.emit(new Event(\"error\"));  // server responded with bad request signal\r\n                        }\r\n\r\n                        // done, resolve promise and emit load + data\r\n                        resolve();\r\n                        this.emit(new Event(\"load\"));   // server responded with good request signal\r\n\r\n                        this.emit(new Event(\"data\"));   // parsed data signal\r\n                    }\r\n                    else{\r\n                        // bad request\r\n                        reject(new Error(xhr.response || \"Bad request\"));\r\n                        this.emit(new Event(\"error\"));  // server responded with bad request signal\r\n                    }\r\n                })\r\n                .catch(err => {\r\n                    // ajax request died (really bad NOT a 400 error!)\r\n                    reject(err);\r\n                    this.emit(new Event(\"error\"));  // request died signal\r\n                });\r\n        });\r\n    }\r\n\r\n    // asychronously downloads a csv file using ajax\r\n    downloadCSVFile(query, filename=null){\r\n        return new Promise((resolve, reject) => {\r\n            // figure out endpoint origin\r\n            let origin = window.location.origin.includes(\"localhost\") ? \"http://localhost:8080\" : window.location.origin;\r\n\r\n            // figure out endpoint using origin\r\n            let url = `${origin}/plague`;\r\n\r\n            // http request headers\r\n            let headers = {\r\n                \"Access-Control-Allow-Origin\": window.location.origin,\r\n                \"Content-Type\": \"text/csv\",\r\n                \"Error-Correction\": this.isErrCorrecting\r\n            };\r\n\r\n            // make sure .csv\r\n            if(filename && filename.substring(filename.length - 4, filename.length) !== \".csv\"){\r\n                filename += \".csv\";\r\n            }\r\n\r\n            // get csv file via Ajax\r\n            Ajax.get(url, headers, query)\r\n                .then(xhr => {\r\n                    // server responded\r\n                    if(xhr.status === 200){\r\n                        // good http status - download\r\n                        // xhr.response = csv text\r\n                        // convert to blob\r\n                        let csvDataBlob = new Blob([xhr.response], {type: \"octet/stream\"});\r\n\r\n                        // create a 'secret' link using the blob\r\n                        let a = document.createElement(\"a\");\r\n                        let url = window.URL.createObjectURL(csvDataBlob);\r\n                        \r\n                        // setup the link to download blob data\r\n                        a.setAttribute(\"download\", filename || `data_${Date.now()}.csv`);\r\n                        a.setAttribute(\"href\", url);\r\n\r\n                        // click the link to download the file\r\n                        a.click();\r\n                        window.URL.revokeObjectURL(url);\r\n\r\n                        // trigger any listeners\r\n                        resolve(\"File downloaded.\");\r\n                    }\r\n                    else{\r\n                        // bad http status - trigger listeners with error\r\n                        console.log(xhr.response);\r\n                        reject(new Error(\"Error downloading CSV file.\"));\r\n                    }\r\n                })\r\n                .catch(err => {\r\n                    // server did not responed - trigger listeners with error\r\n                    console.log(err.message);\r\n                    reject(new Error(\"Unable to download CSV file.\"))\r\n                });\r\n        });\r\n    }\r\n\r\n    // resets simulation to day 0 and clears all stored data\r\n    // (triggers listeners)\r\n    reset(){\r\n        this.data = null;\r\n        this.emit(new Event(\"reset\"));\r\n    }\r\n\r\n    set isErrCorrecting(value){\r\n        if(typeof value === \"boolean\"){\r\n            this._useErrCorrecting = value;\r\n        }\r\n        else throw new Error(\"isErrCorrecting must be set to a boolean value.\");\r\n    }\r\n\r\n    get hasData(){\r\n        return this.data !== null;\r\n    }\r\n\r\n    get firstInvalidDay(){\r\n        return this._firstInvalidDay;\r\n    }\r\n\r\n    get isErrCorrecting(){\r\n        return this._useErrCorrecting;\r\n    }\r\n}\r\n\r\n// singleton\r\nexport default new Simulator();","// class for managing parameter data history using session storage\r\nconst PARAM_STORAGE_LIMIT = 100;\r\n\r\nclass ParamStorage{\r\n    constructor(){\r\n        this._numParamSets = 0;\r\n        this._lastParamSet = null;\r\n        this._currDay = 0;\r\n\r\n        window.sessionStorage.clear();\r\n    }\r\n    \r\n    // saves parameters to session storage - expects query string format (as provided by inputs.jsx)\r\n    saveParamsInputsDict(dict){\r\n        let params = this.convertToTitleCase(dict);\r\n\r\n        // prevent saving multiple set same time in a row\r\n        if(this.paramsNotLastSave(params)){\r\n            window.sessionStorage.setItem(++this._numParamSets, JSON.stringify(params))\r\n            this._currDay = this.numParamSets;\r\n            this._lastParamSet = params;\r\n\r\n            // enforce storage capacity - begin deleting from the left bound\r\n            if(this.numParamSets > PARAM_STORAGE_LIMIT){\r\n                window.sessionStorage.removeItem(this.numParamSets - PARAM_STORAGE_LIMIT);\r\n            }\r\n\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // saves parameters to session storage\r\n    saveParams(infectionLength, transmissionRate, virulence, initialPopulation, immunePercent, initialInfected, simulationLength, preset){\r\n        return this.saveParamsInputsDict({\r\n            infection_length:   infectionLength,\r\n            transmission_rate:  transmissionRate,\r\n            virulence,\r\n            initial_population: initialPopulation,\r\n            immune_percent:     immunePercent,\r\n            initial_infected:   initialInfected,\r\n            simulation_length:  simulationLength,\r\n            preset\r\n        });\r\n    }\r\n\r\n    // converts underscore format dict to title case (ex: initial_population to InitialPopulation)\r\n    convertToTitleCase(dict){\r\n        return {\r\n            infectionLength:    dict.infection_length,\r\n            transmissionRate:   dict.transmission_rate,\r\n            virulence:          dict.virulence,\r\n            initialPopulation:  dict.initial_population,\r\n            immunePercent:      dict.immune_percent,\r\n            initialInfected:    dict.initial_infected,\r\n            simulationLength:   dict.simulation_length,\r\n            preset:             dict.preset\r\n        };\r\n    }\r\n\r\n    // checks if 'newParams' is content different from the last save param set\r\n    paramsNotLastSave(newParams){\r\n        if(!this._lastParamSet) return true;\r\n\r\n        for(let param in this._lastParamSet){\r\n            if(this._lastParamSet[param] !== newParams[param]){\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // gets saved parameters\r\n    getSavedParams(paramId){\r\n        let json = window.sessionStorage.getItem(paramId) || null;\r\n        return json ? JSON.parse(json) : null;\r\n    }\r\n\r\n    // moves current day one into the backwards\r\n    stepBackwards(){\r\n        if(this._currDay - 1 >= this.firstStoredDay){\r\n            --this._currDay;\r\n            //this._lastParamSet = this.getSavedParams(--this._currDay);\r\n        }\r\n    }\r\n\r\n    // move sthe current day one day forwards\r\n    stepForwards(){\r\n        if(this._currDay + 1 <= this.numParamSets){\r\n            ++this._currDay;\r\n            //this._lastParamSet = this.getSavedParams(++this._currDay);\r\n        }\r\n    }\r\n\r\n    get firstStoredDay(){\r\n        if(this.numParamSets > PARAM_STORAGE_LIMIT){\r\n            return this.numParamSets - PARAM_STORAGE_LIMIT;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    get currentParams(){\r\n        return this.getSavedParams(this._currDay);\r\n    }\r\n\r\n    get currentDay(){\r\n        return this._currDay;\r\n    }\r\n\r\n    get numParamSets(){\r\n        return this._numParamSets;\r\n    }\r\n}\r\n\r\nexport default new ParamStorage();","import Simulator from \"./Simulator\";\r\nimport { EventEmitter } from './EventEmitter';\r\n\r\nclass GraphData extends EventEmitter{\r\n    constructor(){\r\n        super();\r\n\r\n        this._startDay = -1;\r\n        this._endDay = Number.MAX_SAFE_INTEGER;\r\n        this._trendLineY = 0;\r\n\r\n        this.extractTrendLine();\r\n    }\r\n\r\n    // extracts trend line from query strings\r\n    extractTrendLine(){\r\n        // query strings\r\n        let qs = new URLSearchParams(window.location.search);\r\n        \r\n        // get trend line as float (default 0)\r\n\t\tlet trendLineY = parseFloat(qs.get(\"trend_line\")) || 0;\r\n        this._trendLineY = trendLineY;\r\n    }\r\n\r\n    getData(keysDict){\r\n        let simData = Simulator.data;   // simulation data array\r\n        let labeledPoints = {};         // stores the points array in a dictionary (key=label)\r\n        let largestY = 0;               // largest y in data set\r\n\r\n        if(simData){\r\n            // start & end indeces \r\n            let start = this.startDay > -1 ? this.startDay : 0;\r\n            let end = this.endDay < simData.length ? this.endDay : (simData.length - 1);\r\n\r\n            for(let i = start; i <= end; i++){\r\n                let day = simData[i];\r\n\r\n                // label is 'Infected', 'Susceptible', etc (whatever is provided)\r\n                for(let label in keysDict){\r\n                    if(keysDict[label] !== true){\r\n                        continue;\r\n                    }\r\n\r\n                    // get y value (x is always the day/index)\r\n                    let y = parseFloat(day[label]);\r\n\r\n                    // create x, y point\r\n                    let pt = {x: i, y};\r\n\r\n                    // store the point to its associated label\r\n                    if(label in labeledPoints){\r\n                        labeledPoints[label].push(pt);\r\n                    }\r\n                    else{\r\n                        labeledPoints[label] = [pt];\r\n                    }\r\n\r\n                    // update largest Y\r\n                    largestY = Math.max(largestY, y);\r\n                }\r\n            }\r\n\r\n            // optional trend line points\r\n            if(this.trendLineY > 0){\r\n                // creates an array of [{x, y},...] where x is the day and y is the trend line Y\r\n                labeledPoints[\"TrendLine\"] = new Array(end - start).fill(null).map((val, index) => ({x: index + start, y: this.trendLineY}));\r\n            }\r\n        }\r\n\r\n        // convert sorted dictionary into an array\r\n        let values = [];\r\n        Object.keys(labeledPoints).forEach(key => values.push(labeledPoints[key]));\r\n\r\n        // gets all the labels that are in the dictionary and true (in order)\r\n        let labels = Object.keys(keysDict).filter(key => keysDict[key] === true);\r\n\r\n        return {values, largestY, labels};\r\n    }\r\n\r\n    // sets the start/end days\r\n    // (better to use this than setting start & end days individually due to 1 update)\r\n    setDaysRange(start, end){\r\n        this._startDay = start;\r\n        this._endDay = end;\r\n        this.emit(new Event(\"update\"));\r\n    }\r\n\r\n    set startDay(value){\r\n        this._startDay = value;\r\n        this.emit(new Event(\"update\"));\r\n    }\r\n\r\n    set endDay(value){\r\n        this._endDay = value;\r\n        this.emit(new Event(\"update\"));\r\n    }\r\n\r\n    set trendLineY(value){\r\n        this._trendLineY = value;\r\n        this.emit(new Event(\"update\"));\r\n    }\r\n\r\n    get startDay(){\r\n        return Math.max(0, this._startDay);\r\n    }\r\n\r\n    get endDay(){\r\n        return Math.min(this._endDay, Simulator.data ? Simulator.data.length : 0);\r\n    }\r\n\r\n    get trendLineY(){\r\n        return this._trendLineY;\r\n    }\r\n}\r\n\r\nexport default new GraphData();","import \"./NumSlider.css\";\r\nimport React from \"react\";\r\n\r\nexport class NumSlider extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.numRef = React.createRef();\r\n        this.rangeRef = React.createRef();\r\n    }\r\n\r\n    // mounted - set the default numbers\r\n    componentDidMount(){\r\n        this.numRef.current.value = this.props.init || this.props.min;\r\n        this.rangeRef.current.value = this.props.init || this.props.min;\r\n    }\r\n\r\n    // on text field input\r\n    onNumber(evt){\r\n        // set the range value to the number value\r\n        let val = parseFloat(evt.target.value);\r\n    \r\n        if(val){\r\n            // enforce min/max constraints\r\n            val = Math.min(Math.max(val, this.props.min), this.props.max); \r\n\r\n            // update inputs\r\n            this.numRef.current.value = val;\r\n            this.rangeRef.current.value = val;\r\n        }\r\n        else{\r\n            // empty input - range at min and number will be empty\r\n            this.rangeRef.current.value = this.props.min;\r\n        }\r\n    }\r\n\r\n    // on range bar move\r\n    onSlide(evt){\r\n        // set the text value to the number value\r\n        let val = evt.target.value;\r\n\r\n        // enforce min/max constraints \r\n        val = Math.min(Math.max(val, this.props.min), this.props.max);\r\n\r\n        // update number input\r\n        this.numRef.current.value = val;\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"num-slider-container\">\r\n                <div>\r\n                    <label>{this.props.label}</label>\r\n                    {this.props.showRange ? (` ${this.minText}-${this.maxText}`) : null}\r\n                </div>\r\n                <div>\r\n                    <input \r\n                        ref={this.numRef}\r\n                        onChange={this.onNumber.bind(this)}\r\n                        type=\"number\"\r\n                        min={this.props.min}\r\n                        max={this.props.max}\r\n                        step={this.props.step}\r\n                        placeholder={this.props.placeholder}\r\n                        required={this.props.required}\r\n                        disabled={this.props.disabled}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <input\r\n                        ref={this.rangeRef}\r\n                        onChange={this.onSlide.bind(this)}\r\n                        type=\"range\"\r\n                        min={this.props.min}\r\n                        max={this.props.max}\r\n                        step={this.props.step}\r\n                        disabled={this.props.disabled}\r\n                        className=\"num-slider-slider\"\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    set value(n){\r\n        // must be in range\r\n        n = Math.max(this.props.min, n);\r\n        n = Math.min(n, this.props.max);\r\n\r\n        // update elements \r\n        this.numRef.current.value = n;\r\n        this.rangeRef.current.value = n;\r\n    }\r\n\r\n    get minText(){\r\n        return this.props.minText ? this.props.minText : this.props.min;\r\n    }\r\n\r\n    get maxText(){\r\n        return this.props.maxText ? this.props.maxText : this.props.max;\r\n    }\r\n\r\n    get value(){\r\n        return this.numRef.current.value;\r\n    }\r\n}","import \"./ExportsModal.css\";\r\nimport React from \"react\";\r\nimport { Modal, ModalBody, ModalHeader, Dropdown, DropdownItem, DropdownMenu, DropdownToggle, Button, Input } from \"reactstrap\";\r\nimport Simulator from \"../Simulator\";\r\nimport GraphData from \"../GraphData\";\r\n\r\nexport class ExportsModal extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        // export refs\r\n        this.exportUrlRef = React.createRef();\r\n        this.csvFilenameElement = null;         // later to set an <input> (reactstrap inner ref)\r\n\r\n        this.state = {\r\n            exportOption: null,\r\n            exportDropdown: false,\r\n            copyMessage: null\r\n        };\r\n    }\r\n    \r\n    // downloads the csv file\r\n    downloadCSV(){\r\n        if(!this.state.pending){\r\n            // disable buttons\r\n            this.setState({pending: true});\r\n\r\n            // optional filename override\r\n            let filename = this.csvFilenameElement ? this.csvFilenameElement.value : null;\r\n\r\n            Simulator.downloadCSVFile(this.props.getInputsDictionary(), filename)\r\n                .catch(err => {\r\n                    // something went wrong (server did not respond or bad request)\r\n                    this.setState({message: err.message});\r\n                })\r\n                .then(() => {\r\n                    // (this fires when any response happens not successful only!)\r\n                    // always enable buttons\r\n                    this.setState({pending: false})\r\n                });\r\n        }\r\n    }\r\n\r\n    toggleModal(){\r\n        this.setState({exportOption: null, copyMessage: null});\r\n        this.props.toggle();\r\n    }\r\n\r\n    toggleExportDropdown(){\r\n        this.setState(prev => ({exportDropdown: !prev.exportDropdown}));\r\n    }\r\n\r\n    getExportURL(){\r\n        let dict = this.props.getInputsDictionary();\r\n\r\n        let url = `${window.location.origin}?`;\r\n\r\n        for(let param in dict){\r\n            url += `${param}=${dict[param]}&`;\r\n        }\r\n\r\n        url += `trend_line=${GraphData.trendLineY}`;\r\n\r\n        return url;\r\n    }\r\n\r\n    copyLinkText(){\r\n        let elem = this.exportUrlRef.current;\r\n        if(elem){\r\n            elem.select();\r\n            document.execCommand(\"copy\");\r\n\r\n            this.setState({copyMessage: \"(Copied to clipboard)\"});\r\n        }\r\n    }\r\n\r\n    renderExportOptBody(){\r\n        if(this.state.exportOption === \"csv\"){\r\n            return (\r\n                <div>\r\n                    <div>\r\n                        Exports a comma separated value (.csv) file containing the results displayed in the table.\r\n                        This file is easily accesible in Excel. \r\n                    </div>\r\n                    <br/>\r\n                    <div>\r\n                        <Input\r\n                            innerRef={element => this.csvFilenameElement = element}\r\n                            placeholder=\"Optional filename (.csv automatically appended)\"\r\n                            type=\"text\"\r\n                            maxLength={25}\r\n                        />        \r\n                    </div>\r\n                    <br/>\r\n                    <div>\r\n                        <Button color=\"fade\" onClick={this.downloadCSV.bind(this)}>Download CSV</Button>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        else if(this.state.exportOption === \"sim-link\"){\r\n            return (\r\n                <div>\r\n                    <div>\r\n                        Exports a URL for this application with preset values that can be shared.\r\n                    </div>\r\n                    <br/>\r\n                    <div>\r\n                        <textarea ref={this.exportUrlRef} className=\"modal-url-text\" defaultValue={this.getExportURL()} readOnly>\r\n                        </textarea>\r\n                    </div>\r\n                    <br/>\r\n                    <div>\r\n                        <Button color=\"fade\" onClick={this.copyLinkText.bind(this)}>Copy Link</Button>\r\n                        <span className=\"copy-text-container\">\r\n                            {this.state.copyMessage}\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        return (\r\n            <div>\r\n                Please select an export option.\r\n            </div>\r\n        )\r\n    }\r\n    \r\n    render(){\r\n        return (\r\n            <Modal isOpen={this.props.isOpen}>\r\n                <ModalHeader toggle={this.toggleModal.bind(this)}>\r\n                    <Dropdown isOpen={this.state.exportDropdown} toggle={this.toggleExportDropdown.bind(this)}>\r\n                        <DropdownToggle color=\"fade\" caret>\r\n                            Export Options\r\n                        </DropdownToggle>\r\n                        <DropdownMenu>\r\n                            <DropdownItem onClick={() => this.setState({exportOption: \"csv\"})}>\r\n                                Table CSV\r\n                            </DropdownItem>\r\n                            <DropdownItem onClick={() => this.setState({exportOption: \"sim-link\"})}>\r\n                                Simulation Link\r\n                            </DropdownItem>\r\n                        </DropdownMenu>\r\n                    </Dropdown>\r\n                </ModalHeader>\r\n                <ModalBody>\r\n                    <div>\r\n                        {this.renderExportOptBody()}\r\n                    </div>\r\n                </ModalBody>\r\n            </Modal>\r\n        );\r\n    }\r\n}","export const presets ={\r\n    //presets in the inputs go here\r\n    //seasonal flu\r\n   \"Seasonal Flu\":{\r\n       \"Infection Length\": 8,\r\n       \"Transmission\": 1.2,\r\n       \"Virulence\": 0.01\r\n   },\r\n   //smallpox\r\n   \"Smallpox\":{\r\n    \"Infection Length\": 14,\r\n    \"Transmission\": 2.5,\r\n    \"Virulence\": 0.25 \r\n   },\r\n   //polio\r\n   \"Polio\":{\r\n    \"Infection Length\": 18,\r\n    \"Transmission\": 1,\r\n    \"Virulence\": 0.01 \r\n   },\r\n   //measles\r\n   \"Measles\":{\r\n    \"Infection Length\": 8,\r\n    \"Transmission\": 10,\r\n    \"Virulence\": 0.01 \r\n   },\r\n   //Ebola\r\n   \"Ebola\":{\r\n    \"Infection Length\": 13,\r\n    \"Transmission\": 1.5,\r\n    \"Virulence\": 0.75 \r\n   },\r\n    //H1N1 Flu\r\n    \"H1N1 Flu\":{\r\n    \"Infection Length\": 8,\r\n    \"Transmission\": 1.6,\r\n    \"Virulence\": 0.01 \r\n    },\r\n    //H5N1 Flu\r\n   \"H5N1 Flu\":{\r\n    \"Infection Length\": 8,\r\n    \"Transmission\": 0.1,\r\n    \"Virulence\": 0.6 \r\n   },\r\n    //1918 Flu\r\n    \"1918 Flu\":{\r\n    \"Infection Length\": 8,\r\n    \"Transmission\": 2,\r\n    \"Virulence\": 0.03 \r\n    }\r\n}\r\nexport default presets;\r\n","import React from \"react\";\r\nimport { Row, Col, Form, FormGroup, Button, Input } from \"reactstrap\";\r\nimport Simulator from \"../Simulator\";\r\nimport ParamStorage from \"../ParamStorage\";\r\nimport GraphData from \"../GraphData\";\r\nimport { NumSlider } from \"./NumSlider\";\r\nimport { ExportsModal } from \"./ExportsModal\";\r\nimport preset from \"../preset\"\r\n\r\n// input range constraints (min, max, step)\r\nexport const INPUT_RANGES = {\r\n    INFECTION_LENGTH:   [1, 365, 1],\r\n    TRANSMISSION_RATE:  [0, 20, 0.01],\r\n    VIRULENCE:          [0, 1, 0.001],\r\n    INITIAL_POPULATION: [1, 1000000, 1],\r\n    IMMUNE_PERCENT:     [0, 1, 0.01],\r\n    INITIAL_INFECTED:   [0, 1000000, 1],\r\n    SIMULATION_LENGTH:  [1, 365, 1]\r\n};\r\n\r\nexport class Inputs extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        // input refs\r\n        this.intialImmunityRef = React.createRef();\r\n        this.transmissionRef = React.createRef();\r\n        this.virulenceRef = React.createRef();\r\n        this.initialInfectedRef = React.createRef();\r\n        this.intialPopRef = React.createRef();\r\n        this.infectionLengthRef = React.createRef();\r\n        this.daysRef = React.createRef();\r\n        this.presetRef = React.createRef();\r\n\r\n        this.state = {\r\n            pending: false,             // no new requests while pending (disable buttons)\r\n            message: null,              // message to display (errors)\r\n            isDisabled: false,          // to disable/enable fields depending on what preset is selected\r\n            exportModalOpen: false      // export options modal visibility\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        Simulator.on(\"load\", this.onSimulatorLoad.bind(this));\r\n        Simulator.on(\"error\", this.onSimulatorError.bind(this));\r\n\r\n        // query string params?\r\n        this.extractQueryStringParams();\r\n\r\n        // test values?\r\n        if(new URLSearchParams(window.location.search).get(\"test\") === \"true\"){\r\n            this.useTestValues();\r\n        }\r\n    }\r\n    \r\n    // extracts optional query string parameters from the query string\r\n    extractQueryStringParams(){\r\n        // get query string data\r\n        let qs = new URLSearchParams(window.location.search);\r\n\r\n        // extract values from query string - set to the number value or default to min\r\n        // (setting value to below min will result in min)\r\n        this.initialInfectedRef.current.value = parseInt(qs.get(\"initial_infected\")) || -1;\r\n        this.intialImmunityRef.current.value =  parseFloat(qs.get(\"immune_percent\")) || -1;\r\n        this.intialPopRef.current.value =       parseInt(qs.get(\"initial_population\")) || -1;\r\n        this.virulenceRef.current.value =       parseFloat(qs.get(\"virulence\")) || -1;\r\n        this.daysRef.current.value =            parseInt(qs.get(\"simulation_length\")) || -1;\r\n        this.infectionLengthRef.current.value = parseInt(qs.get(\"infection_length\")) || -1;\r\n        this.transmissionRef.current.value =    parseFloat(qs.get(\"transmission_rate\")) || -1;\r\n    }\r\n\r\n    // changes the input parameters to predefined test values\r\n    useTestValues(){\r\n        // set values\r\n        this.initialInfectedRef.current.value = 500;\r\n        this.intialImmunityRef.current.value = 0.10;\r\n        this.intialPopRef.current.value = 1000000;\r\n        this.virulenceRef.current.value = 0.25;\r\n        this.daysRef.current.value = 365;\r\n        this.infectionLengthRef.current.value = 100;\r\n        this.transmissionRef.current.value = 0.2;\r\n\r\n        // force save\r\n        ParamStorage.saveParamsInputsDict(this.getInputsDictionary());\r\n    }\r\n\r\n    // creates a dictionary of all the inputs and their values (names formatted for the API call) \r\n    getInputsDictionary(){\r\n        // extract data from inputs to use in query string \r\n        let immune_percent =        this.intialImmunityRef.current.value,\r\n            transmission_rate =     this.transmissionRef.current.value,\r\n            virulence =             this.virulenceRef.current.value,\r\n            initial_infected =      this.initialInfectedRef.current.value,\r\n            initial_population =    this.intialPopRef.current.value,\r\n            infection_length =      this.infectionLengthRef.current.value,\r\n            simulation_length =     this.daysRef.current.value,\r\n            preset =                this.presetRef.current.value;\r\n\r\n        // make sure infected <= population\r\n        initial_infected = Math.min(initial_infected, initial_population);\r\n\r\n        // make sure immune percent is <= healthy population\r\n        let healthy = (initial_population - initial_infected) / initial_population;\r\n        immune_percent = Math.min(immune_percent, healthy);\r\n\r\n        // MUST match API expectations! \r\n        return {immune_percent, transmission_rate, virulence, initial_infected, initial_population, infection_length, simulation_length, preset};\r\n    }\r\n\r\n    onSimulatorError(){\r\n        this.setState({pending: false});    // enable buttons\r\n    }\r\n\r\n    onSimulatorLoad(){\r\n        this.setState({pending: false});    // enable buttons\r\n    }\r\n\r\n    // called when then the reset button is clicked\r\n    onReset(){\r\n        // cleared stored simulation data\r\n        Simulator.reset();\r\n    }\r\n\r\n    runSimulation(){\r\n        // no simulation data - load it (first simulation or reset happened)\r\n        if(!Simulator.hasData){\r\n            // disable buttons for loading time\r\n            this.setState({pending: true});\r\n\r\n            // load data then auto run\r\n            Simulator.load(this.getInputsDictionary())\r\n                .then(() => {\r\n                    this.setState({message: null}); // remove possible err message\r\n\r\n                    ParamStorage.saveParamsInputsDict(this.getInputsDictionary());  // save parameters\r\n                })\r\n                .catch(err => this.setState({message: err.message}));\r\n        }\r\n        else{\r\n            // verify current parameters are not the same as the ones already run\r\n            // (prevents reloading data that we already have!)\r\n            let currParams = ParamStorage.convertToTitleCase(this.getInputsDictionary());\r\n\r\n            if(ParamStorage.paramsNotLastSave(currParams)){\r\n                // parameters are different than last time\r\n                // run new simulation\r\n                Simulator.reset();      // triggers clearing graph/table and clears data\r\n                this.runSimulation();   // runs again, but sim will have no data\r\n            }\r\n        }\r\n    }\r\n\r\n    // called when the form is 'submitted'\r\n    // entire purpose is to block the sending of the form\r\n    // (submit enforces 'required', 'min', 'max' constraints)\r\n    onSubmit(evt){\r\n        // no default submission (using ajax instead)\r\n        evt.preventDefault();\r\n\r\n        this.runSimulation();\r\n    }\r\n\r\n    onPresetChange(){\r\n        let value = this.presetRef.current.value;\r\n        \r\n        if(value !== \"Custom\"){\r\n            this.setState({isDisabled: true});\r\n            this.infectionLengthRef.current.value = preset[value][\"Infection Length\"];\r\n            this.transmissionRef.current.value = preset[value][\"Transmission\"];\r\n            this.virulenceRef.current.value = preset[value][\"Virulence\"]\r\n        }else{\r\n            this.setState({isDisabled: false});\r\n        }\r\n    }\r\n\r\n    toggleExportModal(){\r\n        this.setState(prev => ({exportModalOpen: !prev.exportModalOpen}));\r\n    }\r\n\r\n    // moves the parameter storage day & updates UI inputs\r\n    switchParamSet(direction){\r\n        // move the day\r\n        if(direction === \"backwards\"){\r\n            ParamStorage.stepBackwards();\r\n        }\r\n        else if(direction === \"forwards\"){\r\n            ParamStorage.stepForwards();\r\n        }\r\n        else throw new Error(\"Parameter switch direction must be 'forwards' or 'backwards'.\");\r\n\r\n        // bail if nothing already saved\r\n        let params = ParamStorage.currentParams || null;\r\n        if(!params) return; // nothing saved\r\n\r\n        // fill out UI form\r\n        this.infectionLengthRef.current.value = params.infectionLength;\r\n        this.transmissionRef.current.value = params.transmissionRate;\r\n        this.virulenceRef.current.value = params.virulence;\r\n        this.intialPopRef.current.value = params.initialPopulation;\r\n        this.intialImmunityRef.current.value = params.immunePercent;\r\n        this.initialInfectedRef.current.value = params.initialInfected;\r\n        this.daysRef.current.value = params.simulationLength;\r\n\r\n        this.presetRef.current.value = params.preset;\r\n        this.onPresetChange();\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <div id=\"inputs-header-container\" className=\"text-center\">\r\n                    <button onClick={() => this.switchParamSet(\"backwards\")}>&larr;</button>\r\n                    <h5 className=\"text-center\">Experimental Variables</h5>\r\n                    <button onClick={() => this.switchParamSet(\"forwards\")}>&rarr;</button>\r\n                </div>\r\n                <br/>\r\n                <form onSubmit={this.onSubmit.bind(this)}>\r\n                    <div className=\"row\">\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <NumSlider\r\n                                label={\"Length of Infection (Days)\"}\r\n                                showRange={true}\r\n                                min={INPUT_RANGES.INFECTION_LENGTH[0]}\r\n                                max={INPUT_RANGES.INFECTION_LENGTH[1]}\r\n                                step={INPUT_RANGES.INFECTION_LENGTH[2]}\r\n                                required={true}\r\n                                ref={this.infectionLengthRef}\r\n                                disabled={this.state.isDisabled}\r\n                            />\r\n                        </div>\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <NumSlider\r\n                                label={\"Transmission Rate\"}\r\n                                showRange={true}\r\n                                min={INPUT_RANGES.TRANSMISSION_RATE[0]}\r\n                                max={INPUT_RANGES.TRANSMISSION_RATE[1]}\r\n                                step={INPUT_RANGES.TRANSMISSION_RATE[2]}\r\n                                required={true}\r\n                                ref={this.transmissionRef}\r\n                                disabled={this.state.isDisabled}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <NumSlider\r\n                                label={\"Virulence\"}\r\n                                showRange={true}\r\n                                min={INPUT_RANGES.VIRULENCE[0]}\r\n                                max={INPUT_RANGES.VIRULENCE[1]}\r\n                                step={INPUT_RANGES.VIRULENCE[2]}\r\n                                required={true}\r\n                                ref={this.virulenceRef}\r\n                                disabled={this.state.isDisabled}\r\n                            />\r\n                        </div>\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <NumSlider\r\n                                label={\"Initial Population\"}\r\n                                showRange={true}\r\n                                min={INPUT_RANGES.INITIAL_POPULATION[0]}\r\n                                max={INPUT_RANGES.INITIAL_POPULATION[1]}\r\n                                step={INPUT_RANGES.INITIAL_POPULATION[2]}\r\n                                required={true}\r\n                                ref={this.intialPopRef}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <NumSlider\r\n                                label={\"Initial Immunity Percent\"}\r\n                                showRange={true}\r\n                                min={INPUT_RANGES.IMMUNE_PERCENT[0]}\r\n                                max={INPUT_RANGES.IMMUNE_PERCENT[1]}\r\n                                step={INPUT_RANGES.IMMUNE_PERCENT[2]}\r\n                                required={true}\r\n                                ref={this.intialImmunityRef}\r\n                            />\r\n                        </div>\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <NumSlider\r\n                                label={\"Initial Infected\"}\r\n                                showRange={true}\r\n                                min={INPUT_RANGES.INITIAL_INFECTED[0]}\r\n                                max={INPUT_RANGES.INITIAL_INFECTED[1]}\r\n                                step={INPUT_RANGES.INITIAL_INFECTED[2]}\r\n                                maxText={\"Population\"}\r\n                                required={true}\r\n                                ref={this.initialInfectedRef}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <NumSlider\r\n                                label={\"Simulation Length (Days)\"}\r\n                                showRange={true}\r\n                                min={INPUT_RANGES.SIMULATION_LENGTH[0]}\r\n                                max={INPUT_RANGES.SIMULATION_LENGTH[1]}\r\n                                step={INPUT_RANGES.SIMULATION_LENGTH[2]}\r\n                                required={true}\r\n                                ref={this.daysRef}\r\n                            />\r\n                        </div>\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <label>Presets:</label>\r\n                            <select ref={this.presetRef} className=\"form-control\" onChange={this.onPresetChange.bind(this)}>\r\n                                <option>Custom</option>\r\n                                <option>Seasonal Flu</option>\r\n                                <option>Smallpox</option>\r\n                                <option>Polio</option>\r\n                                <option>Measles</option>\r\n                                <option>Ebola</option>\r\n                                <option>H1N1 Flu</option>\r\n                                <option>H5N1 Flu</option>\r\n                                <option>1918 Flu</option>\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group text-center\">\r\n                        <button className=\"input-btn\" disabled={this.state.pending}>Run</button>&nbsp;\r\n                        <button onClick={this.onReset.bind(this)} className=\"input-btn\" disabled={this.state.pending} type=\"button\" >Reset</button>&nbsp;\r\n                        <button onClick={this.toggleExportModal.bind(this)} className=\"input-btn\" disabled={this.state.pending} type=\"button\" >Exports</button>\r\n                    </div>\r\n                </form>\r\n                <div>{this.state.message}</div>\r\n                <ExportsModal\r\n                    isOpen={this.state.exportModalOpen}\r\n                    toggle={this.toggleExportModal.bind(this)}\r\n                    getInputsDictionary={this.getInputsDictionary.bind(this)}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport ReactModal from \"react-modal\"\r\nimport { Ajax } from \"../Ajax\";\r\n\r\nexport class MailModal extends React.Component{\r\n\r\n\tconstructor(props){\r\n        super(props);\r\n\r\n        // input refs\r\n        this.textRef = React.createRef();\r\n        this.errorRef = React.createRef();\r\n        this.headerRef = React.createRef();\r\n\r\n        this.type = null;\r\n        this.typeError = true;\r\n        this.errorTime = false;\r\n        this.errorMsg = \"\";\r\n\r\n        this.state = { \r\n\t\t\tother: false,\r\n\t\t\terrMessage:null,\r\n\t\t\tsuccessMessage:null,\r\n\t\t\tdisabled: false\r\n        };\r\n\r\n        //Modal.setAppElement(this.props.app);\r\n\t}\r\n\r\n\tcomponentDidUpdate(prevProps){\r\n\t\t// clear messages when the visibility changes\r\n\t\tif(prevProps.showModal && !this.props.showModal){\r\n\t\t\tthis.setState({errMessage: null, successMessage: null});\r\n\t\t}\r\n\t}\r\n\r\n\t// on click of submit button \r\n\tsubmitClick(e){\r\n\t\tthis.setState({errMessage:null});\r\n\t\te.preventDefault();\r\n\t\tlet goodHeader = this.headerRef.current ? (this.headerRef.current.value.length > 0) : true;\r\n\t\tif(this.type != null && this.textRef.current.value != \"\" && goodHeader){\r\n\t\t\tlet message = this.BuildArray();\r\n\r\n\t\t\t// localhost = dev, else = prod\r\n\t\t\tlet origin = window.location.origin.includes(\"localhost\") ? \"http://localhost:8080\" : window.location.origin;\r\n\r\n\t\t\t// sending message, disable send button\r\n\t\t\tthis.setState({successMessage: \"Sending...\", errMessage: null, disabled: true});\r\n\r\n\t\t\tAjax.post(`${origin}/mail`, null, message)\r\n\t\t\t\t.then(xhr => {  \r\n                    // ajax resolved (could be bad/good request, but server responded)\r\n                    if(xhr.status === 200){\r\n\t\t\t\t\t\t// good request - attempt to parse results json\r\n\t\t\t\t\t\tthis.setState({successMessage:\"Submit Successful\", errMessage: null, disabled: false});\r\n                    }\r\n                    else{\r\n\t\t\t\t\t\t// bad request\r\n\t\t\t\t\t\tthis.setState({errMessage:\"Bad Request Error\", successMessage: null, disabled: false});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\t// clear inputs\r\n\t\t\t\t\tif(this.headerRef.current){\r\n\t\t\t\t\t\tthis.headerRef.current.value = \"\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.textRef.current.value = \"\";\r\n                })\r\n                .catch(err => {\r\n                    // ajax request died (really bad NOT a 400 error!)\r\n\t\t\t\t\tthis.setState({errMessage:\"Cannot reach server\", disabled: false});// request died signal\r\n                });\r\n\t\t}\r\n\t}\r\n\t\r\n\t//Build the JSON array that is sent over the Ajax request\r\n\tBuildArray(){\r\n\t\t//get the text in the the message textarea\r\n\t\tlet text = this.textRef.current.value;\r\n\t\t//\r\n        let type = \"\";\r\n\r\n        if(this.state.other){\r\n        \ttype = this.headerRef.current.value;\r\n        }else{\r\n        \ttype = this.type;\r\n        }\r\n\r\n        // MUST match API expectations! \r\n        return {type,text};\r\n    }\r\n\r\n\t// on change of radio button set type\r\n\tonTypeSelect(type){\r\n\t\t//get the type of the radio button selected\r\n\t \tthis.type = type;\r\n\r\n\t\t// check to see if other is selected\r\n\t\tthis.setState({other: this.type === \"other\"});\r\n\r\n\t \tthis.typeError = false;\r\n\t }\r\n\r\n\t //Check if other is selcted and load elements based on that\r\n \t TypeOther(){\r\n\t \tif(!this.state.other){\r\n\t\t\t // remove element of screen\r\n\t \t\treturn null;\r\n\t \t}else{\r\n\t\t\t //load element onto screen\r\n\t \t\treturn(\r\n\t \t\t\t<div>\r\n\t \t\t\t\t<label>Other: </label> <input type=\"text\" placeholder=\"Input for other\" ref={this.headerRef} required/>\r\n\t \t\t\t</div>\r\n\t \t\t);\r\n\t \t}\r\n\t }\r\n\t \r\n\trender(){\r\n\t\treturn this.props.showModal ? (\r\n\t\t\t<div>\r\n\t\t\t\t<ReactModal isOpen={this.props.showModal} >\r\n\t\t\t\t\t<div className=\"col-lg-1\">\r\n\t\t\t  \t\t\t<span className=\"pointer\" onClick={this.props.closeModal}>&times;</span>\r\n\t\t\t  \t\t</div>\r\n\t\t\t  \t\t<div className=\"container border\">\r\n\t\t\t\t\t  <form onSubmit={this.submitClick.bind(this)}>\r\n\t\t\t\t\t  \t\t<div>\r\n\t\t\t\t\t\t\t\t<div className=\"header center\">\r\n\t\t\t\t\t\t\t\t\t<h2 className=\"modalHeader\">Contact Us</h2>\r\n\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t<span className=\"error\">\r\n\t\t\t\t\t\t\t\t\t\t{this.state.errMessage}\r\n\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t\t<span className=\"success\">\r\n\t\t\t\t\t\t\t\t\t\t{this.state.successMessage}\r\n\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div className=\"form-group center\">\r\n\t\t\t\t\t\t\t\t\t<input type=\"radio\" onChange={() => this.onTypeSelect(\"Bug Report\")} name=\"types\" value=\"problem\" required/>Have a problem?\r\n\t\t\t\t\t\t\t\t\t&nbsp;\r\n\t\t\t\t\t\t\t\t\t<input type=\"radio\" onChange={() => this.onTypeSelect(\"Feature Request\")} name=\"types\" value=\"idea\" required/>Have an idea?\r\n\t\t\t\t\t\t\t\t\t&nbsp;\r\n\t\t\t\t\t\t\t\t\t<input type=\"radio\" onChange={() => this.onTypeSelect(\"other\")} name=\"types\" value=\"other\" required/>Other\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div className=\"form-group center\">\r\n\t\t\t\t\t\t\t\t\t{this.TypeOther()}\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div className=\"form-group center\">\r\n\t\t\t\t\t\t\t\t\t<textarea className=\"modal-text-area\" placeholder=\"Type message in here.\" ref={this.textRef} required></textarea>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div className=\"form-group center\">\r\n\t\t\t\t\t\t\t\t\t<input className=\"input-btn\" type=\"submit\" disabled={this.state.disabled} />\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</form>\r\n\t\t\t\t\t</div>\r\n      \t\t\t</ReactModal>\r\n\t\t\t</div>\r\n\t\t) : null;\r\n\t}\r\n}","import React from \"react\";\r\nimport { Dropdown, DropdownToggle, DropdownMenu, DropdownItem, Navbar as RNavbar, NavItem, Collapse, NavbarToggler, Nav, NavLink } from \"reactstrap\";\r\nimport { MailModal } from \"./MailModal\"\r\nimport Simulator from \"../Simulator\";\r\n\r\nexport class Navbar extends React.Component{\r\n\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\r\n\t    this.state = {\r\n\t\t\tshowNav: false,\t\t\t// navbar collapse\r\n\t\t\tshowModal: false,\t\t// mail modal visibility\r\n\t\t\tshowAdvanced: false\t\t// advanced dropdown menu visibility\r\n\t    };\r\n\r\n\t}\r\n\r\n\t// close the mail modal\r\n\tcloseModal(){\r\n\t\tthis.setState({showModal: false});\r\n\t}\r\n\r\n\t// show the mail modal\r\n\topenModal(){\r\n\t\tthis.setState({showModal: true});\r\n\t}\r\n\r\n\t// toggles the navbar collapse state\r\n\ttoggleNavbar(){\r\n\t\tthis.setState(prev => ({showNav: !prev.showNav}));\r\n\t}\r\n\r\n\t// toggle advanced dropdown\r\n\ttoggleDropdown(){\r\n\t\tthis.setState(prev => ({showAdvanced: !prev.showAdvanced}));\r\n\t}\r\n\r\n\t// advanced dropdown error correction option toggle\r\n\ttoggleErrorCorrection(){\r\n\t\tSimulator.isErrCorrecting = !Simulator.isErrCorrecting;\r\n\t}\r\n\r\n\trender(){\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<RNavbar color=\"light\" light expand=\"md\">\r\n\t\t\t\t\t<NavbarToggler color=\"dark\" onClick={this.toggleNavbar.bind(this)}/>\r\n\t\t\t\t\t<Collapse isOpen={this.state.showNav} navbar>\r\n\t\t\t\t\t\t<Nav navbar>\r\n\t\t\t\t\t\t\t<NavItem>\r\n\t\t\t\t\t\t\t\t<NavLink  className=\"pointer\" selected onClick={this.openModal.bind(this)}>Contact Us</NavLink>\r\n\t\t\t\t\t\t\t</NavItem>\r\n\t\t\t\t\t\t\t<NavItem>\r\n\t\t\t\t\t\t\t\t<Dropdown isOpen={this.state.showAdvanced} toggle={this.toggleDropdown.bind(this)}>\r\n\t\t\t\t\t\t\t\t\t\t<DropdownToggle caret color=\"light\">\r\n\t\t\t\t\t\t\t\t\t\t\tAdvanced\r\n\t\t\t\t\t\t\t\t\t\t</DropdownToggle>\r\n\t\t\t\t\t\t\t\t\t\t<DropdownMenu>\r\n\t\t\t\t\t\t\t\t\t\t\t<DropdownItem onClick={this.toggleErrorCorrection.bind(this)}>\r\n\t\t\t\t\t\t\t\t\t\t\t\tToggle Error Correction (Currently {Simulator.isErrCorrecting ? \"Enabled\" : \"Disabled\"})\r\n\t\t\t\t\t\t\t\t\t\t\t</DropdownItem>\r\n\t\t\t\t\t\t\t\t\t\t</DropdownMenu>\r\n\t\t\t\t\t\t\t\t\t</Dropdown>\r\n\t\t\t\t\t\t\t</NavItem>\r\n\t\t\t\t\t\t</Nav>\r\n\t\t\t\t\t</Collapse>\r\n\t\t\t\t</RNavbar>\r\n\t\t\t\t<MailModal showModal={this.state.showModal} closeModal={this.closeModal.bind(this)} />\r\n\t      \t</div>\r\n\t\t);\r\n\t}\r\n}","import React from \"react\";\r\nimport Simulator from \"../Simulator\";\r\n\r\nexport class Table extends React.Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\tvisible: false\t//true/false if simulator data to render\r\n\t\t};\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\t// simulator singles data set loaded - render data\r\n\t\tSimulator.on(\"data\", () => this.setState({visible: true}));\r\n\r\n\t\t// simulator signals a reset - nothing to render\r\n\t\tSimulator.on(\"reset\", () => this.setState({visible: false}));\r\n\t}\r\n\r\n\r\n\tgetStyleForDay(index){\r\n\t\tlet style = null;\r\n\r\n\t\tif(Simulator.firstInvalidDay > -1){\r\n\t\t\tif(index === Simulator.firstInvalidDay){\r\n\t\t\t\t// this row is first invalid day\r\n\t\t\t\tstyle = {\r\n\t\t\t\t\tborderLeft: \"5px solid red\",\r\n\t\t\t\t\tborderRight: \"5px solid red\"\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\telse if(index > Simulator.firstInvalidDay){\r\n\t\t\t\t// subsequent invalid days\r\n\t\t\t\tstyle = {\r\n\t\t\t\t\tborderLeft: \"1px solid red\",\r\n\t\t\t\t\tborderRight: \"1px solid red\"\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t}\t\t\r\n\r\n\t\treturn style;\r\n\t}\r\n\r\n\t// renders table rows up to the current simulation day\r\n\trenderRows(){\r\n\t\tlet data = Simulator.data;\r\n\r\n\t\tif(data){\r\n\t\t\tlet rows = new Array(data.length + 1);\r\n\r\n\t\t\tdata.forEach((dayData, index) => {\r\n\t\t\t\t// extract data\r\n\t\t\t\tlet susceptible = \tMath.round(dayData.Susceptible),\r\n\t\t\t\t\tinfected = \t\tMath.round(dayData.Infected),\r\n\t\t\t\t\timmune = \t\tMath.round(dayData.Immune),\r\n\t\t\t\t\tdead = \t\t\tMath.round(dayData.Dead),\r\n\t\t\t\t\tpopulation = \tMath.round(dayData.TotalPopulation);\r\n\r\n\t\t\t\t// get the style (for data correction)\r\n\t\t\t\tlet style = this.getStyleForDay(index);\r\n\r\n\t\t\t\t// create table row\r\n\t\t\t\t// (toLocalString adds the ',' as the number grows in thousands)\r\n\t\t\t\trows[index] = (\r\n\t\t\t\t\t<tr key={index} style={style}>\r\n\t\t\t\t\t\t<td>{index}</td>\r\n\t\t\t\t\t\t<td>{susceptible.toLocaleString()}</td>\r\n\t\t\t\t\t\t<td>{infected.toLocaleString()}</td>\r\n\t\t\t\t\t\t<td>{immune.toLocaleString()}</td>\r\n\t\t\t\t\t\t<td>{dead.toLocaleString()}</td>\r\n\t\t\t\t\t\t<td>{population.toLocaleString()}</td>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t);\r\n\t\t\t});\r\n\r\n\t\t\treturn rows;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n\r\n\trender(){\r\n\t\treturn this.state.visible ? (\r\n\t\t\t<div>\r\n\t\t\t\t<table className=\"table table-striped overflow-table\">\r\n\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t<th>Day</th>\r\n\t\t\t\t\t\t\t<th>Susceptible</th>\r\n\t\t\t\t\t\t\t<th>Infected</th>\r\n\t\t\t\t\t\t\t<th>Immune</th>\r\n\t\t\t\t\t\t\t<th>Dead</th>\r\n\t\t\t\t\t\t\t<th>Total Population</th>\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t</thead>\r\n\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t{this.renderRows()}\r\n\t\t\t\t\t</tbody>\r\n\t\t\t\t</table>\r\n\t\t\t\t<div className=\"text-center\">\r\n\t\t\t\t\t{Simulator.firstInvalidDay > -1 ? `* Error correction begins on day ${Simulator.firstInvalidDay} *` : null}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t) : null;\r\n\t}\r\n}","import \"./GraphRange.css\"\r\nimport React from \"react\";\r\nimport GraphData from \"../GraphData\";\r\n\r\nexport class GraphRange extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.lowerRef = React.createRef();\r\n        this.upperRef = React.createRef();\r\n    }\r\n\r\n    onChangeLow(){\r\n        let lowValue = this.lowerRef.current.value,\r\n            low = parseInt(lowValue);\r\n\r\n        if(lowValue.length){\r\n            let high = this.selectedMax || this.props.max;\r\n\r\n            low = Math.max(this.props.min, low);\r\n            low = Math.min(low, high - 1);\r\n\r\n            this.lowerRef.current.value = low;\r\n\r\n            GraphData.startDay = low;\r\n        }\r\n    }\r\n\r\n    onChangeHigh(){\r\n        let highValue = this.upperRef.current.value,\r\n            high = parseInt(highValue);\r\n\r\n        if(highValue.length){\r\n            let low = this.selectedMin || this.props.min;\r\n\r\n            high = Math.max(low + 1, high);\r\n            high = Math.min(high, this.props.max);\r\n\r\n            this.upperRef.current.value = high;\r\n\r\n            GraphData.endDay = high;\r\n        }\r\n    }\r\n\r\n    onSubmit(evt){\r\n        evt.preventDefault();\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"graph-range-container\">\r\n                <form onSubmit={this.onSubmit.bind(this)}>\r\n                    <input\r\n                        ref={this.lowerRef}\r\n                        min={this.props.min}\r\n                        max={this.props.max}\r\n                        step={1}\r\n                        defaultValue={this.props.min}\r\n                        placeholder=\"Start\"\r\n                        type=\"number\"\r\n                        required\r\n                        onChange={this.onChangeLow.bind(this)}\r\n                    />&nbsp;\r\n                    <input\r\n                        ref={this.upperRef}\r\n                        min={this.props.min}\r\n                        max={this.props.max}\r\n                        step={1}\r\n                        defaultValue={this.props.max}\r\n                        placeholder=\"End\"\r\n                        type=\"number\"\r\n                        required\r\n                        onChange={this.onChangeHigh.bind(this)}\r\n                    />\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    get selectedMin(){\r\n        return parseFloat(this.lowerRef.current.value) || this.props.min;\r\n    }\r\n\r\n    get selectedMax(){\r\n        return parseFloat(this.upperRef.current.value) || this.props.max;\r\n    }\r\n}","import \"./TrendLine.css\";\r\nimport React from \"react\";\r\nimport GraphData from \"../GraphData\";\r\n\r\nexport class TrendLine extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.rangeRef = React.createRef();\r\n        this.numRef = React.createRef();\r\n    }\r\n\r\n    onSlide(){\r\n        let val = this.rangeRef.current.value;\r\n        GraphData.trendLineY = parseInt(val);\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"trend-line-container\">\r\n                <input\r\n                    className=\"trend-slider\"\r\n                    ref={this.rangeRef}\r\n                    type=\"range\"\r\n                    min={this.props.min || 0}\r\n                    max={this.props.max}\r\n                    step={100}\r\n                    defaultValue={this.props.defaultValue || 0}\r\n                    onChange={this.onSlide.bind(this)}\r\n                />\r\n                <div className=\"trend-line-text\">\r\n                    Trend Line\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    get value(){\r\n        return this.rangeRef.current.value;\r\n    }\r\n}","import React from \"react\";\r\nimport { LineChart } from \"react-easy-chart\"\r\nimport Simulator from \"../Simulator\";\r\nimport GraphData from \"../GraphData\";\r\nimport { GraphRange } from \"./GraphRange\";\r\nimport { TrendLine } from \"./TrendLine\";\r\n\r\n// graph size constants\r\nconst WIDTH = \t\t540,\r\n\tHEIGHT = \t\t475,\r\n\tMARGIN_TOP = \t10,\r\n\tMARGIN_BOTTOM =\t50,\r\n\tMARGIN_LEFT = \t80,\r\n\tMARGIN_RIGHT = \t10;\r\n\r\n// graph line colors\r\nconst COLORS = {\r\n\t\"Infected\": \t\"green\",\r\n\t\"Susceptible\": \t\"red\",\r\n\t\"Immune\": \t\t\"steelblue\",\r\n\t\"Dead\": \t\t\"gray\",\r\n\t\"TrendLine\":\t\"black\"\r\n};\r\n\r\nexport class Graph extends React.Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\r\n\t\tthis.graphContainerRef = React.createRef();\r\n\t\t\r\n\t    this.state = {\r\n\t\t\tvisible: false,\t\t\t\t\t\t// true/false if simulator data to render\r\n\t\t\ttooltip: null,\t\t\t\t\t\t// text to display\r\n\t\t\tcontainerWidth: WIDTH,\t\t\t\t// line graph parent width\r\n\t\t\tgraphLabels: {}\t\t\t\t\t\t// selected graph labels (Infected, Susceptible, etc)\r\n\t    };\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\t// auto select infected\r\n\t\tthis.toggleLabel(\"Infected\");\r\n\r\n\t\t// simulator singles data set loaded - render data\r\n\t\tSimulator.on(\"data\", () => this.setState({visible: true}));\r\n\r\n\t\t// simulator reset - nothing to render\r\n\t\tSimulator.on(\"reset\", () => this.setState({visible: false}));\r\n\r\n\t\t// graph update\r\n\t\tGraphData.on(\"update\", () => this.forceUpdate());\r\n\r\n\t\t// when the window size changes - resize the graph if neccessary\r\n\t\twindow.addEventListener(\"resize\", this.onResize.bind(this));\r\n\t\tthis.onResize();\r\n\t}\r\n\r\n\tcomponentDidUpdate(prevProps, prevState){\r\n\t\tif(prevState.yLabel !== this.state.yLabel){\r\n\t\t\tthis.setState({tooltip: null});\r\n\t\t}\r\n\t}\r\n\t\r\n\t// when a label ('Infected', 'Susceptible', etc) is clicked...\r\n\ttoggleLabel(label){\r\n\t\t// copy labels dictionary\r\n\t\tlet nextLabels = Object.assign({}, this.state.graphLabels);\r\n\r\n\t\t// toggle parameter label\r\n\t\tif(label in nextLabels){\r\n\t\t\tnextLabels[label] = !nextLabels[label];\r\n\t\t}\r\n\t\telse{\r\n\t\t\tnextLabels[label] = true;\r\n\t\t}\r\n\r\n\t\t// update state\r\n\t\tthis.setState({graphLabels: nextLabels});\r\n\t}\r\n\r\n\t// when a point on the graph is clicked...\r\n\tonGraphClick(data, evt){\r\n\t\tlet {x, y} = data;\r\n\t\tthis.setState({tooltip: `${Math.round(y)} people on day ${x}.`});\r\n\t}\r\n\r\n    onResize(){\r\n        // updates the state to reflect the maximum size allowed for the graph\r\n        let element = this.graphContainerRef.current;\r\n\t\tif(element){\r\n\t\t\tthis.setState({containerWidth: element.getBoundingClientRect().width});\r\n\t\t}\r\n    }\r\n\r\n\t// renders a simple HTML key for the graph line/colors\r\n\trenderLabelButtons(){\r\n\t\tlet labels = this.state.graphLabels;\r\n\r\n\t\t// border style for button (null = no change)\r\n\t\tlet borders = [\r\n\t\t\t(labels.Infected === true) ? `2px solid ${COLORS.Infected}` : null,\r\n\t\t\t(labels.Susceptible === true) ? `2px solid ${COLORS.Susceptible}` : null,\r\n\t\t\t(labels.Immune === true) ? `2px solid ${COLORS.Immune}` : null,\r\n\t\t\t(labels.Dead === true) ? `2px solid ${COLORS.Dead}` : null\r\n\t\t];\r\n\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<button style={{color: COLORS[\"Infected\"], borderBottom: borders[0]}} onClick={() => this.toggleLabel(\"Infected\")} className=\"pointer graph-button\">Infected</button>\r\n\t\t\t\t<button style={{color: COLORS[\"Susceptible\"], borderBottom: borders[1]}} onClick={() => this.toggleLabel(\"Susceptible\")} className=\"pointer graph-button\">Susceptible</button>\r\n\t\t\t\t<button style={{color: COLORS[\"Immune\"], borderBottom: borders[2]}} onClick={() => this.toggleLabel(\"Immune\") }className=\"pointer graph-button\">Immune</button>\r\n\t\t\t\t<button style={{color: COLORS[\"Dead\"], borderBottom: borders[3]}} onClick={() => this.toggleLabel(\"Dead\")} className=\"pointer graph-button\">Dead</button>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\r\n\t// exports the current svg graph to a jpg file \r\n\tdownloadJPG(){\r\n\t\tlet container = this.graphContainerRef.current;\r\n\t\tif(container){\r\n\t\t\t// get svg element\r\n\t\t\tlet svgElement = container.querySelector(\"svg\");\r\n\r\n\t\t\t// create canvas\r\n\t\t\tlet canvas = document.createElement(\"canvas\");\r\n\t\t\tlet ctx = canvas.getContext(\"2d\");\r\n\r\n\t\t\t// resize canvas to svg\r\n\t\t\tcanvas.width = svgElement.getAttribute(\"width\");\r\n\t\t\tcanvas.height = svgElement.getAttribute(\"height\");\r\n\r\n\t\t\t// convert svg element to xml \r\n\t\t\tlet svgXml = new XMLSerializer().serializeToString(svgElement);\r\n\r\n\t\t\t// create a data url from the svg+xml\r\n\t\t\tlet blob = new Blob([svgXml], {type: \"image/svg+xml\"});\r\n\t\t\tlet svgUrl = window.URL.createObjectURL(blob);\r\n\r\n\t\t\t// create an image to hold the svg data url \r\n\t\t\tlet svgImage = document.createElement(\"img\");\r\n\r\n\t\t\t// when the svgxml image loads...\r\n\t\t\tsvgImage.onload = () => {\r\n\t\t\t\t// draw svg+xml onto canvas\r\n\t\t\t\tctx.imageSmoothingEnabled = true;\r\n\t\t\t\tctx.imageSmoothingQuality = \"high\";\r\n\t\t\t\tctx.drawImage(svgImage, 0, 0);\r\n\r\n\t\t\t\t// remove black background for white \r\n\t\t\t\tctx.globalCompositeOperation = \"destination-over\";\r\n\t\t\t\tctx.fillStyle = \"white\";\r\n\t\t\t\tctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n\t\t\t\t// get jpg data\r\n\t\t\t\tlet jpg = document.createElement(\"img\");\r\n\t\t\t\tjpg.onload = () => {\r\n\t\t\t\t\t// jpg is rasterized svg\r\n\t\t\t\t\t// (implement download here)\r\n\t\t\t\t\t//document.body.appendChild(jpg);\r\n\t\t\t\t\twindow.URL.revokeObjectURL(svgUrl);\r\n\t\t\t\t}\r\n\t\t\t\tjpg.setAttribute(\"src\", canvas.toDataURL(\"image/jpeg\"));\r\n\t\t\t};\r\n\r\n\t\t\t// load the svgxml data\r\n\t\t\tsvgImage.setAttribute(\"src\", svgUrl);\r\n\t\t}\r\n\t}\r\n\r\n\trender(){\r\n\t\tif(this.state.visible){\r\n\t\t\tlet data = GraphData.getData(this.state.graphLabels);\r\n\t\t\tlet dayCount = data.values.length ? data.values[0].length : 0;\r\n\t\t\tlet width = Math.min(this.state.containerWidth, WIDTH);\r\n\r\n\t\t\treturn (\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<h5>{data.labels.join(\" + \") || \"(Nothing Selected)\"}</h5>\r\n\t\t\t\t\t{this.renderLabelButtons()}\r\n\t\t\t\t\t<div ref={this.graphContainerRef}>\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<LineChart\r\n\t\t\t\t\t\t\t\tdata={data.values}\r\n\t\t\t\t\t\t\t\twidth={width}\r\n\t\t\t\t\t\t\t\theight={HEIGHT}\r\n\t\t\t\t\t\t\t\tmargin={{\r\n\t\t\t\t\t\t\t\t\ttop: MARGIN_TOP, bottom: MARGIN_BOTTOM,\r\n\t\t\t\t\t\t\t\t\tleft: MARGIN_LEFT, right: MARGIN_RIGHT\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\taxes\r\n\t\t\t\t\t\t\t\taxisLabels={{x: \"Days Elapsed\", y: \"People\"}}\r\n\t\t\t\t\t\t\t\tdataPoints={dayCount < 0} // enable this later\r\n\t\t\t\t\t\t\t\txDomainRange={[GraphData.startDay, GraphData.endDay]}\r\n\t\t\t\t\t\t\t\tyDomainRange={[0, data.largestY]}\r\n\t\t\t\t\t\t\t\tlineColors={data.labels.map(label => COLORS[label])}\r\n\t\t\t\t\t\t\t\tclickHandler={this.onGraphClick.bind(this)}\r\n\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\t\".label\": {fill: \"black\"},\r\n\t\t\t\t\t\t\t\t\t\".axis\": {fontSize: \"0.75em\", fontFamily: \"arial\"}\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t<TrendLine max={data.largestY}/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<GraphRange\r\n\t\t\t\t\t\t\tmin={0}\r\n\t\t\t\t\t\t\tmax={Simulator.data.length - 1 || 0}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"text-center\">\r\n\t\t\t\t\t\t{this.state.tooltip}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t\treturn <div ref={this.graphContainerRef}></div> // required for resize to work! \r\n\t}\r\n} ","import \"../lib/bootstrap.min.css\";\r\nimport \"./App.css\";\r\nimport React from \"react\";\r\nimport { Container, Row, Col, Card, CardBody } from \"reactstrap\";\r\nimport { Inputs } from \"./Inputs\";\r\nimport { Navbar } from \"./Navbar\";\r\nimport { Table } from \"./Table\";\r\nimport { Graph } from \"./Graph\";\r\n\r\nexport class App extends React.Component{\r\n    render(){\r\n        return (\r\n            <div>\r\n                <Navbar/>\r\n                <br/>\r\n                <span className=\"Version\">V0.2</span>\r\n                <main>\r\n                    <Container>\r\n                        <Card color=\"light\">\r\n                            <CardBody>\r\n                                <Row className=\"text-center\">\r\n                                    <Col lg={6}>\r\n                                        <Inputs/>\r\n                                    </Col>\r\n                                    <Col lg={6}>\r\n                                        <Graph/>\r\n                                    </Col>\r\n                                </Row>\r\n                                <br/>\r\n                                <div>\r\n                                    <Table/>\r\n                                </div>\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Container>\r\n                </main>\r\n                <footer>\r\n                    <Container className=\"text-center\">\r\n                        <hr/>\r\n                        <Row>\r\n                            <Col lg={6}>\r\n                                Juall | Rosenblum | Pojero | Erry \r\n                            </Col>\r\n                            <Col lg={6}>\r\n                                <a href=\"https://opensource.org/licenses/MIT\" target=\"_blank\">MIT License</a>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </footer>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { App } from \"./components/App\";\r\n\r\nReactDOM.render(<App/>, document.querySelector(\"#root\"));"],"sourceRoot":""}