{"version":3,"sources":["Ajax.js","EventEmitter.js","Simulator.js","ParamStorage.js","components/NumSlider.jsx","preset.js","GraphData.js","components/Inputs.jsx","components/MailModal.jsx","components/Navbar.jsx","components/Table.jsx","components/GraphRange.jsx","components/TrendLine.jsx","components/Graph.jsx","components/App.jsx","index.js"],"names":["Ajax","Object","classCallCheck","this","createClass","key","value","options","arguments","length","undefined","Promise","resolve","reject","method","url","window","location","origin","headers","query","data","xhr","XMLHttpRequest","h","onload","onerror","err","queryString","open","setRequestHeader","send","JSON","stringify","request","dict","qs","param","concat","substring","EventEmitter","_listeners","event","willTrigger","type","forEach","listener","eventType","push","listeners","i","splice","src_Simulator","Simulator","_this","possibleConstructorReturn","getPrototypeOf","call","_firstInvalidDay","_useErrCorrecting","_this2","href","includes","Access-Control-Allow-Origin","Error-Correction","isErrCorrecting","get","then","status","parse","response","parseInt","getResponseHeader","emit","Event","Error","catch","_this3","filename","Content-Type","csvDataBlob","Blob","a","document","createElement","URL","createObjectURL","setAttribute","Date","now","click","revokeObjectURL","console","log","message","src_ParamStorage","ParamStorage","_numParamSets","_lastParamSet","_currDay","sessionStorage","clear","params","convertToTitleCase","paramsNotLastSave","setItem","numParamSets","removeItem","infectionLength","transmissionRate","virulence","initialPopulation","immunePercent","initialInfected","simulationLength","preset","saveParamsInputsDict","infection_length","transmission_rate","initial_population","immune_percent","initial_infected","simulation_length","newParams","paramId","json","getItem","firstStoredDay","getSavedParams","NumSlider","_React$Component","props","numRef","React","createRef","rangeRef","inherits","current","init","min","evt","val","parseFloat","target","Math","max","react_default","className","label","showRange","minText","maxText","ref","onChange","onNumber","bind","step","placeholder","required","disabled","onSlide","set","n","Component","presets","Seasonal Flu","Infection Length","Transmission","Virulence","Smallpox","Polio","Measles","Ebola","H1N1 Flu","H5N1 Flu","1918 Flu","src_GraphData","GraphData","_startDay","_endDay","Number","MAX_SAFE_INTEGER","_trendLineY","extractTrendLine","URLSearchParams","search","trendLineY","keysDict","simData","labeledPoints","largestY","start","startDay","end","endDay","day","y","pt","x","Array","fill","map","index","values","keys","labels","filter","INPUT_RANGES","Inputs","intialImmunityRef","transmissionRef","virulenceRef","initialInfectedRef","intialPopRef","infectionLengthRef","daysRef","presetRef","exportUrlRef","csvFilenameElement","state","pending","isDisabled","exportModal","exportOption","exportDropdown","on","onSimulatorLoad","onSimulatorError","extractQueryStringParams","useTestValues","getInputsDictionary","healthy","setState","reset","downloadCSVFile","hasData","currParams","runSimulation","load","preventDefault","prev","direction","stepBackwards","stepForwards","currentParams","onPresetChange","elem","select","execCommand","_this4","reactstrap_es","innerRef","element","maxLength","color","onClick","downloadCSV","defaultValue","getExportURL","readOnly","copyLinkText","_this5","id","switchParamSet","onSubmit","NumSlider_NumSlider","onReset","toggleExportModal","isOpen","toggle","toggleExportDropdown","caret","renderExportOptBody","MailModal","textRef","errorRef","headerRef","typeError","errorTime","errorMsg","other","errMessage","successMessage","prevProps","showModal","e","goodHeader","BuildArray","post","text","lib_default","closeModal","submitClick","onTypeSelect","name","TypeOther","Navbar","showNav","showAdvanced","light","expand","toggleNavbar","navbar","selected","openModal","toggleDropdown","toggleErrorCorrection","MailModal_MailModal","Table","visible","style","firstInvalidDay","borderLeft","borderRight","rows","dayData","susceptible","round","Susceptible","infected","Infected","immune","Immune","dead","Dead","population","TotalPopulation","getStyleForDay","toLocaleString","renderRows","GraphRange","lowerRef","upperRef","lowValue","low","high","selectedMax","highValue","selectedMin","onChangeLow","onChangeHigh","TrendLine","WIDTH","COLORS","Graph","graphContainerRef","tooltip","containerWidth","graphLabels","toggleLabel","forceUpdate","addEventListener","onResize","prevState","yLabel","nextLabels","assign","getBoundingClientRect","width","borders","borderBottom","container","svgElement","querySelector","canvas","ctx","getContext","getAttribute","height","svgXml","XMLSerializer","serializeToString","blob","svgUrl","svgImage","imageSmoothingEnabled","imageSmoothingQuality","drawImage","globalCompositeOperation","fillStyle","fillRect","jpg","toDataURL","getData","dayCount","join","renderLabelButtons","react_easy_chart_lib","margin","top","bottom","left","right","axes","axisLabels","dataPoints","xDomainRange","yDomainRange","lineColors","clickHandler","onGraphClick",".label",".axis","fontSize","fontFamily","TrendLine_TrendLine","GraphRange_GraphRange","App","apply","Navbar_Navbar","lg","Inputs_Inputs","Graph_Graph","Table_Table","ReactDOM","render","App_App"],"mappings":"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","file":"static/js/main.360a4901.chunk.js","sourcesContent":["export class Ajax{\r\n    // sends an async http request \r\n    static request(options={}){\r\n        return new Promise((resolve, reject) => {\r\n            // extract config from options object\r\n            let method = (typeof options.method === \"string\") ? options.method : \"GET\",\r\n                url = (typeof options.url === \"string\") ? options.url : window.location.origin,\r\n                headers = (typeof options.headers === \"object\" && options.headers) ? options.headers : {},\r\n                query = (typeof options.query === \"object\" && options.query) ? options.query : {},\r\n                data = (typeof options.data !== \"undefined\") ? options.data : null;\r\n\r\n            // create the request\r\n            let xhr = new XMLHttpRequest();\r\n\r\n            // attach listeners\r\n            xhr.onload = () => resolve(xhr);\r\n            xhr.onerror = err => reject(err);\r\n\r\n            // apply query string\r\n            if(query){\r\n                url += Ajax.queryString(query);\r\n            }\r\n\r\n            // open the request\r\n            xhr.open(method, url);\r\n\r\n            // apply http headers\r\n            for(let h in headers){\r\n                xhr.setRequestHeader(h, headers[h]);\r\n            }\r\n\r\n            // send the request\r\n            // send JSON if the data is not a string\r\n            if(data){\r\n                if(typeof data !== \"string\"){\r\n                    xhr.send(JSON.stringify(data));\r\n                }\r\n                else xhr.send(data);\r\n            }\r\n            else xhr.send();\r\n        });\r\n    }\r\n\r\n    // async http get request\r\n    static get(url, headers, query){\r\n        return Ajax.request({method: \"GET\", url, headers, query});\r\n    }\r\n\r\n    // async http post request\r\n    static post(url, headers, data){\r\n        return Ajax.request({method: \"POST\", url, headers, data});\r\n    }\r\n\r\n    // creates a query string from an object\r\n    static queryString(dict){\r\n        let qs = \"?\";\r\n\r\n        for(let param in dict){\r\n            qs += `${param}=${dict[param]}&`;\r\n        }\r\n\r\n        return qs.substring(0, qs.length - 1);\r\n    }\r\n}","// simple event emitter class\r\nexport class EventEmitter{\r\n    constructor(){\r\n        this._listeners = {};   // 'private' dictionary of {eventType: listenerFunction}\r\n    }\r\n\r\n    // triggers all listening functions\r\n    emit(event){\r\n        if(this.willTrigger(event.type)){\r\n            this._listeners[event.type].forEach(listener => listener(event));\r\n        }\r\n    }\r\n\r\n    // adds a listener\r\n    on(eventType, listener){\r\n        if(this.willTrigger(eventType)){\r\n            this._listeners[eventType].push(listener);\r\n        }\r\n        else{\r\n            this._listeners[eventType] = [listener];\r\n        }\r\n    }\r\n\r\n    // removes a listener\r\n    off(eventType, listener){\r\n        if(this.willTrigger(eventType)){\r\n            let listeners = this._listeners[eventType];\r\n\r\n            for(let i = 0; i < listeners.length; i++){\r\n                if(listeners[i] === listener){\r\n                    listeners.splice(i, 1);\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // checks if there are any listeners for a given type\r\n    willTrigger(eventType){\r\n        return eventType in this._listeners;\r\n    }\r\n}","import { Ajax } from \"./Ajax\";\r\nimport { EventEmitter } from \"./EventEmitter\";\r\n\r\n// singleton for holding simulation data\r\n// event-driven to keep chart + graph updated\r\nclass Simulator extends EventEmitter{\r\n    constructor(){\r\n        super();\r\n\r\n        this.data = null;                   // simulation data array\r\n        this._firstInvalidDay = -1;         // first invalid day (-1 = no invalid days)\r\n        this._useErrCorrecting = true;      // use error correction?\r\n    }\r\n\r\n    // hits the API for data, signals progress\r\n    // query should be a dictionary of the inputs, will be converted into a query string\r\n    load(query){\r\n        return new Promise((resolve, reject) => {\r\n            // figure out endpoint\r\n            let url = window.location.href.includes(\"localhost\") ? \"http://localhost:8080/plague\" : `${window.location.origin}/plague`;\r\n            \r\n            // CORS headers (use foreign domain)\r\n            let headers = {\r\n                \"Access-Control-Allow-Origin\": window.location.origin,\r\n                \"Error-Correction\": this.isErrCorrecting\r\n            };\r\n\r\n            // ajax call with query string\r\n            // (null headers)\r\n            Ajax.get(url, headers, query)\r\n                .then(xhr => {    \r\n                    // ajax resolved (could be bad/good request, but server responded)\r\n                    if(xhr.status === 200){\r\n                        // good request - attempt to parse results json\r\n                        try{\r\n                            // parse json\r\n                            this.data = JSON.parse(xhr.response);\r\n\r\n                            // extract first invalid day\r\n                            this._firstInvalidDay = parseInt(xhr.getResponseHeader(\"First-Invalid-Day\")) || -1;\r\n                        }\r\n                        catch(err){\r\n                            // json parse error (should never happen)\r\n                            reject(err);\r\n                            this.emit(new Event(\"error\"));  // server responded with bad request signal\r\n                        }\r\n\r\n                        // done, resolve promise and emit load + data\r\n                        resolve();\r\n                        this.emit(new Event(\"load\"));   // server responded with good request signal\r\n\r\n                        this.emit(new Event(\"data\"));   // parsed data signal\r\n                    }\r\n                    else{\r\n                        // bad request\r\n                        reject(new Error(xhr.response || \"Bad request\"));\r\n                        this.emit(new Event(\"error\"));  // server responded with bad request signal\r\n                    }\r\n                })\r\n                .catch(err => {\r\n                    // ajax request died (really bad NOT a 400 error!)\r\n                    reject(err);\r\n                    this.emit(new Event(\"error\"));  // request died signal\r\n                });\r\n        });\r\n    }\r\n\r\n    // asychronously downloads a csv file using ajax\r\n    downloadCSVFile(query, filename=null){\r\n        return new Promise((resolve, reject) => {\r\n            // figure out endpoint origin\r\n            let origin = window.location.origin.includes(\"localhost\") ? \"http://localhost:8080\" : window.location.origin;\r\n\r\n            // figure out endpoint using origin\r\n            let url = `${origin}/plague`;\r\n\r\n            // http request headers\r\n            let headers = {\r\n                \"Access-Control-Allow-Origin\": window.location.origin,\r\n                \"Content-Type\": \"text/csv\",\r\n                \"Error-Correction\": this.isErrCorrecting\r\n            };\r\n\r\n            // make sure .csv\r\n            if(filename && filename.substring(filename.length - 4, filename.length) !== \".csv\"){\r\n                filename += \".csv\";\r\n            }\r\n\r\n            // get csv file via Ajax\r\n            Ajax.get(url, headers, query)\r\n                .then(xhr => {\r\n                    // server responded\r\n                    if(xhr.status === 200){\r\n                        // good http status - download\r\n                        // xhr.response = csv text\r\n                        // convert to blob\r\n                        let csvDataBlob = new Blob([xhr.response], {type: \"octet/stream\"});\r\n\r\n                        // create a 'secret' link using the blob\r\n                        let a = document.createElement(\"a\");\r\n                        let url = window.URL.createObjectURL(csvDataBlob);\r\n                        \r\n                        // setup the link to download blob data\r\n                        a.setAttribute(\"download\", filename || `data_${Date.now()}.csv`);\r\n                        a.setAttribute(\"href\", url);\r\n\r\n                        // click the link to download the file\r\n                        a.click();\r\n                        window.URL.revokeObjectURL(url);\r\n\r\n                        // trigger any listeners\r\n                        resolve(\"File downloaded.\");\r\n                    }\r\n                    else{\r\n                        // bad http status - trigger listeners with error\r\n                        console.log(xhr.response);\r\n                        reject(new Error(\"Error downloading CSV file.\"));\r\n                    }\r\n                })\r\n                .catch(err => {\r\n                    // server did not responed - trigger listeners with error\r\n                    console.log(err.message);\r\n                    reject(new Error(\"Unable to download CSV file.\"))\r\n                });\r\n        });\r\n    }\r\n\r\n    // resets simulation to day 0 and clears all stored data\r\n    // (triggers listeners)\r\n    reset(){\r\n        this.data = null;\r\n        this.emit(new Event(\"reset\"));\r\n    }\r\n\r\n    set isErrCorrecting(value){\r\n        if(typeof value === \"boolean\"){\r\n            this._useErrCorrecting = value;\r\n        }\r\n        else throw new Error(\"isErrCorrecting must be set to a boolean value.\");\r\n    }\r\n\r\n    get hasData(){\r\n        return this.data !== null;\r\n    }\r\n\r\n    get firstInvalidDay(){\r\n        return this._firstInvalidDay;\r\n    }\r\n\r\n    get isErrCorrecting(){\r\n        return this._useErrCorrecting;\r\n    }\r\n}\r\n\r\n// singleton\r\nexport default new Simulator();","// class for managing parameter data history using session storage\r\nconst PARAM_STORAGE_LIMIT = 100;\r\n\r\nclass ParamStorage{\r\n    constructor(){\r\n        this._numParamSets = 0;\r\n        this._lastParamSet = null;\r\n        this._currDay = 0;\r\n\r\n        window.sessionStorage.clear();\r\n    }\r\n    \r\n    // saves parameters to session storage - expects query string format (as provided by inputs.jsx)\r\n    saveParamsInputsDict(dict){\r\n        let params = this.convertToTitleCase(dict);\r\n\r\n        // prevent saving multiple set same time in a row\r\n        if(this.paramsNotLastSave(params)){\r\n            window.sessionStorage.setItem(++this._numParamSets, JSON.stringify(params))\r\n            this._currDay = this.numParamSets;\r\n            this._lastParamSet = params;\r\n\r\n            // enforce storage capacity - begin deleting from the left bound\r\n            if(this.numParamSets > PARAM_STORAGE_LIMIT){\r\n                window.sessionStorage.removeItem(this.numParamSets - PARAM_STORAGE_LIMIT);\r\n            }\r\n\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // saves parameters to session storage\r\n    saveParams(infectionLength, transmissionRate, virulence, initialPopulation, immunePercent, initialInfected, simulationLength, preset){\r\n        return this.saveParamsInputsDict({\r\n            infection_length:   infectionLength,\r\n            transmission_rate:  transmissionRate,\r\n            virulence,\r\n            initial_population: initialPopulation,\r\n            immune_percent:     immunePercent,\r\n            initial_infected:   initialInfected,\r\n            simulation_length:  simulationLength,\r\n            preset\r\n        });\r\n    }\r\n\r\n    // converts underscore format dict to title case (ex: initial_population to InitialPopulation)\r\n    convertToTitleCase(dict){\r\n        return {\r\n            infectionLength:    dict.infection_length,\r\n            transmissionRate:   dict.transmission_rate,\r\n            virulence:          dict.virulence,\r\n            initialPopulation:  dict.initial_population,\r\n            immunePercent:      dict.immune_percent,\r\n            initialInfected:    dict.initial_infected,\r\n            simulationLength:   dict.simulation_length,\r\n            preset:             dict.preset\r\n        };\r\n    }\r\n\r\n    // checks if 'newParams' is content different from the last save param set\r\n    paramsNotLastSave(newParams){\r\n        if(!this._lastParamSet) return true;\r\n\r\n        for(let param in this._lastParamSet){\r\n            if(this._lastParamSet[param] !== newParams[param]){\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // gets saved parameters\r\n    getSavedParams(paramId){\r\n        let json = window.sessionStorage.getItem(paramId) || null;\r\n        return json ? JSON.parse(json) : null;\r\n    }\r\n\r\n    // moves current day one into the backwards\r\n    stepBackwards(){\r\n        if(this._currDay - 1 >= this.firstStoredDay){\r\n            --this._currDay;\r\n            //this._lastParamSet = this.getSavedParams(--this._currDay);\r\n        }\r\n    }\r\n\r\n    // move sthe current day one day forwards\r\n    stepForwards(){\r\n        if(this._currDay + 1 <= this.numParamSets){\r\n            ++this._currDay;\r\n            //this._lastParamSet = this.getSavedParams(++this._currDay);\r\n        }\r\n    }\r\n\r\n    get firstStoredDay(){\r\n        if(this.numParamSets > PARAM_STORAGE_LIMIT){\r\n            return this.numParamSets - PARAM_STORAGE_LIMIT;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    get currentParams(){\r\n        return this.getSavedParams(this._currDay);\r\n    }\r\n\r\n    get currentDay(){\r\n        return this._currDay;\r\n    }\r\n\r\n    get numParamSets(){\r\n        return this._numParamSets;\r\n    }\r\n}\r\n\r\nexport default new ParamStorage();","import \"./NumSlider.css\";\r\nimport React from \"react\";\r\n\r\nexport class NumSlider extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.numRef = React.createRef();\r\n        this.rangeRef = React.createRef();\r\n    }\r\n\r\n    // mounted - set the default numbers\r\n    componentDidMount(){\r\n        this.numRef.current.value = this.props.init || this.props.min;\r\n        this.rangeRef.current.value = this.props.init || this.props.min;\r\n    }\r\n\r\n    // on text field input\r\n    onNumber(evt){\r\n        // set the range value to the number value\r\n        let val = parseFloat(evt.target.value);\r\n    \r\n        if(val){\r\n            // enforce min/max constraints\r\n            val = Math.min(Math.max(val, this.props.min), this.props.max); \r\n\r\n            // update inputs\r\n            this.numRef.current.value = val;\r\n            this.rangeRef.current.value = val;\r\n        }\r\n        else{\r\n            // empty input - range at min and number will be empty\r\n            this.rangeRef.current.value = this.props.min;\r\n        }\r\n    }\r\n\r\n    // on range bar move\r\n    onSlide(evt){\r\n        // set the text value to the number value\r\n        let val = evt.target.value;\r\n\r\n        // enforce min/max constraints \r\n        val = Math.min(Math.max(val, this.props.min), this.props.max);\r\n\r\n        // update number input\r\n        this.numRef.current.value = val;\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"num-slider-container\">\r\n                <div>\r\n                    <label>{this.props.label}</label>\r\n                    {this.props.showRange ? (` ${this.minText}-${this.maxText}`) : null}\r\n                </div>\r\n                <div>\r\n                    <input \r\n                        ref={this.numRef}\r\n                        onChange={this.onNumber.bind(this)}\r\n                        type=\"number\"\r\n                        min={this.props.min}\r\n                        max={this.props.max}\r\n                        step={this.props.step}\r\n                        placeholder={this.props.placeholder}\r\n                        required={this.props.required}\r\n                        disabled={this.props.disabled}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <input\r\n                        ref={this.rangeRef}\r\n                        onChange={this.onSlide.bind(this)}\r\n                        type=\"range\"\r\n                        min={this.props.min}\r\n                        max={this.props.max}\r\n                        step={this.props.step}\r\n                        disabled={this.props.disabled}\r\n                        className=\"num-slider-slider\"\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    set value(n){\r\n        // must be in range\r\n        n = Math.max(this.props.min, n);\r\n        n = Math.min(n, this.props.max);\r\n\r\n        // update elements \r\n        this.numRef.current.value = n;\r\n        this.rangeRef.current.value = n;\r\n    }\r\n\r\n    get minText(){\r\n        return this.props.minText ? this.props.minText : this.props.min;\r\n    }\r\n\r\n    get maxText(){\r\n        return this.props.maxText ? this.props.maxText : this.props.max;\r\n    }\r\n\r\n    get value(){\r\n        return this.numRef.current.value;\r\n    }\r\n}","export const presets ={\r\n    //presets in the inputs go here\r\n    //seasonal flu\r\n   \"Seasonal Flu\":{\r\n       \"Infection Length\": 8,\r\n       \"Transmission\": 1.2,\r\n       \"Virulence\": 0.01\r\n   },\r\n   //smallpox\r\n   \"Smallpox\":{\r\n    \"Infection Length\": 14,\r\n    \"Transmission\": 2.5,\r\n    \"Virulence\": 0.25 \r\n   },\r\n   //polio\r\n   \"Polio\":{\r\n    \"Infection Length\": 18,\r\n    \"Transmission\": 1,\r\n    \"Virulence\": 0.01 \r\n   },\r\n   //measles\r\n   \"Measles\":{\r\n    \"Infection Length\": 8,\r\n    \"Transmission\": 10,\r\n    \"Virulence\": 0.01 \r\n   },\r\n   //Ebola\r\n   \"Ebola\":{\r\n    \"Infection Length\": 13,\r\n    \"Transmission\": 1.5,\r\n    \"Virulence\": 0.75 \r\n   },\r\n    //H1N1 Flu\r\n    \"H1N1 Flu\":{\r\n    \"Infection Length\": 8,\r\n    \"Transmission\": 1.6,\r\n    \"Virulence\": 0.01 \r\n    },\r\n    //H5N1 Flu\r\n   \"H5N1 Flu\":{\r\n    \"Infection Length\": 8,\r\n    \"Transmission\": 0.1,\r\n    \"Virulence\": 0.6 \r\n   },\r\n    //1918 Flu\r\n    \"1918 Flu\":{\r\n    \"Infection Length\": 8,\r\n    \"Transmission\": 2,\r\n    \"Virulence\": 0.03 \r\n    }\r\n}\r\nexport default presets;\r\n","import Simulator from \"./Simulator\";\r\nimport { EventEmitter } from './EventEmitter';\r\n\r\nclass GraphData extends EventEmitter{\r\n    constructor(){\r\n        super();\r\n\r\n        this._startDay = -1;\r\n        this._endDay = Number.MAX_SAFE_INTEGER;\r\n        this._trendLineY = 0;\r\n\r\n        this.extractTrendLine();\r\n    }\r\n\r\n    // extracts trend line from query strings\r\n    extractTrendLine(){\r\n        // query strings\r\n        let qs = new URLSearchParams(window.location.search);\r\n        \r\n        // get trend line as float (default 0)\r\n\t\tlet trendLineY = parseFloat(qs.get(\"trend_line\")) || 0;\r\n        this._trendLineY = trendLineY;\r\n    }\r\n\r\n    getData(keysDict){\r\n        let simData = Simulator.data;   // simulation data array\r\n        let labeledPoints = {};         // stores the points array in a dictionary (key=label)\r\n        let largestY = 0;               // largest y in data set\r\n\r\n        if(simData){\r\n            // start & end indeces \r\n            let start = this.startDay > -1 ? this.startDay : 0;\r\n            let end = this.endDay < simData.length ? this.endDay : (simData.length - 1);\r\n\r\n            for(let i = start; i <= end; i++){\r\n                let day = simData[i];\r\n\r\n                // label is 'Infected', 'Susceptible', etc (whatever is provided)\r\n                for(let label in keysDict){\r\n                    if(keysDict[label] !== true){\r\n                        continue;\r\n                    }\r\n\r\n                    // get y value (x is always the day/index)\r\n                    let y = parseFloat(day[label]);\r\n\r\n                    // create x, y point\r\n                    let pt = {x: i, y};\r\n\r\n                    // store the point to its associated label\r\n                    if(label in labeledPoints){\r\n                        labeledPoints[label].push(pt);\r\n                    }\r\n                    else{\r\n                        labeledPoints[label] = [pt];\r\n                    }\r\n\r\n                    // update largest Y\r\n                    largestY = Math.max(largestY, y);\r\n                }\r\n            }\r\n\r\n            // optional trend line points\r\n            if(this.trendLineY > 0){\r\n                // creates an array of [{x, y},...] where x is the day and y is the trend line Y\r\n                labeledPoints[\"TrendLine\"] = new Array(end - start).fill(null).map((val, index) => ({x: index + start, y: this.trendLineY}));\r\n            }\r\n        }\r\n\r\n        // convert sorted dictionary into an array\r\n        let values = [];\r\n        Object.keys(labeledPoints).forEach(key => values.push(labeledPoints[key]));\r\n\r\n        // gets all the labels that are in the dictionary and true (in order)\r\n        let labels = Object.keys(keysDict).filter(key => keysDict[key] === true);\r\n\r\n        return {values, largestY, labels};\r\n    }\r\n\r\n    // sets the start/end days\r\n    // (better to use this than setting start & end days individually due to 1 update)\r\n    setDaysRange(start, end){\r\n        this._startDay = start;\r\n        this._endDay = end;\r\n        this.emit(new Event(\"update\"));\r\n    }\r\n\r\n    set startDay(value){\r\n        this._startDay = value;\r\n        this.emit(new Event(\"update\"));\r\n    }\r\n\r\n    set endDay(value){\r\n        this._endDay = value;\r\n        this.emit(new Event(\"update\"));\r\n    }\r\n\r\n    set trendLineY(value){\r\n        this._trendLineY = value;\r\n        this.emit(new Event(\"update\"));\r\n    }\r\n\r\n    get startDay(){\r\n        return Math.max(0, this._startDay);\r\n    }\r\n\r\n    get endDay(){\r\n        return Math.min(this._endDay, Simulator.data ? Simulator.data.length : 0);\r\n    }\r\n\r\n    get trendLineY(){\r\n        return this._trendLineY;\r\n    }\r\n}\r\n\r\nexport default new GraphData();","import React from \"react\";\r\nimport { Row, Col, Form, FormGroup, Modal, ModalBody, ModalHeader, Dropdown, DropdownItem, DropdownMenu, DropdownToggle, Button, Input } from \"reactstrap\";\r\nimport Simulator from \"../Simulator\";\r\nimport ParamStorage from \"../ParamStorage\";\r\nimport { NumSlider } from \"./NumSlider\";\r\nimport preset from \"../preset\"\r\nimport GraphData from \"../GraphData\";\r\n\r\n// input range constraints (min, max, step)\r\nexport const INPUT_RANGES = {\r\n    INFECTION_LENGTH:   [1, 365, 1],\r\n    TRANSMISSION_RATE:  [0, 20, 0.01],\r\n    VIRULENCE:          [0, 1, 0.001],\r\n    INITIAL_POPULATION: [1, 1000000, 1],\r\n    IMMUNE_PERCENT:     [0, 1, 0.01],\r\n    INITIAL_INFECTED:   [0, 1000000, 1],\r\n    SIMULATION_LENGTH:  [1, 365, 1]\r\n};\r\n\r\nexport class Inputs extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        // input refs\r\n        this.intialImmunityRef = React.createRef();\r\n        this.transmissionRef = React.createRef();\r\n        this.virulenceRef = React.createRef();\r\n        this.initialInfectedRef = React.createRef();\r\n        this.intialPopRef = React.createRef();\r\n        this.infectionLengthRef = React.createRef();\r\n        this.daysRef = React.createRef();\r\n        this.presetRef = React.createRef();\r\n\r\n        // export refs\r\n        this.exportUrlRef = React.createRef();\r\n        this.csvFilenameElement = null;         // later to set an <input> (reactstrap inner ref)\r\n\r\n        this.state = {\r\n            pending: false,         // no new requests while pending (disable buttons)\r\n            message: null,          // message to display (errors)\r\n            isDisabled: false,      // to disable/enable fields depending on what preset is selected\r\n            exportModal: false,     // export options modal visibility\r\n            exportOption: null,\r\n            exportDropdown: false\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        Simulator.on(\"load\", this.onSimulatorLoad.bind(this));\r\n        Simulator.on(\"error\", this.onSimulatorError.bind(this));\r\n\r\n        // query string params?\r\n        this.extractQueryStringParams();\r\n\r\n        // test values?\r\n        if(new URLSearchParams(window.location.search).get(\"test\") === \"true\"){\r\n            this.useTestValues();\r\n        }\r\n    }\r\n    \r\n    // extracts optional query string parameters from the query string\r\n    extractQueryStringParams(){\r\n        // get query string data\r\n        let qs = new URLSearchParams(window.location.search);\r\n\r\n        // extract values from query string - set to the number value or default to min\r\n        // (setting value to below min will result in min)\r\n        this.initialInfectedRef.current.value = parseInt(qs.get(\"initial_infected\")) || -1;\r\n        this.intialImmunityRef.current.value =  parseFloat(qs.get(\"immune_percent\")) || -1;\r\n        this.intialPopRef.current.value =       parseInt(qs.get(\"initial_population\")) || -1;\r\n        this.virulenceRef.current.value =       parseFloat(qs.get(\"virulence\")) || -1;\r\n        this.daysRef.current.value =            parseInt(qs.get(\"simulation_length\")) || -1;\r\n        this.infectionLengthRef.current.value = parseInt(qs.get(\"infection_length\")) || -1;\r\n        this.transmissionRef.current.value =    parseFloat(qs.get(\"transmission_rate\")) || -1;\r\n    }\r\n\r\n    // changes the input parameters to predefined test values\r\n    useTestValues(){\r\n        // set values\r\n        this.initialInfectedRef.current.value = 500;\r\n        this.intialImmunityRef.current.value = 0.10;\r\n        this.intialPopRef.current.value = 1000000;\r\n        this.virulenceRef.current.value = 0.25;\r\n        this.daysRef.current.value = 365;\r\n        this.infectionLengthRef.current.value = 100;\r\n        this.transmissionRef.current.value = 0.2;\r\n\r\n        // force save\r\n        ParamStorage.saveParamsInputsDict(this.getInputsDictionary());\r\n    }\r\n\r\n    // creates a dictionary of all the inputs and their values (names formatted for the API call) \r\n    getInputsDictionary(){\r\n        // extract data from inputs to use in query string \r\n        let immune_percent =        this.intialImmunityRef.current.value,\r\n            transmission_rate =     this.transmissionRef.current.value,\r\n            virulence =             this.virulenceRef.current.value,\r\n            initial_infected =      this.initialInfectedRef.current.value,\r\n            initial_population =    this.intialPopRef.current.value,\r\n            infection_length =      this.infectionLengthRef.current.value,\r\n            simulation_length =     this.daysRef.current.value,\r\n            preset =                this.presetRef.current.value;\r\n\r\n        // make sure infected <= population\r\n        initial_infected = Math.min(initial_infected, initial_population);\r\n\r\n        // make sure immune percent is <= healthy population\r\n        let healthy = (initial_population - initial_infected) / initial_population;\r\n        immune_percent = Math.min(immune_percent, healthy);\r\n\r\n        // MUST match API expectations! \r\n        return {immune_percent, transmission_rate, virulence, initial_infected, initial_population, infection_length, simulation_length, preset};\r\n    }\r\n\r\n    onSimulatorError(){\r\n        this.setState({pending: false});    // enable buttons\r\n    }\r\n\r\n    onSimulatorLoad(){\r\n        this.setState({pending: false});    // enable buttons\r\n    }\r\n\r\n    // called when then the reset button is clicked\r\n    onReset(){\r\n        // cleared stored simulation data\r\n        Simulator.reset();\r\n    }\r\n\r\n    // downloads the csv file\r\n    downloadCSV(){\r\n        if(!this.state.pending){\r\n            // disable buttons\r\n            this.setState({pending: true});\r\n\r\n            // optional filename override\r\n            let filename = this.csvFilenameElement ? this.csvFilenameElement.value : null;\r\n\r\n            Simulator.downloadCSVFile(this.getInputsDictionary(), filename)\r\n                .catch(err => {\r\n                    // something went wrong (server did not respond or bad request)\r\n                    this.setState({message: err.message});\r\n                })\r\n                .then(() => {\r\n                    // (this fires when any response happens not successful only!)\r\n                    // always enable buttons\r\n                    this.setState({pending: false})\r\n                });\r\n        }\r\n    }\r\n\r\n    runSimulation(){\r\n        // no simulation data - load it (first simulation or reset happened)\r\n        if(!Simulator.hasData){\r\n            // disable buttons for loading time\r\n            this.setState({pending: true});\r\n\r\n            // load data then auto run\r\n            Simulator.load(this.getInputsDictionary())\r\n                .then(() => {\r\n                    this.setState({message: null}); // remove possible err message\r\n\r\n                    ParamStorage.saveParamsInputsDict(this.getInputsDictionary());  // save parameters\r\n                })\r\n                .catch(err => this.setState({message: err.message}));\r\n        }\r\n        else{\r\n            // verify current parameters are not the same as the ones already run\r\n            // (prevents reloading data that we already have!)\r\n            let currParams = ParamStorage.convertToTitleCase(this.getInputsDictionary());\r\n\r\n            if(ParamStorage.paramsNotLastSave(currParams)){\r\n                // parameters are different than last time\r\n                // run new simulation\r\n                Simulator.reset();      // triggers clearing graph/table and clears data\r\n                this.runSimulation();   // runs again, but sim will have no data\r\n            }\r\n        }\r\n    }\r\n\r\n    // called when the form is 'submitted'\r\n    // entire purpose is to block the sending of the form\r\n    // (submit enforces 'required', 'min', 'max' constraints)\r\n    onSubmit(evt){\r\n        // no default submission (using ajax instead)\r\n        evt.preventDefault();\r\n\r\n        this.runSimulation();\r\n    }\r\n\r\n    onPresetChange(){\r\n        let value = this.presetRef.current.value;\r\n        \r\n        if(value !== \"Custom\"){\r\n            this.setState({isDisabled: true});\r\n            this.infectionLengthRef.current.value = preset[value][\"Infection Length\"];\r\n            this.transmissionRef.current.value = preset[value][\"Transmission\"];\r\n            this.virulenceRef.current.value = preset[value][\"Virulence\"]\r\n        }else{\r\n            this.setState({isDisabled: false});\r\n        }\r\n    }\r\n\r\n    toggleExportModal(){\r\n        this.setState(prev => ({exportModal: !prev.exportModal}));\r\n    }\r\n\r\n    toggleExportDropdown(){\r\n        this.setState(prev => ({exportDropdown: !prev.exportDropdown}));\r\n    }\r\n\r\n    // moves the parameter storage day & updates UI inputs\r\n    switchParamSet(direction){\r\n        // move the day\r\n        if(direction === \"backwards\"){\r\n            ParamStorage.stepBackwards();\r\n        }\r\n        else if(direction === \"forwards\"){\r\n            ParamStorage.stepForwards();\r\n        }\r\n        else throw new Error(\"Parameter switch direction must be 'forwards' or 'backwards'.\");\r\n\r\n        // bail if nothing already saved\r\n        let params = ParamStorage.currentParams || null;\r\n        if(!params) return; // nothing saved\r\n\r\n        // fill out UI form\r\n        this.infectionLengthRef.current.value = params.infectionLength;\r\n        this.transmissionRef.current.value = params.transmissionRate;\r\n        this.virulenceRef.current.value = params.virulence;\r\n        this.intialPopRef.current.value = params.initialPopulation;\r\n        this.intialImmunityRef.current.value = params.immunePercent;\r\n        this.initialInfectedRef.current.value = params.initialInfected;\r\n        this.daysRef.current.value = params.simulationLength;\r\n\r\n        this.presetRef.current.value = params.preset;\r\n        this.onPresetChange();\r\n    }\r\n\r\n    getExportURL(){\r\n        let dict = this.getInputsDictionary();\r\n\r\n        let url = `${window.location.origin}?`;\r\n\r\n        for(let param in dict){\r\n            url += `${param}=${dict[param]}&`;\r\n        }\r\n\r\n        url += `trend_line=${GraphData.trendLineY}`;\r\n\r\n        return url;\r\n    }\r\n\r\n    copyLinkText(){\r\n        let elem = this.exportUrlRef.current;\r\n        if(elem){\r\n            elem.select();\r\n            document.execCommand(\"copy\");\r\n        }\r\n    }\r\n\r\n    renderExportOptBody(){\r\n        if(this.state.exportOption === \"csv\"){\r\n            return (\r\n                <div>\r\n                    <div>\r\n                        Exports a comma separated value (.csv) file containing the results displayed in the table.\r\n                        This file is easily accesible in Excel. \r\n                    </div>\r\n                    <br/>\r\n                    <div>\r\n                        <Input\r\n                            innerRef={element => this.csvFilenameElement = element}\r\n                            placeholder=\"Optional filename (.csv automatically appended)\"\r\n                            type=\"text\"\r\n                            maxLength={25}\r\n                        />        \r\n                    </div>\r\n                    <br/>\r\n                    <div>\r\n                        <Button color=\"fade\" onClick={this.downloadCSV.bind(this)}>Download CSV</Button>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        else if(this.state.exportOption === \"sim-link\"){\r\n            return (\r\n                <div>\r\n                    <div>\r\n                        Exports a URL for this application with preset values that can be shared.\r\n                    </div>\r\n                    <br/>\r\n                    <div>\r\n                        <textarea ref={this.exportUrlRef} className=\"modal-url-text\" defaultValue={this.getExportURL()} readOnly>\r\n                        </textarea>\r\n                    </div>\r\n                    <br/>\r\n                    <div>\r\n                        <Button color=\"fade\" onClick={this.copyLinkText.bind(this)}>Copy Link</Button>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        return (\r\n            <div>\r\n                Please select an export option.\r\n            </div>\r\n        )\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <div id=\"inputs-header-container\" className=\"text-center\">\r\n                    <button onClick={() => this.switchParamSet(\"backwards\")}>&larr;</button>\r\n                    <h5 className=\"text-center\">Experimental Variables</h5>\r\n                    <button onClick={() => this.switchParamSet(\"forwards\")}>&rarr;</button>\r\n                </div>\r\n                <br/>\r\n                <form onSubmit={this.onSubmit.bind(this)}>\r\n                    <div className=\"row\">\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <NumSlider\r\n                                label={\"Length of Infection (Days)\"}\r\n                                showRange={true}\r\n                                min={INPUT_RANGES.INFECTION_LENGTH[0]}\r\n                                max={INPUT_RANGES.INFECTION_LENGTH[1]}\r\n                                step={INPUT_RANGES.INFECTION_LENGTH[2]}\r\n                                required={true}\r\n                                ref={this.infectionLengthRef}\r\n                                disabled={this.state.isDisabled}\r\n                            />\r\n                        </div>\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <NumSlider\r\n                                label={\"Transmission Rate\"}\r\n                                showRange={true}\r\n                                min={INPUT_RANGES.TRANSMISSION_RATE[0]}\r\n                                max={INPUT_RANGES.TRANSMISSION_RATE[1]}\r\n                                step={INPUT_RANGES.TRANSMISSION_RATE[2]}\r\n                                required={true}\r\n                                ref={this.transmissionRef}\r\n                                disabled={this.state.isDisabled}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <NumSlider\r\n                                label={\"Virulence\"}\r\n                                showRange={true}\r\n                                min={INPUT_RANGES.VIRULENCE[0]}\r\n                                max={INPUT_RANGES.VIRULENCE[1]}\r\n                                step={INPUT_RANGES.VIRULENCE[2]}\r\n                                required={true}\r\n                                ref={this.virulenceRef}\r\n                                disabled={this.state.isDisabled}\r\n                            />\r\n                        </div>\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <NumSlider\r\n                                label={\"Initial Population\"}\r\n                                showRange={true}\r\n                                min={INPUT_RANGES.INITIAL_POPULATION[0]}\r\n                                max={INPUT_RANGES.INITIAL_POPULATION[1]}\r\n                                step={INPUT_RANGES.INITIAL_POPULATION[2]}\r\n                                required={true}\r\n                                ref={this.intialPopRef}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <NumSlider\r\n                                label={\"Initial Immunity Percent\"}\r\n                                showRange={true}\r\n                                min={INPUT_RANGES.IMMUNE_PERCENT[0]}\r\n                                max={INPUT_RANGES.IMMUNE_PERCENT[1]}\r\n                                step={INPUT_RANGES.IMMUNE_PERCENT[2]}\r\n                                required={true}\r\n                                ref={this.intialImmunityRef}\r\n                            />\r\n                        </div>\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <NumSlider\r\n                                label={\"Initial Infected\"}\r\n                                showRange={true}\r\n                                min={INPUT_RANGES.INITIAL_INFECTED[0]}\r\n                                max={INPUT_RANGES.INITIAL_INFECTED[1]}\r\n                                step={INPUT_RANGES.INITIAL_INFECTED[2]}\r\n                                maxText={\"Population\"}\r\n                                required={true}\r\n                                ref={this.initialInfectedRef}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <NumSlider\r\n                                label={\"Simulation Length (Days)\"}\r\n                                showRange={true}\r\n                                min={INPUT_RANGES.SIMULATION_LENGTH[0]}\r\n                                max={INPUT_RANGES.SIMULATION_LENGTH[1]}\r\n                                step={INPUT_RANGES.SIMULATION_LENGTH[2]}\r\n                                required={true}\r\n                                ref={this.daysRef}\r\n                            />\r\n                        </div>\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <label>Presets:</label>\r\n                            <select ref={this.presetRef} className=\"form-control\" onChange={this.onPresetChange.bind(this)}>\r\n                                <option>Custom</option>\r\n                                <option>Seasonal Flu</option>\r\n                                <option>Smallpox</option>\r\n                                <option>Polio</option>\r\n                                <option>Measles</option>\r\n                                <option>Ebola</option>\r\n                                <option>H1N1 Flu</option>\r\n                                <option>H5N1 Flu</option>\r\n                                <option>1918 Flu</option>\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group text-center\">\r\n                        <button className=\"input-btn\" disabled={this.state.pending}>Run</button>&nbsp;\r\n                        <button onClick={this.onReset.bind(this)} className=\"input-btn\" disabled={this.state.pending} type=\"button\" >Reset</button>&nbsp;\r\n                        <button onClick={this.toggleExportModal.bind(this)} className=\"input-btn\" disabled={this.state.pending} type=\"button\" >Exports</button>\r\n                    </div>\r\n                </form>\r\n                <div>{this.state.message}</div>\r\n                <Modal isOpen={this.state.exportModal}>\r\n                    <ModalHeader toggle={this.toggleExportModal.bind(this)}>\r\n                        <Dropdown isOpen={this.state.exportDropdown} toggle={this.toggleExportDropdown.bind(this)}>\r\n                            <DropdownToggle color=\"fade\" caret>\r\n                                Export Options\r\n                            </DropdownToggle>\r\n                            <DropdownMenu>\r\n                                <DropdownItem onClick={() => this.setState({exportOption: \"csv\"})}>\r\n                                    Table CSV\r\n                                </DropdownItem>\r\n                                <DropdownItem onClick={() => this.setState({exportOption: \"sim-link\"})}>\r\n                                    Simulation Link\r\n                                </DropdownItem>\r\n                            </DropdownMenu>\r\n                        </Dropdown>\r\n                    </ModalHeader>\r\n                    <ModalBody>\r\n                        <div>\r\n                            {this.renderExportOptBody()}\r\n                        </div>\r\n                    </ModalBody>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport ReactModal from \"react-modal\"\r\nimport { Ajax } from \"../Ajax\";\r\n\r\nexport class MailModal extends React.Component{\r\n\r\n\tconstructor(props){\r\n        super(props);\r\n\r\n        // input refs\r\n        this.textRef = React.createRef();\r\n        this.errorRef = React.createRef();\r\n        this.headerRef = React.createRef();\r\n\r\n        this.type = null;\r\n        this.typeError = true;\r\n        this.errorTime = false;\r\n        this.errorMsg = \"\";\r\n\r\n        this.state = { \r\n\t\t\tother: false,\r\n\t\t\terrMessage:null,\r\n\t\t\tsuccessMessage:null,\r\n\t\t\tdisabled: false\r\n        };\r\n\r\n        //Modal.setAppElement(this.props.app);\r\n\t}\r\n\r\n\tcomponentDidUpdate(prevProps){\r\n\t\t// clear messages when the visibility changes\r\n\t\tif(prevProps.showModal && !this.props.showModal){\r\n\t\t\tthis.setState({errMessage: null, successMessage: null});\r\n\t\t}\r\n\t}\r\n\r\n\t// on click of submit button \r\n\tsubmitClick(e){\r\n\t\tthis.setState({errMessage:null});\r\n\t\te.preventDefault();\r\n\t\tlet goodHeader = this.headerRef.current ? (this.headerRef.current.value.length > 0) : true;\r\n\t\tif(this.type != null && this.textRef.current.value != \"\" && goodHeader){\r\n\t\t\tlet message = this.BuildArray();\r\n\r\n\t\t\t// localhost = dev, else = prod\r\n\t\t\tlet origin = window.location.origin.includes(\"localhost\") ? \"http://localhost:8080\" : window.location.origin;\r\n\r\n\t\t\t// sending message, disable send button\r\n\t\t\tthis.setState({successMessage: \"Sending...\", errMessage: null, disabled: true});\r\n\r\n\t\t\tAjax.post(`${origin}/mail`, null, message)\r\n\t\t\t\t.then(xhr => {  \r\n                    // ajax resolved (could be bad/good request, but server responded)\r\n                    if(xhr.status === 200){\r\n\t\t\t\t\t\t// good request - attempt to parse results json\r\n\t\t\t\t\t\tthis.setState({successMessage:\"Submit Successful\", errMessage: null, disabled: false});\r\n                    }\r\n                    else{\r\n\t\t\t\t\t\t// bad request\r\n\t\t\t\t\t\tthis.setState({errMessage:\"Bad Request Error\", successMessage: null, disabled: false});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\t// clear inputs\r\n\t\t\t\t\tif(this.headerRef.current){\r\n\t\t\t\t\t\tthis.headerRef.current.value = \"\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.textRef.current.value = \"\";\r\n                })\r\n                .catch(err => {\r\n                    // ajax request died (really bad NOT a 400 error!)\r\n\t\t\t\t\tthis.setState({errMessage:\"Cannot reach server\", disabled: false});// request died signal\r\n                });\r\n\t\t}\r\n\t}\r\n\t\r\n\t//Build the JSON array that is sent over the Ajax request\r\n\tBuildArray(){\r\n\t\t//get the text in the the message textarea\r\n\t\tlet text = this.textRef.current.value;\r\n\t\t//\r\n        let type = \"\";\r\n\r\n        if(this.state.other){\r\n        \ttype = this.headerRef.current.value;\r\n        }else{\r\n        \ttype = this.type;\r\n        }\r\n\r\n        // MUST match API expectations! \r\n        return {type,text};\r\n    }\r\n\r\n\t// on change of radio button set type\r\n\tonTypeSelect(type){\r\n\t\t//get the type of the radio button selected\r\n\t \tthis.type = type;\r\n\r\n\t\t// check to see if other is selected\r\n\t\tthis.setState({other: this.type === \"other\"});\r\n\r\n\t \tthis.typeError = false;\r\n\t }\r\n\r\n\t //Check if other is selcted and load elements based on that\r\n \t TypeOther(){\r\n\t \tif(!this.state.other){\r\n\t\t\t // remove element of screen\r\n\t \t\treturn null;\r\n\t \t}else{\r\n\t\t\t //load element onto screen\r\n\t \t\treturn(\r\n\t \t\t\t<div>\r\n\t \t\t\t\t<label>Other: </label> <input type=\"text\" placeholder=\"Input for other\" ref={this.headerRef} required/>\r\n\t \t\t\t</div>\r\n\t \t\t);\r\n\t \t}\r\n\t }\r\n\t \r\n\trender(){\r\n\t\treturn this.props.showModal ? (\r\n\t\t\t<div>\r\n\t\t\t\t<ReactModal isOpen={this.props.showModal} >\r\n\t\t\t\t\t<div className=\"col-lg-1\">\r\n\t\t\t  \t\t\t<span className=\"pointer\" onClick={this.props.closeModal}>&times;</span>\r\n\t\t\t  \t\t</div>\r\n\t\t\t  \t\t<div className=\"container border\">\r\n\t\t\t\t\t  <form onSubmit={this.submitClick.bind(this)}>\r\n\t\t\t\t\t  \t\t<div>\r\n\t\t\t\t\t\t\t\t<div className=\"header center\">\r\n\t\t\t\t\t\t\t\t\t<h2 className=\"modalHeader\">Contact Us</h2>\r\n\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t<span className=\"error\">\r\n\t\t\t\t\t\t\t\t\t\t{this.state.errMessage}\r\n\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t\t<span className=\"success\">\r\n\t\t\t\t\t\t\t\t\t\t{this.state.successMessage}\r\n\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div className=\"form-group center\">\r\n\t\t\t\t\t\t\t\t\t<input type=\"radio\" onChange={() => this.onTypeSelect(\"Bug Report\")} name=\"types\" value=\"problem\" required/>Have a problem?\r\n\t\t\t\t\t\t\t\t\t&nbsp;\r\n\t\t\t\t\t\t\t\t\t<input type=\"radio\" onChange={() => this.onTypeSelect(\"Feature Request\")} name=\"types\" value=\"idea\" required/>Have an idea?\r\n\t\t\t\t\t\t\t\t\t&nbsp;\r\n\t\t\t\t\t\t\t\t\t<input type=\"radio\" onChange={() => this.onTypeSelect(\"other\")} name=\"types\" value=\"other\" required/>Other\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div className=\"form-group center\">\r\n\t\t\t\t\t\t\t\t\t{this.TypeOther()}\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div className=\"form-group center\">\r\n\t\t\t\t\t\t\t\t\t<textarea className=\"modal-text-area\" placeholder=\"Type message in here.\" ref={this.textRef} required></textarea>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div className=\"form-group center\">\r\n\t\t\t\t\t\t\t\t\t<input className=\"input-btn\" type=\"submit\" disabled={this.state.disabled} />\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</form>\r\n\t\t\t\t\t</div>\r\n      \t\t\t</ReactModal>\r\n\t\t\t</div>\r\n\t\t) : null;\r\n\t}\r\n}","import React from \"react\";\r\nimport { Dropdown, DropdownToggle, DropdownMenu, DropdownItem, Navbar as RNavbar, NavItem, Collapse, NavbarToggler, Nav, NavLink } from \"reactstrap\";\r\nimport { MailModal } from \"./MailModal\"\r\nimport Simulator from \"../Simulator\";\r\n\r\nexport class Navbar extends React.Component{\r\n\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\r\n\t    this.state = {\r\n\t\t\tshowNav: false,\t\t\t// navbar collapse\r\n\t\t\tshowModal: false,\t\t// mail modal visibility\r\n\t\t\tshowAdvanced: false\t\t// advanced dropdown menu visibility\r\n\t    };\r\n\r\n\t}\r\n\r\n\t// close the mail modal\r\n\tcloseModal(){\r\n\t\tthis.setState({showModal: false});\r\n\t}\r\n\r\n\t// show the mail modal\r\n\topenModal(){\r\n\t\tthis.setState({showModal: true});\r\n\t}\r\n\r\n\t// toggles the navbar collapse state\r\n\ttoggleNavbar(){\r\n\t\tthis.setState(prev => ({showNav: !prev.showNav}));\r\n\t}\r\n\r\n\t// toggle advanced dropdown\r\n\ttoggleDropdown(){\r\n\t\tthis.setState(prev => ({showAdvanced: !prev.showAdvanced}));\r\n\t}\r\n\r\n\t// advanced dropdown error correction option toggle\r\n\ttoggleErrorCorrection(){\r\n\t\tSimulator.isErrCorrecting = !Simulator.isErrCorrecting;\r\n\t}\r\n\r\n\trender(){\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<RNavbar color=\"light\" light expand=\"md\">\r\n\t\t\t\t\t<NavbarToggler color=\"dark\" onClick={this.toggleNavbar.bind(this)}/>\r\n\t\t\t\t\t<Collapse isOpen={this.state.showNav} navbar>\r\n\t\t\t\t\t\t<Nav navbar>\r\n\t\t\t\t\t\t\t<NavItem>\r\n\t\t\t\t\t\t\t\t<NavLink  className=\"pointer\" selected onClick={this.openModal.bind(this)}>Contact Us</NavLink>\r\n\t\t\t\t\t\t\t</NavItem>\r\n\t\t\t\t\t\t\t<NavItem>\r\n\t\t\t\t\t\t\t\t<Dropdown isOpen={this.state.showAdvanced} toggle={this.toggleDropdown.bind(this)}>\r\n\t\t\t\t\t\t\t\t\t\t<DropdownToggle caret color=\"light\">\r\n\t\t\t\t\t\t\t\t\t\t\tAdvanced\r\n\t\t\t\t\t\t\t\t\t\t</DropdownToggle>\r\n\t\t\t\t\t\t\t\t\t\t<DropdownMenu>\r\n\t\t\t\t\t\t\t\t\t\t\t<DropdownItem onClick={this.toggleErrorCorrection.bind(this)}>\r\n\t\t\t\t\t\t\t\t\t\t\t\tToggle Error Correction (Currently {Simulator.isErrCorrecting ? \"Enabled\" : \"Disabled\"})\r\n\t\t\t\t\t\t\t\t\t\t\t</DropdownItem>\r\n\t\t\t\t\t\t\t\t\t\t</DropdownMenu>\r\n\t\t\t\t\t\t\t\t\t</Dropdown>\r\n\t\t\t\t\t\t\t</NavItem>\r\n\t\t\t\t\t\t</Nav>\r\n\t\t\t\t\t</Collapse>\r\n\t\t\t\t</RNavbar>\r\n\t\t\t\t<MailModal showModal={this.state.showModal} closeModal={this.closeModal.bind(this)} />\r\n\t      \t</div>\r\n\t\t);\r\n\t}\r\n}","import React from \"react\";\r\nimport Simulator from \"../Simulator\";\r\n\r\nexport class Table extends React.Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\tvisible: false\t//true/false if simulator data to render\r\n\t\t};\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\t// simulator singles data set loaded - render data\r\n\t\tSimulator.on(\"data\", () => this.setState({visible: true}));\r\n\r\n\t\t// simulator signals a reset - nothing to render\r\n\t\tSimulator.on(\"reset\", () => this.setState({visible: false}));\r\n\t}\r\n\r\n\r\n\tgetStyleForDay(index){\r\n\t\tlet style = null;\r\n\r\n\t\tif(Simulator.firstInvalidDay > -1){\r\n\t\t\tif(index === Simulator.firstInvalidDay){\r\n\t\t\t\t// this row is first invalid day\r\n\t\t\t\tstyle = {\r\n\t\t\t\t\tborderLeft: \"5px solid red\",\r\n\t\t\t\t\tborderRight: \"5px solid red\"\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\telse if(index > Simulator.firstInvalidDay){\r\n\t\t\t\t// subsequent invalid days\r\n\t\t\t\tstyle = {\r\n\t\t\t\t\tborderLeft: \"1px solid red\",\r\n\t\t\t\t\tborderRight: \"1px solid red\"\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t}\t\t\r\n\r\n\t\treturn style;\r\n\t}\r\n\r\n\t// renders table rows up to the current simulation day\r\n\trenderRows(){\r\n\t\tlet data = Simulator.data;\r\n\r\n\t\tif(data){\r\n\t\t\tlet rows = new Array(data.length + 1);\r\n\r\n\t\t\tdata.forEach((dayData, index) => {\r\n\t\t\t\t// extract data\r\n\t\t\t\tlet susceptible = \tMath.round(dayData.Susceptible),\r\n\t\t\t\t\tinfected = \t\tMath.round(dayData.Infected),\r\n\t\t\t\t\timmune = \t\tMath.round(dayData.Immune),\r\n\t\t\t\t\tdead = \t\t\tMath.round(dayData.Dead),\r\n\t\t\t\t\tpopulation = \tMath.round(dayData.TotalPopulation);\r\n\r\n\t\t\t\t// get the style (for data correction)\r\n\t\t\t\tlet style = this.getStyleForDay(index);\r\n\r\n\t\t\t\t// create table row\r\n\t\t\t\t// (toLocalString adds the ',' as the number grows in thousands)\r\n\t\t\t\trows[index] = (\r\n\t\t\t\t\t<tr key={index} style={style}>\r\n\t\t\t\t\t\t<td>{index}</td>\r\n\t\t\t\t\t\t<td>{susceptible.toLocaleString()}</td>\r\n\t\t\t\t\t\t<td>{infected.toLocaleString()}</td>\r\n\t\t\t\t\t\t<td>{immune.toLocaleString()}</td>\r\n\t\t\t\t\t\t<td>{dead.toLocaleString()}</td>\r\n\t\t\t\t\t\t<td>{population.toLocaleString()}</td>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t);\r\n\t\t\t});\r\n\r\n\t\t\treturn rows;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n\r\n\trender(){\r\n\t\treturn this.state.visible ? (\r\n\t\t\t<div>\r\n\t\t\t\t<table className=\"table table-striped overflow-table\">\r\n\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t<th>Day</th>\r\n\t\t\t\t\t\t\t<th>Susceptible</th>\r\n\t\t\t\t\t\t\t<th>Infected</th>\r\n\t\t\t\t\t\t\t<th>Immune</th>\r\n\t\t\t\t\t\t\t<th>Dead</th>\r\n\t\t\t\t\t\t\t<th>Total Population</th>\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t</thead>\r\n\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t{this.renderRows()}\r\n\t\t\t\t\t</tbody>\r\n\t\t\t\t</table>\r\n\t\t\t\t<div className=\"text-center\">\r\n\t\t\t\t\t{Simulator.firstInvalidDay > -1 ? `* Error correction begins on day ${Simulator.firstInvalidDay} *` : null}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t) : null;\r\n\t}\r\n}","import \"./GraphRange.css\"\r\nimport React from \"react\";\r\nimport GraphData from \"../GraphData\";\r\n\r\nexport class GraphRange extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.lowerRef = React.createRef();\r\n        this.upperRef = React.createRef();\r\n    }\r\n\r\n    onChangeLow(){\r\n        let lowValue = this.lowerRef.current.value,\r\n            low = parseInt(lowValue);\r\n\r\n        if(lowValue.length){\r\n            let high = this.selectedMax || this.props.max;\r\n\r\n            low = Math.max(this.props.min, low);\r\n            low = Math.min(low, high - 1);\r\n\r\n            this.lowerRef.current.value = low;\r\n\r\n            GraphData.startDay = low;\r\n        }\r\n    }\r\n\r\n    onChangeHigh(){\r\n        let highValue = this.upperRef.current.value,\r\n            high = parseInt(highValue);\r\n\r\n        if(highValue.length){\r\n            let low = this.selectedMin || this.props.min;\r\n\r\n            high = Math.max(low + 1, high);\r\n            high = Math.min(high, this.props.max);\r\n\r\n            this.upperRef.current.value = high;\r\n\r\n            GraphData.endDay = high;\r\n        }\r\n    }\r\n\r\n    onSubmit(evt){\r\n        evt.preventDefault();\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"graph-range-container\">\r\n                <form onSubmit={this.onSubmit.bind(this)}>\r\n                    <input\r\n                        ref={this.lowerRef}\r\n                        min={this.props.min}\r\n                        max={this.props.max}\r\n                        step={1}\r\n                        defaultValue={this.props.min}\r\n                        placeholder=\"Start\"\r\n                        type=\"number\"\r\n                        required\r\n                        onChange={this.onChangeLow.bind(this)}\r\n                    />&nbsp;\r\n                    <input\r\n                        ref={this.upperRef}\r\n                        min={this.props.min}\r\n                        max={this.props.max}\r\n                        step={1}\r\n                        defaultValue={this.props.max}\r\n                        placeholder=\"End\"\r\n                        type=\"number\"\r\n                        required\r\n                        onChange={this.onChangeHigh.bind(this)}\r\n                    />\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    get selectedMin(){\r\n        return parseFloat(this.lowerRef.current.value) || this.props.min;\r\n    }\r\n\r\n    get selectedMax(){\r\n        return parseFloat(this.upperRef.current.value) || this.props.max;\r\n    }\r\n}","import \"./TrendLine.css\";\r\nimport React from \"react\";\r\nimport GraphData from \"../GraphData\";\r\n\r\nexport class TrendLine extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.rangeRef = React.createRef();\r\n        this.numRef = React.createRef();\r\n    }\r\n\r\n    onSlide(){\r\n        let val = this.rangeRef.current.value;\r\n        GraphData.trendLineY = parseInt(val);\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"trend-line-container\">\r\n                <input\r\n                    className=\"trend-slider\"\r\n                    ref={this.rangeRef}\r\n                    type=\"range\"\r\n                    min={this.props.min || 0}\r\n                    max={this.props.max}\r\n                    step={100}\r\n                    defaultValue={this.props.defaultValue || 0}\r\n                    onChange={this.onSlide.bind(this)}\r\n                />\r\n                <div className=\"trend-line-text\">\r\n                    Trend Line\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    get value(){\r\n        return this.rangeRef.current.value;\r\n    }\r\n}","import React from \"react\";\r\nimport { LineChart } from \"react-easy-chart\"\r\nimport Simulator from \"../Simulator\";\r\nimport GraphData from \"../GraphData\";\r\nimport { GraphRange } from \"./GraphRange\";\r\nimport { TrendLine } from \"./TrendLine\";\r\n\r\n// graph size constants\r\nconst WIDTH = \t\t540,\r\n\tHEIGHT = \t\t475,\r\n\tMARGIN_TOP = \t10,\r\n\tMARGIN_BOTTOM =\t50,\r\n\tMARGIN_LEFT = \t80,\r\n\tMARGIN_RIGHT = \t10;\r\n\r\n// graph line colors\r\nconst COLORS = {\r\n\t\"Infected\": \t\"green\",\r\n\t\"Susceptible\": \t\"red\",\r\n\t\"Immune\": \t\t\"steelblue\",\r\n\t\"Dead\": \t\t\"gray\",\r\n\t\"TrendLine\":\t\"black\"\r\n};\r\n\r\nexport class Graph extends React.Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\r\n\t\tthis.graphContainerRef = React.createRef();\r\n\t\t\r\n\t    this.state = {\r\n\t\t\tvisible: false,\t\t\t\t\t\t// true/false if simulator data to render\r\n\t\t\ttooltip: null,\t\t\t\t\t\t// text to display\r\n\t\t\tcontainerWidth: WIDTH,\t\t\t\t// line graph parent width\r\n\t\t\tgraphLabels: {}\t\t\t\t\t\t// selected graph labels (Infected, Susceptible, etc)\r\n\t    };\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\t// auto select infected\r\n\t\tthis.toggleLabel(\"Infected\");\r\n\r\n\t\t// simulator singles data set loaded - render data\r\n\t\tSimulator.on(\"data\", () => this.setState({visible: true}));\r\n\r\n\t\t// simulator reset - nothing to render\r\n\t\tSimulator.on(\"reset\", () => this.setState({visible: false}));\r\n\r\n\t\t// graph update\r\n\t\tGraphData.on(\"update\", () => this.forceUpdate());\r\n\r\n\t\t// when the window size changes - resize the graph if neccessary\r\n\t\twindow.addEventListener(\"resize\", this.onResize.bind(this));\r\n\t\tthis.onResize();\r\n\t}\r\n\r\n\tcomponentDidUpdate(prevProps, prevState){\r\n\t\tif(prevState.yLabel !== this.state.yLabel){\r\n\t\t\tthis.setState({tooltip: null});\r\n\t\t}\r\n\t}\r\n\t\r\n\t// when a label ('Infected', 'Susceptible', etc) is clicked...\r\n\ttoggleLabel(label){\r\n\t\t// copy labels dictionary\r\n\t\tlet nextLabels = Object.assign({}, this.state.graphLabels);\r\n\r\n\t\t// toggle parameter label\r\n\t\tif(label in nextLabels){\r\n\t\t\tnextLabels[label] = !nextLabels[label];\r\n\t\t}\r\n\t\telse{\r\n\t\t\tnextLabels[label] = true;\r\n\t\t}\r\n\r\n\t\t// update state\r\n\t\tthis.setState({graphLabels: nextLabels});\r\n\t}\r\n\r\n\t// when a point on the graph is clicked...\r\n\tonGraphClick(data, evt){\r\n\t\tlet {x, y} = data;\r\n\t\tthis.setState({tooltip: `${Math.round(y)} people on day ${x}.`});\r\n\t}\r\n\r\n    onResize(){\r\n        // updates the state to reflect the maximum size allowed for the graph\r\n        let element = this.graphContainerRef.current;\r\n\t\tif(element){\r\n\t\t\tthis.setState({containerWidth: element.getBoundingClientRect().width});\r\n\t\t}\r\n    }\r\n\r\n\t// renders a simple HTML key for the graph line/colors\r\n\trenderLabelButtons(){\r\n\t\tlet labels = this.state.graphLabels;\r\n\r\n\t\t// border style for button (null = no change)\r\n\t\tlet borders = [\r\n\t\t\t(labels.Infected === true) ? `2px solid ${COLORS.Infected}` : null,\r\n\t\t\t(labels.Susceptible === true) ? `2px solid ${COLORS.Susceptible}` : null,\r\n\t\t\t(labels.Immune === true) ? `2px solid ${COLORS.Immune}` : null,\r\n\t\t\t(labels.Dead === true) ? `2px solid ${COLORS.Dead}` : null\r\n\t\t];\r\n\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<button style={{color: COLORS[\"Infected\"], borderBottom: borders[0]}} onClick={() => this.toggleLabel(\"Infected\")} className=\"pointer graph-button\">Infected</button>\r\n\t\t\t\t<button style={{color: COLORS[\"Susceptible\"], borderBottom: borders[1]}} onClick={() => this.toggleLabel(\"Susceptible\")} className=\"pointer graph-button\">Susceptible</button>\r\n\t\t\t\t<button style={{color: COLORS[\"Immune\"], borderBottom: borders[2]}} onClick={() => this.toggleLabel(\"Immune\") }className=\"pointer graph-button\">Immune</button>\r\n\t\t\t\t<button style={{color: COLORS[\"Dead\"], borderBottom: borders[3]}} onClick={() => this.toggleLabel(\"Dead\")} className=\"pointer graph-button\">Dead</button>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\r\n\t// exports the current svg graph to a jpg file \r\n\tdownloadJPG(){\r\n\t\tlet container = this.graphContainerRef.current;\r\n\t\tif(container){\r\n\t\t\t// get svg element\r\n\t\t\tlet svgElement = container.querySelector(\"svg\");\r\n\r\n\t\t\t// create canvas\r\n\t\t\tlet canvas = document.createElement(\"canvas\");\r\n\t\t\tlet ctx = canvas.getContext(\"2d\");\r\n\r\n\t\t\t// resize canvas to svg\r\n\t\t\tcanvas.width = svgElement.getAttribute(\"width\");\r\n\t\t\tcanvas.height = svgElement.getAttribute(\"height\");\r\n\r\n\t\t\t// convert svg element to xml \r\n\t\t\tlet svgXml = new XMLSerializer().serializeToString(svgElement);\r\n\r\n\t\t\t// create a data url from the svg+xml\r\n\t\t\tlet blob = new Blob([svgXml], {type: \"image/svg+xml\"});\r\n\t\t\tlet svgUrl = window.URL.createObjectURL(blob);\r\n\r\n\t\t\t// create an image to hold the svg data url \r\n\t\t\tlet svgImage = document.createElement(\"img\");\r\n\r\n\t\t\t// when the svgxml image loads...\r\n\t\t\tsvgImage.onload = () => {\r\n\t\t\t\t// draw svg+xml onto canvas\r\n\t\t\t\tctx.imageSmoothingEnabled = true;\r\n\t\t\t\tctx.imageSmoothingQuality = \"high\";\r\n\t\t\t\tctx.drawImage(svgImage, 0, 0);\r\n\r\n\t\t\t\t// remove black background for white \r\n\t\t\t\tctx.globalCompositeOperation = \"destination-over\";\r\n\t\t\t\tctx.fillStyle = \"white\";\r\n\t\t\t\tctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n\t\t\t\t// get jpg data\r\n\t\t\t\tlet jpg = document.createElement(\"img\");\r\n\t\t\t\tjpg.onload = () => {\r\n\t\t\t\t\t// jpg is rasterized svg\r\n\t\t\t\t\t// (implement download here)\r\n\t\t\t\t\t//document.body.appendChild(jpg);\r\n\t\t\t\t\twindow.URL.revokeObjectURL(svgUrl);\r\n\t\t\t\t}\r\n\t\t\t\tjpg.setAttribute(\"src\", canvas.toDataURL(\"image/jpeg\"));\r\n\t\t\t};\r\n\r\n\t\t\t// load the svgxml data\r\n\t\t\tsvgImage.setAttribute(\"src\", svgUrl);\r\n\t\t}\r\n\t}\r\n\r\n\trender(){\r\n\t\tif(this.state.visible){\r\n\t\t\tlet data = GraphData.getData(this.state.graphLabels);\r\n\t\t\tlet dayCount = data.values.length ? data.values[0].length : 0;\r\n\t\t\tlet width = Math.min(this.state.containerWidth, WIDTH);\r\n\r\n\t\t\treturn (\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<h5>{data.labels.join(\" + \") || \"(Nothing Selected)\"}</h5>\r\n\t\t\t\t\t{this.renderLabelButtons()}\r\n\t\t\t\t\t<div ref={this.graphContainerRef}>\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<LineChart\r\n\t\t\t\t\t\t\t\tdata={data.values}\r\n\t\t\t\t\t\t\t\twidth={width}\r\n\t\t\t\t\t\t\t\theight={HEIGHT}\r\n\t\t\t\t\t\t\t\tmargin={{\r\n\t\t\t\t\t\t\t\t\ttop: MARGIN_TOP, bottom: MARGIN_BOTTOM,\r\n\t\t\t\t\t\t\t\t\tleft: MARGIN_LEFT, right: MARGIN_RIGHT\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\taxes\r\n\t\t\t\t\t\t\t\taxisLabels={{x: \"Days Elapsed\", y: \"People\"}}\r\n\t\t\t\t\t\t\t\tdataPoints={dayCount < 0} // enable this later\r\n\t\t\t\t\t\t\t\txDomainRange={[GraphData.startDay, GraphData.endDay]}\r\n\t\t\t\t\t\t\t\tyDomainRange={[0, data.largestY]}\r\n\t\t\t\t\t\t\t\tlineColors={data.labels.map(label => COLORS[label])}\r\n\t\t\t\t\t\t\t\tclickHandler={this.onGraphClick.bind(this)}\r\n\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\t\".label\": {fill: \"black\"},\r\n\t\t\t\t\t\t\t\t\t\".axis\": {fontSize: \"0.75em\", fontFamily: \"arial\"}\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t<TrendLine max={data.largestY}/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<GraphRange\r\n\t\t\t\t\t\t\tmin={0}\r\n\t\t\t\t\t\t\tmax={Simulator.data.length - 1 || 0}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"text-center\">\r\n\t\t\t\t\t\t{this.state.tooltip}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t\treturn <div ref={this.graphContainerRef}></div> // required for resize to work! \r\n\t}\r\n} ","import \"../lib/bootstrap.min.css\";\r\nimport \"./App.css\";\r\nimport React from \"react\";\r\nimport { Container, Row, Col, Card, CardBody } from \"reactstrap\";\r\nimport { Inputs } from \"./Inputs\";\r\nimport { Navbar } from \"./Navbar\";\r\nimport { Table } from \"./Table\";\r\nimport { Graph } from \"./Graph\";\r\n\r\nexport class App extends React.Component{\r\n    render(){\r\n        return (\r\n            <div>\r\n                <Navbar/>\r\n                <br/>\r\n                <span className=\"Version\">V0.2</span>\r\n                <main>\r\n                    <Container>\r\n                        <Card color=\"light\">\r\n                            <CardBody>\r\n                                <Row className=\"text-center\">\r\n                                    <Col lg={6}>\r\n                                        <Inputs/>\r\n                                    </Col>\r\n                                    <Col lg={6}>\r\n                                        <Graph/>\r\n                                    </Col>\r\n                                </Row>\r\n                                <br/>\r\n                                <div>\r\n                                    <Table/>\r\n                                </div>\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Container>\r\n                </main>\r\n                <footer>\r\n                    <Container className=\"text-center\">\r\n                        <hr/>\r\n                        <Row>\r\n                            <Col lg={6}>\r\n                                Juall | Rosenblum | Pojero | Erry \r\n                            </Col>\r\n                            <Col lg={6}>\r\n                                <a href=\"https://opensource.org/licenses/MIT\" target=\"_blank\">MIT License</a>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </footer>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { App } from \"./components/App\";\r\n\r\nReactDOM.render(<App/>, document.querySelector(\"#root\"));"],"sourceRoot":""}