{"version":3,"sources":["Ajax.js","EventEmitter.js","Simulator.js","ParamStorage.js","GraphData.js","components/NumSlider.jsx","components/ExportsModal.jsx","preset.js","components/Inputs.jsx","components/MailModal.jsx","components/Navbar.jsx","components/Table.jsx","components/GraphRange.jsx","components/TrendLine.jsx","components/Graph.jsx","components/App.jsx","index.js"],"names":["Ajax","Object","classCallCheck","this","createClass","key","value","options","arguments","length","undefined","Promise","resolve","reject","method","url","window","location","origin","headers","query","data","xhr","XMLHttpRequest","h","onload","onerror","err","queryString","open","setRequestHeader","send","JSON","stringify","request","dict","qs","param","concat","substring","EventEmitter","_listeners","event","willTrigger","type","forEach","listener","eventType","push","listeners","i","splice","src_Simulator","Simulator","_this","possibleConstructorReturn","getPrototypeOf","call","_firstInvalidDay","_useErrCorrecting","_this2","href","includes","Access-Control-Allow-Origin","Error-Correction","isErrCorrecting","get","then","status","parse","response","parseInt","getResponseHeader","emit","Event","Error","catch","_this3","filename","Content-Type","csvDataBlob","Blob","a","document","createElement","URL","createObjectURL","setAttribute","Date","now","click","revokeObjectURL","console","log","message","src_ParamStorage","ParamStorage","_numParamSets","_lastParamSet","_currDay","sessionStorage","clear","params","convertToTitleCase","paramsNotLastSave","setItem","numParamSets","removeItem","infectionLength","transmissionRate","virulence","initialPopulation","immunePercent","initialInfected","simulationLength","preset","saveParamsInputsDict","infection_length","transmission_rate","initial_population","immune_percent","initial_infected","simulation_length","newParams","paramId","json","getItem","firstStoredDay","currentDay","getSavedParams","src_GraphData","GraphData","_startDay","_endDay","Number","MAX_SAFE_INTEGER","_trendLineY","extractTrendLine","URLSearchParams","search","trendLineY","parseFloat","keysDict","simData","labeledPoints","largestY","start","startDay","end","endDay","day","label","y","pt","x","Math","max","Array","fill","map","val","index","values","keys","labels","filter","min","NumSlider","_React$Component","props","numRef","React","createRef","rangeRef","inherits","current","init","evt","target","react_default","className","showRange","minText","maxText","ref","onChange","onNumber","bind","step","placeholder","required","disabled","onSlide","set","n","Component","ExportsModal","exportUrlRef","csvFilenameElement","state","exportOption","exportDropdown","copyMessage","csvMessage","pending","setState","downloadCSVFile","getInputsDictionary","toggle","prev","elem","select","execCommand","reactstrap_es","innerRef","element","maxLength","color","onClick","downloadCSV","defaultValue","getExportURL","readOnly","copyLinkText","_this4","isOpen","toggleModal","toggleExportDropdown","caret","renderExportOptBody","presets","Seasonal Flu","Infection Length","Transmission","Virulence","Smallpox","Polio","Measles","Ebola","H1N1 Flu","H5N1 Flu","1918 Flu","INPUT_RANGES","Inputs","intialImmunityRef","transmissionRef","virulenceRef","initialInfectedRef","intialPopRef","infectionLengthRef","daysRef","presetRef","isDisabled","exportModalOpen","on","onSimulatorLoad","onSimulatorError","forceUpdate","extractQueryStringParams","useTestValues","onPresetChange","healthy","reset","hasData","currParams","runSimulation","load","preventDefault","direction","stepBackwards","stepForwards","currentParams","id","switchParamSet","hasPrevDay","index_es","icon","hasNextDay","onSubmit","NumSlider_NumSlider","onReset","toggleExportModal","ExportsModal_ExportsModal","MailModal","textRef","errorRef","headerRef","typeError","errorTime","errorMsg","other","errMessage","successMessage","prevProps","showModal","e","goodHeader","BuildArray","post","text","lib_default","closeModal","submitClick","onTypeSelect","name","TypeOther","Navbar","showNav","showAdvanced","light","expand","toggleNavbar","navbar","selected","openModal","toggleDropdown","toggleErrorCorrection","MailModal_MailModal","Table","visible","style","firstInvalidDay","borderLeft","borderRight","rows","dayData","susceptible","round","Susceptible","infected","Infected","immune","Immune","dead","Dead","population","TotalPopulation","getStyleForDay","toLocaleString","renderRows","GraphRange","lowerRef","upperRef","lowValue","low","high","selectedMax","highValue","selectedMin","onChangeLow","onChangeHigh","TrendLine","WIDTH","COLORS","Graph","graphContainerRef","tooltip","containerWidth","graphLabels","toggleLabel","addEventListener","onResize","prevState","yLabel","nextLabels","assign","getBoundingClientRect","width","borders","borderBottom","container","svgElement","querySelector","canvas","ctx","getContext","getAttribute","height","svgXml","XMLSerializer","serializeToString","blob","svgUrl","svgImage","imageSmoothingEnabled","imageSmoothingQuality","drawImage","globalCompositeOperation","fillStyle","fillRect","jpg","toDataURL","getData","dayCount","join","renderLabelButtons","react_easy_chart_lib","margin","top","bottom","left","right","axes","axisLabels","dataPoints","xDomainRange","yDomainRange","lineColors","clickHandler","onGraphClick",".label",".axis","fontSize","fontFamily","TrendLine_TrendLine","GraphRange_GraphRange","library","add","fab","faAngleDoubleLeft","faAngleDoubleRight","faSkull","faBalanceScale","d","App","apply","Navbar_Navbar","size","lg","Inputs_Inputs","Graph_Graph","Table_Table","getFullYear","ReactDOM","render","App_App"],"mappings":"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","file":"static/js/main.fdd842b0.chunk.js","sourcesContent":["export class Ajax{\r\n    // sends an async http request \r\n    static request(options={}){\r\n        return new Promise((resolve, reject) => {\r\n            // extract config from options object\r\n            let method = (typeof options.method === \"string\") ? options.method : \"GET\",\r\n                url = (typeof options.url === \"string\") ? options.url : window.location.origin,\r\n                headers = (typeof options.headers === \"object\" && options.headers) ? options.headers : {},\r\n                query = (typeof options.query === \"object\" && options.query) ? options.query : {},\r\n                data = (typeof options.data !== \"undefined\") ? options.data : null;\r\n\r\n            // create the request\r\n            let xhr = new XMLHttpRequest();\r\n\r\n            // attach listeners\r\n            xhr.onload = () => resolve(xhr);\r\n            xhr.onerror = err => reject(err);\r\n\r\n            // apply query string\r\n            if(query){\r\n                url += Ajax.queryString(query);\r\n            }\r\n\r\n            // open the request\r\n            xhr.open(method, url);\r\n\r\n            // apply http headers\r\n            for(let h in headers){\r\n                xhr.setRequestHeader(h, headers[h]);\r\n            }\r\n\r\n            // send the request\r\n            // send JSON if the data is not a string\r\n            if(data){\r\n                if(typeof data !== \"string\"){\r\n                    xhr.send(JSON.stringify(data));\r\n                }\r\n                else xhr.send(data);\r\n            }\r\n            else xhr.send();\r\n        });\r\n    }\r\n\r\n    // async http get request\r\n    static get(url, headers, query){\r\n        return Ajax.request({method: \"GET\", url, headers, query});\r\n    }\r\n\r\n    // async http post request\r\n    static post(url, headers, data){\r\n        return Ajax.request({method: \"POST\", url, headers, data});\r\n    }\r\n\r\n    // creates a query string from an object\r\n    static queryString(dict){\r\n        let qs = \"?\";\r\n\r\n        for(let param in dict){\r\n            qs += `${param}=${dict[param]}&`;\r\n        }\r\n\r\n        return qs.substring(0, qs.length - 1);\r\n    }\r\n}","// simple event emitter class\r\nexport class EventEmitter{\r\n    constructor(){\r\n        this._listeners = {};   // 'private' dictionary of {eventType: listenerFunction}\r\n    }\r\n\r\n    // triggers all listening functions\r\n    emit(event){\r\n        if(this.willTrigger(event.type)){\r\n            this._listeners[event.type].forEach(listener => listener(event));\r\n        }\r\n    }\r\n\r\n    // adds a listener\r\n    on(eventType, listener){\r\n        if(this.willTrigger(eventType)){\r\n            this._listeners[eventType].push(listener);\r\n        }\r\n        else{\r\n            this._listeners[eventType] = [listener];\r\n        }\r\n    }\r\n\r\n    // removes a listener\r\n    off(eventType, listener){\r\n        if(this.willTrigger(eventType)){\r\n            let listeners = this._listeners[eventType];\r\n\r\n            for(let i = 0; i < listeners.length; i++){\r\n                if(listeners[i] === listener){\r\n                    listeners.splice(i, 1);\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // checks if there are any listeners for a given type\r\n    willTrigger(eventType){\r\n        return eventType in this._listeners;\r\n    }\r\n}","import { Ajax } from \"./Ajax\";\r\nimport { EventEmitter } from \"./EventEmitter\";\r\n\r\n// singleton for holding simulation data\r\n// event-driven to keep chart + graph updated\r\nclass Simulator extends EventEmitter{\r\n    constructor(){\r\n        super();\r\n\r\n        this.data = null;                   // simulation data array\r\n        this._firstInvalidDay = -1;         // first invalid day (-1 = no invalid days)\r\n        this._useErrCorrecting = true;      // use error correction?\r\n    }\r\n\r\n    // hits the API for data, signals progress\r\n    // query should be a dictionary of the inputs, will be converted into a query string\r\n    load(query){\r\n        return new Promise((resolve, reject) => {\r\n            // figure out endpoint\r\n            let url = window.location.href.includes(\"localhost\") ? \"http://localhost:8080/plague\" : `${window.location.origin}/plague`;\r\n            \r\n            // CORS headers (use foreign domain)\r\n            let headers = {\r\n                \"Access-Control-Allow-Origin\": window.location.origin,\r\n                \"Error-Correction\": this.isErrCorrecting\r\n            };\r\n\r\n            // ajax call with query string\r\n            // (null headers)\r\n            Ajax.get(url, headers, query)\r\n                .then(xhr => {    \r\n                    // ajax resolved (could be bad/good request, but server responded)\r\n                    if(xhr.status === 200){\r\n                        // good request - attempt to parse results json\r\n                        try{\r\n                            // parse json\r\n                            this.data = JSON.parse(xhr.response);\r\n\r\n                            // extract first invalid day\r\n                            this._firstInvalidDay = parseInt(xhr.getResponseHeader(\"First-Invalid-Day\")) || -1;\r\n                        }\r\n                        catch(err){\r\n                            // json parse error (should never happen)\r\n                            reject(err);\r\n                            this.emit(new Event(\"error\"));  // server responded with bad request signal\r\n                        }\r\n\r\n                        // done, resolve promise and emit load + data\r\n                        resolve();\r\n                        this.emit(new Event(\"load\"));   // server responded with good request signal\r\n\r\n                        this.emit(new Event(\"data\"));   // parsed data signal\r\n                    }\r\n                    else{\r\n                        // bad request\r\n                        reject(new Error(xhr.response || \"Bad request\"));\r\n                        this.emit(new Event(\"error\"));  // server responded with bad request signal\r\n                    }\r\n                })\r\n                .catch(err => {\r\n                    // ajax request died (really bad NOT a 400 error!)\r\n                    reject(err);\r\n                    this.emit(new Event(\"error\"));  // request died signal\r\n                });\r\n        });\r\n    }\r\n\r\n    // asychronously downloads a csv file using ajax\r\n    downloadCSVFile(query, filename=null){\r\n        return new Promise((resolve, reject) => {\r\n            // figure out endpoint origin\r\n            let origin = window.location.origin.includes(\"localhost\") ? \"http://localhost:8080\" : window.location.origin;\r\n\r\n            // figure out endpoint using origin\r\n            let url = `${origin}/plague`;\r\n\r\n            // http request headers\r\n            let headers = {\r\n                \"Access-Control-Allow-Origin\": window.location.origin,\r\n                \"Content-Type\": \"text/csv\",\r\n                \"Error-Correction\": this.isErrCorrecting\r\n            };\r\n\r\n            // make sure .csv\r\n            if(filename && filename.substring(filename.length - 4, filename.length) !== \".csv\"){\r\n                filename += \".csv\";\r\n            }\r\n\r\n            // get csv file via Ajax\r\n            Ajax.get(url, headers, query)\r\n                .then(xhr => {\r\n                    // server responded\r\n                    if(xhr.status === 200){\r\n                        // good http status - download\r\n                        // xhr.response = csv text\r\n                        // convert to blob\r\n                        let csvDataBlob = new Blob([xhr.response], {type: \"octet/stream\"});\r\n\r\n                        // create a 'secret' link using the blob\r\n                        let a = document.createElement(\"a\");\r\n                        let url = window.URL.createObjectURL(csvDataBlob);\r\n                        \r\n                        // setup the link to download blob data\r\n                        a.setAttribute(\"download\", filename || `data_${Date.now()}.csv`);\r\n                        a.setAttribute(\"href\", url);\r\n\r\n                        // click the link to download the file\r\n                        a.click();\r\n                        window.URL.revokeObjectURL(url);\r\n\r\n                        // trigger any listeners\r\n                        resolve(\"File downloaded.\");\r\n                    }\r\n                    else{\r\n                        // bad http status - trigger listeners with error\r\n                        console.log(xhr.response);\r\n                        reject(new Error(\"Error downloading CSV file.\"));\r\n                    }\r\n                })\r\n                .catch(err => {\r\n                    // server did not responed - trigger listeners with error\r\n                    console.log(err.message);\r\n                    reject(new Error(\"Unable to download CSV file.\"))\r\n                });\r\n        });\r\n    }\r\n\r\n    // resets simulation to day 0 and clears all stored data\r\n    // (triggers listeners)\r\n    reset(){\r\n        this.data = null;\r\n        this.emit(new Event(\"reset\"));\r\n    }\r\n\r\n    set isErrCorrecting(value){\r\n        if(typeof value === \"boolean\"){\r\n            this._useErrCorrecting = value;\r\n        }\r\n        else throw new Error(\"isErrCorrecting must be set to a boolean value.\");\r\n    }\r\n\r\n    get hasData(){\r\n        return this.data !== null;\r\n    }\r\n\r\n    get firstInvalidDay(){\r\n        return this._firstInvalidDay;\r\n    }\r\n\r\n    get isErrCorrecting(){\r\n        return this._useErrCorrecting;\r\n    }\r\n}\r\n\r\n// singleton\r\nexport default new Simulator();","import { EventEmitter } from \"./EventEmitter\";\r\n\r\n// class for managing parameter data history using session storage\r\nconst PARAM_STORAGE_LIMIT = 100;\r\n\r\nclass ParamStorage extends EventEmitter{\r\n    constructor(){\r\n        super();\r\n\r\n        this._numParamSets = 0;\r\n        this._lastParamSet = null;\r\n        this._currDay = 0;\r\n\r\n        window.sessionStorage.clear();\r\n    }\r\n    \r\n    // saves parameters to session storage - expects query string format (as provided by inputs.jsx)\r\n    saveParamsInputsDict(dict){\r\n        let params = this.convertToTitleCase(dict);\r\n\r\n        // prevent saving multiple set same time in a row\r\n        if(this.paramsNotLastSave(params)){\r\n            window.sessionStorage.setItem(++this._numParamSets, JSON.stringify(params))\r\n            this._currDay = this.numParamSets;\r\n            this._lastParamSet = params;\r\n\r\n            // enforce storage capacity - begin deleting from the left bound\r\n            if(this.numParamSets > PARAM_STORAGE_LIMIT){\r\n                window.sessionStorage.removeItem(this.numParamSets - PARAM_STORAGE_LIMIT);\r\n            }\r\n\r\n            this.emit(new Event(\"save\"));\r\n\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // saves parameters to session storage\r\n    saveParams(infectionLength, transmissionRate, virulence, initialPopulation, immunePercent, initialInfected, simulationLength, preset){\r\n        return this.saveParamsInputsDict({\r\n            infection_length:   infectionLength,\r\n            transmission_rate:  transmissionRate,\r\n            virulence,\r\n            initial_population: initialPopulation,\r\n            immune_percent:     immunePercent,\r\n            initial_infected:   initialInfected,\r\n            simulation_length:  simulationLength,\r\n            preset\r\n        });\r\n    }\r\n\r\n    // converts underscore format dict to title case (ex: initial_population to InitialPopulation)\r\n    convertToTitleCase(dict){\r\n        return {\r\n            infectionLength:    dict.infection_length,\r\n            transmissionRate:   dict.transmission_rate,\r\n            virulence:          dict.virulence,\r\n            initialPopulation:  dict.initial_population,\r\n            immunePercent:      dict.immune_percent,\r\n            initialInfected:    dict.initial_infected,\r\n            simulationLength:   dict.simulation_length,\r\n            preset:             dict.preset\r\n        };\r\n    }\r\n\r\n    // checks if 'newParams' is content different from the last save param set\r\n    paramsNotLastSave(newParams){\r\n        if(!this._lastParamSet) return true;\r\n\r\n        for(let param in this._lastParamSet){\r\n            if(this._lastParamSet[param] !== newParams[param]){\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // gets saved parameters\r\n    getSavedParams(paramId){\r\n        let json = window.sessionStorage.getItem(paramId) || null;\r\n        return json ? JSON.parse(json) : null;\r\n    }\r\n\r\n    // moves current day one into the backwards\r\n    stepBackwards(){\r\n        if(this._currDay - 1 >= this.firstStoredDay){\r\n            --this._currDay;\r\n            //this._lastParamSet = this.getSavedParams(--this._currDay);\r\n        }\r\n    }\r\n\r\n    // move sthe current day one day forwards\r\n    stepForwards(){\r\n        if(this._currDay + 1 <= this.numParamSets){\r\n            ++this._currDay;\r\n            //this._lastParamSet = this.getSavedParams(++this._currDay);\r\n        }\r\n    }\r\n\r\n    get hasPrevDay(){\r\n        return this._numParamSets > 0 && this.currentDay > 1;\r\n    }\r\n\r\n    get hasNextDay(){\r\n        return this._numParamSets > 0 && this.currentDay < this.numParamSets;\r\n    }\r\n\r\n    get firstStoredDay(){\r\n        if(this.numParamSets > PARAM_STORAGE_LIMIT){\r\n            return this.numParamSets - PARAM_STORAGE_LIMIT;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    get currentParams(){\r\n        return this.getSavedParams(this._currDay);\r\n    }\r\n\r\n    get currentDay(){\r\n        return this._currDay;\r\n    }\r\n\r\n    get numParamSets(){\r\n        return this._numParamSets;\r\n    }\r\n}\r\n\r\nexport default new ParamStorage();","import Simulator from \"./Simulator\";\r\nimport { EventEmitter } from './EventEmitter';\r\n\r\nclass GraphData extends EventEmitter{\r\n    constructor(){\r\n        super();\r\n\r\n        this._startDay = -1;\r\n        this._endDay = Number.MAX_SAFE_INTEGER;\r\n        this._trendLineY = 0;\r\n\r\n        this.extractTrendLine();\r\n    }\r\n\r\n    // extracts trend line from query strings\r\n    extractTrendLine(){\r\n        // query strings\r\n        let qs = new URLSearchParams(window.location.search);\r\n        \r\n        // get trend line as float (default 0)\r\n\t\tlet trendLineY = parseFloat(qs.get(\"trend_line\")) || 0;\r\n        this._trendLineY = trendLineY;\r\n    }\r\n\r\n    getData(keysDict){\r\n        let simData = Simulator.data;   // simulation data array\r\n        let labeledPoints = {};         // stores the points array in a dictionary (key=label)\r\n        let largestY = 0;               // largest y in data set\r\n\r\n        if(simData){\r\n            // start & end indeces \r\n            let start = this.startDay > -1 ? this.startDay : 0;\r\n            let end = this.endDay < simData.length ? this.endDay : (simData.length - 1);\r\n\r\n            for(let i = start; i <= end; i++){\r\n                let day = simData[i];\r\n\r\n                // label is 'Infected', 'Susceptible', etc (whatever is provided)\r\n                for(let label in keysDict){\r\n                    if(keysDict[label] !== true){\r\n                        continue;\r\n                    }\r\n\r\n                    // get y value (x is always the day/index)\r\n                    let y = parseFloat(day[label]);\r\n\r\n                    // create x, y point\r\n                    let pt = {x: i, y};\r\n\r\n                    // store the point to its associated label\r\n                    if(label in labeledPoints){\r\n                        labeledPoints[label].push(pt);\r\n                    }\r\n                    else{\r\n                        labeledPoints[label] = [pt];\r\n                    }\r\n\r\n                    // update largest Y\r\n                    largestY = Math.max(largestY, y);\r\n                }\r\n            }\r\n\r\n            // optional trend line points\r\n            if(this.trendLineY > 0){\r\n                // creates an array of [{x, y},...] where x is the day and y is the trend line Y\r\n                labeledPoints[\"TrendLine\"] = new Array(end - start).fill(null).map((val, index) => ({x: index + start, y: this.trendLineY}));\r\n            }\r\n        }\r\n\r\n        // convert sorted dictionary into an array\r\n        let values = [];\r\n        Object.keys(labeledPoints).forEach(key => values.push(labeledPoints[key]));\r\n\r\n        // gets all the labels that are in the dictionary and true (in order)\r\n        let labels = Object.keys(keysDict).filter(key => keysDict[key] === true);\r\n\r\n        return {values, largestY, labels};\r\n    }\r\n\r\n    // sets the start/end days\r\n    // (better to use this than setting start & end days individually due to 1 update)\r\n    setDaysRange(start, end){\r\n        this._startDay = start;\r\n        this._endDay = end;\r\n        this.emit(new Event(\"update\"));\r\n    }\r\n\r\n    set startDay(value){\r\n        this._startDay = value;\r\n        this.emit(new Event(\"update\"));\r\n    }\r\n\r\n    set endDay(value){\r\n        this._endDay = value;\r\n        this.emit(new Event(\"update\"));\r\n    }\r\n\r\n    set trendLineY(value){\r\n        this._trendLineY = value;\r\n        this.emit(new Event(\"update\"));\r\n    }\r\n\r\n    get startDay(){\r\n        return Math.max(0, this._startDay);\r\n    }\r\n\r\n    get endDay(){\r\n        return Math.min(this._endDay, Simulator.data ? Simulator.data.length : 0);\r\n    }\r\n\r\n    get trendLineY(){\r\n        return this._trendLineY;\r\n    }\r\n}\r\n\r\nexport default new GraphData();","import \"./NumSlider.css\";\r\nimport React from \"react\";\r\n\r\nexport class NumSlider extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.numRef = React.createRef();\r\n        this.rangeRef = React.createRef();\r\n    }\r\n\r\n    // mounted - set the default numbers\r\n    componentDidMount(){\r\n        this.numRef.current.value = this.props.init || this.props.min;\r\n        this.rangeRef.current.value = this.props.init || this.props.min;\r\n    }\r\n\r\n    // on text field input\r\n    onNumber(evt){\r\n        // set the range value to the number value\r\n        let val = parseFloat(evt.target.value);\r\n    \r\n        if(val){\r\n            // enforce min/max constraints\r\n            val = Math.min(Math.max(val, this.props.min), this.props.max); \r\n\r\n            // update inputs\r\n            this.numRef.current.value = val;\r\n            this.rangeRef.current.value = val;\r\n        }\r\n        else{\r\n            // empty input - range at min and number will be empty\r\n            this.rangeRef.current.value = this.props.min;\r\n        }\r\n    }\r\n\r\n    // on range bar move\r\n    onSlide(evt){\r\n        // set the text value to the number value\r\n        let val = evt.target.value;\r\n\r\n        // enforce min/max constraints \r\n        val = Math.min(Math.max(val, this.props.min), this.props.max);\r\n\r\n        // update number input\r\n        this.numRef.current.value = val;\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"num-slider-container\">\r\n                <div>\r\n                    <label>{this.props.label}</label>\r\n                    {this.props.showRange ? (` ${this.minText}-${this.maxText}`) : null}\r\n                </div>\r\n                <div>\r\n                    <input \r\n                        ref={this.numRef}\r\n                        onChange={this.onNumber.bind(this)}\r\n                        type=\"number\"\r\n                        min={this.props.min}\r\n                        max={this.props.max}\r\n                        step={this.props.step}\r\n                        placeholder={this.props.placeholder}\r\n                        required={this.props.required}\r\n                        disabled={this.props.disabled}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <input\r\n                        ref={this.rangeRef}\r\n                        onChange={this.onSlide.bind(this)}\r\n                        type=\"range\"\r\n                        min={this.props.min}\r\n                        max={this.props.max}\r\n                        step={this.props.step}\r\n                        disabled={this.props.disabled}\r\n                        className=\"num-slider-slider\"\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    set value(n){\r\n        // must be in range\r\n        n = Math.max(this.props.min, n);\r\n        n = Math.min(n, this.props.max);\r\n\r\n        // update elements \r\n        this.numRef.current.value = n;\r\n        this.rangeRef.current.value = n;\r\n    }\r\n\r\n    get minText(){\r\n        return this.props.minText ? this.props.minText : this.props.min;\r\n    }\r\n\r\n    get maxText(){\r\n        return this.props.maxText ? this.props.maxText : this.props.max;\r\n    }\r\n\r\n    get value(){\r\n        return this.numRef.current.value;\r\n    }\r\n}","import \"./ExportsModal.css\";\r\nimport React from \"react\";\r\nimport { Modal, ModalBody, ModalHeader, Dropdown, DropdownItem, DropdownMenu, DropdownToggle, Button, Input } from \"reactstrap\";\r\nimport Simulator from \"../Simulator\";\r\nimport GraphData from \"../GraphData\";\r\n\r\nexport class ExportsModal extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        // export refs\r\n        this.exportUrlRef = React.createRef();\r\n        this.csvFilenameElement = null;         // later to set an <input> (reactstrap inner ref)\r\n\r\n        this.state = {\r\n            exportOption: null,\r\n            exportDropdown: false,\r\n            copyMessage: null,\r\n            csvMessage: null,\r\n            pending: false\r\n        };\r\n    }\r\n    \r\n    // downloads the csv file\r\n    downloadCSV(){\r\n        if(!this.state.pending){\r\n            // disable buttons\r\n            this.setState({pending: true, csvMessage: \"Loading...\"});\r\n\r\n            // optional filename override\r\n            let filename = this.csvFilenameElement ? this.csvFilenameElement.value : null;\r\n\r\n            Simulator.downloadCSVFile(this.props.getInputsDictionary(), filename)\r\n                .then(() => this.setState({csvMessage: \"Download complete.\"}))  // good\r\n                .catch(err => this.setState({csvMessage: err.message}))         // err - something went wrong (server did not respond or bad request)\r\n                .then(() => this.setState({pending: false}));                   // always - free buttons\r\n        }\r\n    }\r\n\r\n    toggleModal(){\r\n        this.setState({exportOption: null, copyMessage: null, csvMessage: null});\r\n        this.props.toggle();\r\n    }\r\n\r\n    toggleExportDropdown(){\r\n        this.setState(prev => ({exportDropdown: !prev.exportDropdown}));\r\n    }\r\n\r\n    getExportURL(){\r\n        let dict = this.props.getInputsDictionary();\r\n\r\n        let url = `${window.location.origin}?`;\r\n\r\n        for(let param in dict){\r\n            url += `${param}=${dict[param]}&`;\r\n        }\r\n\r\n        url += `trend_line=${GraphData.trendLineY}`;\r\n\r\n        return url;\r\n    }\r\n\r\n    copyLinkText(){\r\n        let elem = this.exportUrlRef.current;\r\n        if(elem){\r\n            elem.select();\r\n            document.execCommand(\"copy\");\r\n\r\n            this.setState({copyMessage: \"(Copied to clipboard)\"});\r\n        }\r\n    }\r\n\r\n    renderExportOptBody(){\r\n        if(this.state.exportOption === \"csv\"){\r\n            return (\r\n                <div>\r\n                    <div>\r\n                        Exports a comma separated value (.csv) file containing the results displayed in the table.\r\n                        This file is easily accesible in Excel. \r\n                    </div>\r\n                    <br/>\r\n                    <div>\r\n                        <Input\r\n                            innerRef={element => this.csvFilenameElement = element}\r\n                            placeholder=\"Optional filename (.csv automatically appended)\"\r\n                            type=\"text\"\r\n                            maxLength={25}\r\n                        />        \r\n                    </div>\r\n                    <br/>\r\n                    <div>\r\n                        <Button color=\"fade\" onClick={this.downloadCSV.bind(this)} disabled={this.state.pending}>Download CSV</Button>\r\n                        <span className=\"csv-text-container\">\r\n                            {this.state.csvMessage}\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        else if(this.state.exportOption === \"sim-link\"){\r\n            return (\r\n                <div>\r\n                    <div>\r\n                        Exports a URL for this application with preset values that can be shared.\r\n                    </div>\r\n                    <br/>\r\n                    <div>\r\n                        <textarea ref={this.exportUrlRef} className=\"modal-url-text\" defaultValue={this.getExportURL()} readOnly>\r\n                        </textarea>\r\n                    </div>\r\n                    <br/>\r\n                    <div>\r\n                        <Button color=\"fade\" onClick={this.copyLinkText.bind(this)}>Copy Link</Button>\r\n                        <span className=\"copy-text-container\">\r\n                            {this.state.copyMessage}\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        return (\r\n            <div>\r\n                Please select an export option.\r\n            </div>\r\n        )\r\n    }\r\n    \r\n    render(){\r\n        return (\r\n            <Modal isOpen={this.props.isOpen}>\r\n                <ModalHeader toggle={this.toggleModal.bind(this)}>\r\n                    <Dropdown isOpen={this.state.exportDropdown} toggle={this.toggleExportDropdown.bind(this)}>\r\n                        <DropdownToggle color=\"fade\" caret>\r\n                            Export Options\r\n                        </DropdownToggle>\r\n                        <DropdownMenu>\r\n                            <DropdownItem onClick={() => this.setState({exportOption: \"csv\"})}>\r\n                                Table CSV\r\n                            </DropdownItem>\r\n                            <DropdownItem onClick={() => this.setState({exportOption: \"sim-link\"})}>\r\n                                Simulation Link\r\n                            </DropdownItem>\r\n                        </DropdownMenu>\r\n                    </Dropdown>\r\n                </ModalHeader>\r\n                <ModalBody>\r\n                    <div>\r\n                        {this.renderExportOptBody()}\r\n                    </div>\r\n                </ModalBody>\r\n            </Modal>\r\n        );\r\n    }\r\n}","export const presets ={\r\n    //presets in the inputs go here\r\n    //seasonal flu\r\n   \"Seasonal Flu\":{\r\n       \"Infection Length\": 8,\r\n       \"Transmission\": 1.2,\r\n       \"Virulence\": 0.01\r\n   },\r\n   //smallpox\r\n   \"Smallpox\":{\r\n    \"Infection Length\": 14,\r\n    \"Transmission\": 2.5,\r\n    \"Virulence\": 0.25 \r\n   },\r\n   //polio\r\n   \"Polio\":{\r\n    \"Infection Length\": 18,\r\n    \"Transmission\": 1,\r\n    \"Virulence\": 0.01 \r\n   },\r\n   //measles\r\n   \"Measles\":{\r\n    \"Infection Length\": 8,\r\n    \"Transmission\": 10,\r\n    \"Virulence\": 0.01 \r\n   },\r\n   //Ebola\r\n   \"Ebola\":{\r\n    \"Infection Length\": 13,\r\n    \"Transmission\": 1.5,\r\n    \"Virulence\": 0.75 \r\n   },\r\n    //H1N1 Flu\r\n    \"H1N1 Flu\":{\r\n    \"Infection Length\": 8,\r\n    \"Transmission\": 1.6,\r\n    \"Virulence\": 0.01 \r\n    },\r\n    //H5N1 Flu\r\n   \"H5N1 Flu\":{\r\n    \"Infection Length\": 8,\r\n    \"Transmission\": 0.1,\r\n    \"Virulence\": 0.6 \r\n   },\r\n    //1918 Flu\r\n    \"1918 Flu\":{\r\n    \"Infection Length\": 8,\r\n    \"Transmission\": 2,\r\n    \"Virulence\": 0.03 \r\n    }\r\n}\r\nexport default presets;\r\n","import React from \"react\";\r\nimport { Row, Col, Form, FormGroup, Button, Input } from \"reactstrap\";\r\nimport Simulator from \"../Simulator\";\r\nimport ParamStorage from \"../ParamStorage\";\r\nimport GraphData from \"../GraphData\";\r\nimport { NumSlider } from \"./NumSlider\";\r\nimport { ExportsModal } from \"./ExportsModal\";\r\nimport preset from \"../preset\"\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\n// input range constraints (min, max, step)\r\nexport const INPUT_RANGES = {\r\n    INFECTION_LENGTH:   [1, 365, 1],\r\n    TRANSMISSION_RATE:  [0, 20, 0.01],\r\n    VIRULENCE:          [0, 1, 0.001],\r\n    INITIAL_POPULATION: [1, 1000000, 1],\r\n    IMMUNE_PERCENT:     [0, 1, 0.01],\r\n    INITIAL_INFECTED:   [0, 1000000, 1],\r\n    SIMULATION_LENGTH:  [1, 365, 1]\r\n};\r\n\r\nexport class Inputs extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        // input refs\r\n        this.intialImmunityRef = React.createRef();\r\n        this.transmissionRef = React.createRef();\r\n        this.virulenceRef = React.createRef();\r\n        this.initialInfectedRef = React.createRef();\r\n        this.intialPopRef = React.createRef();\r\n        this.infectionLengthRef = React.createRef();\r\n        this.daysRef = React.createRef();\r\n        this.presetRef = React.createRef();\r\n\r\n        this.state = {\r\n            pending: false,             // no new requests while pending (disable buttons)\r\n            message: null,              // message to display (errors)\r\n            isDisabled: false,          // to disable/enable fields depending on what preset is selected\r\n            exportModalOpen: false      // export options modal visibility\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        Simulator.on(\"load\", this.onSimulatorLoad.bind(this));\r\n        Simulator.on(\"error\", this.onSimulatorError.bind(this));\r\n        \r\n        // re-render on param storage save - used for disabling the << >> buttons\r\n        ParamStorage.on(\"save\", () => this.forceUpdate());\r\n\r\n        // query string params?\r\n        this.extractQueryStringParams();\r\n\r\n        // test values?\r\n        if(new URLSearchParams(window.location.search).get(\"test\") === \"true\"){\r\n            this.useTestValues();\r\n        }\r\n    }\r\n    \r\n    // extracts optional query string parameters from the query string\r\n    extractQueryStringParams(){\r\n        // get query string data\r\n        let qs = new URLSearchParams(window.location.search);\r\n\r\n        // extract values from query string - set to the number value or default to min\r\n        // (setting value to below min will result in min)\r\n        this.initialInfectedRef.current.value = parseInt(qs.get(\"initial_infected\")) || -1;\r\n        this.intialImmunityRef.current.value =  parseFloat(qs.get(\"immune_percent\")) || -1;\r\n        this.intialPopRef.current.value =       parseInt(qs.get(\"initial_population\")) || -1;\r\n        this.virulenceRef.current.value =       parseFloat(qs.get(\"virulence\")) || -1;\r\n        this.daysRef.current.value =            parseInt(qs.get(\"simulation_length\")) || -1;\r\n        this.infectionLengthRef.current.value = parseInt(qs.get(\"infection_length\")) || -1;\r\n        this.transmissionRef.current.value =    parseFloat(qs.get(\"transmission_rate\")) || -1;\r\n\r\n        // preset query string\r\n        let preset = qs.get(\"preset\");\r\n        if(preset){\r\n            this.presetRef.current.value = preset;\r\n            this.onPresetChange();\r\n        }\r\n    }\r\n\r\n    // changes the input parameters to predefined test values\r\n    useTestValues(){\r\n        // set values\r\n        this.initialInfectedRef.current.value = 500;\r\n        this.intialImmunityRef.current.value = 0.10;\r\n        this.intialPopRef.current.value = 1000000;\r\n        this.virulenceRef.current.value = 0.25;\r\n        this.daysRef.current.value = 365;\r\n        this.infectionLengthRef.current.value = 100;\r\n        this.transmissionRef.current.value = 0.2;\r\n\r\n        // force save\r\n        ParamStorage.saveParamsInputsDict(this.getInputsDictionary());\r\n    }\r\n\r\n    // creates a dictionary of all the inputs and their values (names formatted for the API call) \r\n    getInputsDictionary(){\r\n        // extract data from inputs to use in query string \r\n        let immune_percent =        this.intialImmunityRef.current.value,\r\n            transmission_rate =     this.transmissionRef.current.value,\r\n            virulence =             this.virulenceRef.current.value,\r\n            initial_infected =      this.initialInfectedRef.current.value,\r\n            initial_population =    this.intialPopRef.current.value,\r\n            infection_length =      this.infectionLengthRef.current.value,\r\n            simulation_length =     this.daysRef.current.value,\r\n            preset =                this.presetRef.current.value;\r\n\r\n        // make sure infected <= population\r\n        initial_infected = Math.min(initial_infected, initial_population);\r\n\r\n        // make sure immune percent is <= healthy population\r\n        let healthy = (initial_population - initial_infected) / initial_population;\r\n        immune_percent = Math.min(immune_percent, healthy);\r\n\r\n        // MUST match API expectations! \r\n        return {immune_percent, transmission_rate, virulence, initial_infected, initial_population, infection_length, simulation_length, preset};\r\n    }\r\n\r\n    onSimulatorError(){\r\n        this.setState({pending: false});    // enable buttons\r\n    }\r\n\r\n    onSimulatorLoad(){\r\n        this.setState({pending: false});    // enable buttons\r\n    }\r\n\r\n    // called when then the reset button is clicked\r\n    onReset(){\r\n        // cleared stored simulation data\r\n        Simulator.reset();\r\n    }\r\n\r\n    runSimulation(){\r\n        // no simulation data - load it (first simulation or reset happened)\r\n        if(!Simulator.hasData){\r\n            // disable buttons for loading time\r\n            this.setState({pending: true});\r\n\r\n            // load data then auto run\r\n            Simulator.load(this.getInputsDictionary())\r\n                .then(() => {\r\n                    this.setState({message: null}); // remove possible err message\r\n\r\n                    ParamStorage.saveParamsInputsDict(this.getInputsDictionary());  // save parameters\r\n                })\r\n                .catch(err => this.setState({message: err.message}));\r\n        }\r\n        else{\r\n            // verify current parameters are not the same as the ones already run\r\n            // (prevents reloading data that we already have!)\r\n            let currParams = ParamStorage.convertToTitleCase(this.getInputsDictionary());\r\n\r\n            if(ParamStorage.paramsNotLastSave(currParams)){\r\n                // parameters are different than last time\r\n                // run new simulation\r\n                Simulator.reset();      // triggers clearing graph/table and clears data\r\n                this.runSimulation();   // runs again, but sim will have no data\r\n            }\r\n        }\r\n    }\r\n\r\n    // called when the form is 'submitted'\r\n    // entire purpose is to block the sending of the form\r\n    // (submit enforces 'required', 'min', 'max' constraints)\r\n    onSubmit(evt){\r\n        // no default submission (using ajax instead)\r\n        evt.preventDefault();\r\n\r\n        this.runSimulation();\r\n    }\r\n\r\n    onPresetChange(){\r\n        let value = this.presetRef.current.value;\r\n        \r\n        if(value !== \"Custom\"){\r\n            this.setState({isDisabled: true});\r\n            this.infectionLengthRef.current.value = preset[value][\"Infection Length\"];\r\n            this.transmissionRef.current.value = preset[value][\"Transmission\"];\r\n            this.virulenceRef.current.value = preset[value][\"Virulence\"]\r\n        }else{\r\n            this.setState({isDisabled: false});\r\n        }\r\n    }\r\n\r\n    toggleExportModal(){\r\n        this.setState(prev => ({exportModalOpen: !prev.exportModalOpen}));\r\n    }\r\n\r\n    // moves the parameter storage day & updates UI inputs\r\n    switchParamSet(direction){\r\n        // move the day\r\n        if(direction === \"backwards\"){\r\n            ParamStorage.stepBackwards();\r\n        }\r\n        else if(direction === \"forwards\"){\r\n            ParamStorage.stepForwards();\r\n        }\r\n        else throw new Error(\"Parameter switch direction must be 'forwards' or 'backwards'.\");\r\n\r\n        // bail if nothing already saved\r\n        let params = ParamStorage.currentParams || null;\r\n        if(!params) return; // nothing saved\r\n\r\n        // fill out UI form\r\n        this.infectionLengthRef.current.value = params.infectionLength;\r\n        this.transmissionRef.current.value = params.transmissionRate;\r\n        this.virulenceRef.current.value = params.virulence;\r\n        this.intialPopRef.current.value = params.initialPopulation;\r\n        this.intialImmunityRef.current.value = params.immunePercent;\r\n        this.initialInfectedRef.current.value = params.initialInfected;\r\n        this.daysRef.current.value = params.simulationLength;\r\n\r\n        this.presetRef.current.value = params.preset;\r\n        this.onPresetChange();\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"input-container\">\r\n                <div id=\"inputs-header-container\" className=\"text-center\">\r\n                    <button onClick={() => this.switchParamSet(\"backwards\")} disabled={!ParamStorage.hasPrevDay}>\r\n                        <FontAwesomeIcon icon=\"angle-double-left\" />\r\n                    </button>\r\n                    <h5 className=\"text-center\">Experimental Variables</h5>\r\n                    <button onClick={() => this.switchParamSet(\"forwards\")} disabled={!ParamStorage.hasNextDay}>\r\n                        <FontAwesomeIcon icon=\"angle-double-right\" />\r\n                    </button>\r\n                </div>\r\n                <br/>\r\n                <form onSubmit={this.onSubmit.bind(this)}>\r\n                    <div className=\"row\">\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <NumSlider\r\n                                label={\"Length of Infection (Days)\"}\r\n                                showRange={true}\r\n                                min={INPUT_RANGES.INFECTION_LENGTH[0]}\r\n                                max={INPUT_RANGES.INFECTION_LENGTH[1]}\r\n                                step={INPUT_RANGES.INFECTION_LENGTH[2]}\r\n                                required={true}\r\n                                ref={this.infectionLengthRef}\r\n                                disabled={this.state.isDisabled}\r\n                            />\r\n                        </div>\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <NumSlider\r\n                                label={\"Transmission Rate\"}\r\n                                showRange={true}\r\n                                min={INPUT_RANGES.TRANSMISSION_RATE[0]}\r\n                                max={INPUT_RANGES.TRANSMISSION_RATE[1]}\r\n                                step={INPUT_RANGES.TRANSMISSION_RATE[2]}\r\n                                required={true}\r\n                                ref={this.transmissionRef}\r\n                                disabled={this.state.isDisabled}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <NumSlider\r\n                                label={\"Virulence\"}\r\n                                showRange={true}\r\n                                min={INPUT_RANGES.VIRULENCE[0]}\r\n                                max={INPUT_RANGES.VIRULENCE[1]}\r\n                                step={INPUT_RANGES.VIRULENCE[2]}\r\n                                required={true}\r\n                                ref={this.virulenceRef}\r\n                                disabled={this.state.isDisabled}\r\n                            />\r\n                        </div>\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <NumSlider\r\n                                label={\"Initial Population\"}\r\n                                showRange={true}\r\n                                min={INPUT_RANGES.INITIAL_POPULATION[0]}\r\n                                max={INPUT_RANGES.INITIAL_POPULATION[1]}\r\n                                step={INPUT_RANGES.INITIAL_POPULATION[2]}\r\n                                required={true}\r\n                                ref={this.intialPopRef}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <NumSlider\r\n                                label={\"Initial Immunity Percent\"}\r\n                                showRange={true}\r\n                                min={INPUT_RANGES.IMMUNE_PERCENT[0]}\r\n                                max={INPUT_RANGES.IMMUNE_PERCENT[1]}\r\n                                step={INPUT_RANGES.IMMUNE_PERCENT[2]}\r\n                                required={true}\r\n                                ref={this.intialImmunityRef}\r\n                            />\r\n                        </div>\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <NumSlider\r\n                                label={\"Initial Infected\"}\r\n                                showRange={true}\r\n                                min={INPUT_RANGES.INITIAL_INFECTED[0]}\r\n                                max={INPUT_RANGES.INITIAL_INFECTED[1]}\r\n                                step={INPUT_RANGES.INITIAL_INFECTED[2]}\r\n                                maxText={\"Population\"}\r\n                                required={true}\r\n                                ref={this.initialInfectedRef}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <NumSlider\r\n                                label={\"Simulation Length (Days)\"}\r\n                                showRange={true}\r\n                                min={INPUT_RANGES.SIMULATION_LENGTH[0]}\r\n                                max={INPUT_RANGES.SIMULATION_LENGTH[1]}\r\n                                step={INPUT_RANGES.SIMULATION_LENGTH[2]}\r\n                                required={true}\r\n                                ref={this.daysRef}\r\n                            />\r\n                        </div>\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <label>Presets:</label>\r\n                            <select ref={this.presetRef} className=\"form-control\" onChange={this.onPresetChange.bind(this)}>\r\n                                <option>Custom</option>\r\n                                <option>Seasonal Flu</option>\r\n                                <option>Smallpox</option>\r\n                                <option>Polio</option>\r\n                                <option>Measles</option>\r\n                                <option>Ebola</option>\r\n                                <option>H1N1 Flu</option>\r\n                                <option>H5N1 Flu</option>\r\n                                <option>1918 Flu</option>\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group text-center\">\r\n                        <button className=\"input-btn\" disabled={this.state.pending}>Run</button>&nbsp;\r\n                        <button onClick={this.onReset.bind(this)} className=\"input-btn\" disabled={this.state.pending} type=\"button\" >Reset</button>&nbsp;\r\n                        <button onClick={this.toggleExportModal.bind(this)} className=\"input-btn\" disabled={this.state.pending} type=\"button\" >Export</button>\r\n                    </div>\r\n                </form>\r\n                <div>{this.state.message}</div>\r\n                <ExportsModal\r\n                    isOpen={this.state.exportModalOpen}\r\n                    toggle={this.toggleExportModal.bind(this)}\r\n                    getInputsDictionary={this.getInputsDictionary.bind(this)}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport ReactModal from \"react-modal\"\r\nimport { Ajax } from \"../Ajax\";\r\n\r\nexport class MailModal extends React.Component{\r\n\r\n\tconstructor(props){\r\n        super(props);\r\n\r\n        // input refs\r\n        this.textRef = React.createRef();\r\n        this.errorRef = React.createRef();\r\n        this.headerRef = React.createRef();\r\n\r\n        this.type = null;\r\n        this.typeError = true;\r\n        this.errorTime = false;\r\n        this.errorMsg = \"\";\r\n\r\n        this.state = { \r\n\t\t\tother: false,\r\n\t\t\terrMessage:null,\r\n\t\t\tsuccessMessage:null,\r\n\t\t\tdisabled: false\r\n        };\r\n\r\n        //Modal.setAppElement(this.props.app);\r\n\t}\r\n\r\n\tcomponentDidUpdate(prevProps){\r\n\t\t// clear messages when the visibility changes\r\n\t\tif(prevProps.showModal && !this.props.showModal){\r\n\t\t\tthis.setState({errMessage: null, successMessage: null});\r\n\t\t}\r\n\t}\r\n\r\n\t// on click of submit button \r\n\tsubmitClick(e){\r\n\t\tthis.setState({errMessage:null});\r\n\t\te.preventDefault();\r\n\t\tlet goodHeader = this.headerRef.current ? (this.headerRef.current.value.length > 0) : true;\r\n\t\tif(this.type != null && this.textRef.current.value != \"\" && goodHeader){\r\n\t\t\tlet message = this.BuildArray();\r\n\r\n\t\t\t// localhost = dev, else = prod\r\n\t\t\tlet origin = window.location.origin.includes(\"localhost\") ? \"http://localhost:8080\" : window.location.origin;\r\n\r\n\t\t\t// sending message, disable send button\r\n\t\t\tthis.setState({successMessage: \"Sending...\", errMessage: null, disabled: true});\r\n\r\n\t\t\tAjax.post(`${origin}/mail`, null, message)\r\n\t\t\t\t.then(xhr => {  \r\n                    // ajax resolved (could be bad/good request, but server responded)\r\n                    if(xhr.status === 200){\r\n\t\t\t\t\t\t// good request - attempt to parse results json\r\n\t\t\t\t\t\tthis.setState({successMessage:\"Submit Successful\", errMessage: null, disabled: false});\r\n                    }\r\n                    else{\r\n\t\t\t\t\t\t// bad request\r\n\t\t\t\t\t\tthis.setState({errMessage:\"Bad Request Error\", successMessage: null, disabled: false});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\t// clear inputs\r\n\t\t\t\t\tif(this.headerRef.current){\r\n\t\t\t\t\t\tthis.headerRef.current.value = \"\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.textRef.current.value = \"\";\r\n                })\r\n                .catch(err => {\r\n                    // ajax request died (really bad NOT a 400 error!)\r\n\t\t\t\t\tthis.setState({errMessage:\"Cannot reach server\", disabled: false});// request died signal\r\n                });\r\n\t\t}\r\n\t}\r\n\t\r\n\t//Build the JSON array that is sent over the Ajax request\r\n\tBuildArray(){\r\n\t\t//get the text in the the message textarea\r\n\t\tlet text = this.textRef.current.value;\r\n\t\t//\r\n        let type = \"\";\r\n\r\n        if(this.state.other){\r\n        \ttype = this.headerRef.current.value;\r\n        }else{\r\n        \ttype = this.type;\r\n        }\r\n\r\n        // MUST match API expectations! \r\n        return {type,text};\r\n    }\r\n\r\n\t// on change of radio button set type\r\n\tonTypeSelect(type){\r\n\t\t//get the type of the radio button selected\r\n\t \tthis.type = type;\r\n\r\n\t\t// check to see if other is selected\r\n\t\tthis.setState({other: this.type === \"other\"});\r\n\r\n\t \tthis.typeError = false;\r\n\t }\r\n\r\n\t //Check if other is selcted and load elements based on that\r\n \t TypeOther(){\r\n\t \tif(!this.state.other){\r\n\t\t\t // remove element of screen\r\n\t \t\treturn null;\r\n\t \t}else{\r\n\t\t\t //load element onto screen\r\n\t \t\treturn(\r\n\t \t\t\t<div>\r\n\t \t\t\t\t<label>Other: </label> <input type=\"text\" placeholder=\"Input for other\" ref={this.headerRef} required/>\r\n\t \t\t\t</div>\r\n\t \t\t);\r\n\t \t}\r\n\t }\r\n\t \r\n\trender(){\r\n\t\treturn this.props.showModal ? (\r\n\t\t\t<div>\r\n\t\t\t\t<ReactModal isOpen={this.props.showModal} >\r\n\t\t\t\t\t<div className=\"col-lg-1\">\r\n\t\t\t  \t\t\t<span className=\"pointer\" onClick={this.props.closeModal}>&times;</span>\r\n\t\t\t  \t\t</div>\r\n\t\t\t  \t\t<div className=\"container border\">\r\n\t\t\t\t\t  <form onSubmit={this.submitClick.bind(this)}>\r\n\t\t\t\t\t  \t\t<div>\r\n\t\t\t\t\t\t\t\t<div className=\"header center\">\r\n\t\t\t\t\t\t\t\t\t<h2 className=\"modalHeader\">Contact Us</h2>\r\n\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t<span className=\"error\">\r\n\t\t\t\t\t\t\t\t\t\t{this.state.errMessage}\r\n\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t\t<span className=\"success\">\r\n\t\t\t\t\t\t\t\t\t\t{this.state.successMessage}\r\n\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div className=\"form-group center\">\r\n\t\t\t\t\t\t\t\t\t<input type=\"radio\" onChange={() => this.onTypeSelect(\"Bug Report\")} name=\"types\" value=\"problem\" required/>Have a problem?\r\n\t\t\t\t\t\t\t\t\t&nbsp;\r\n\t\t\t\t\t\t\t\t\t<input type=\"radio\" onChange={() => this.onTypeSelect(\"Feature Request\")} name=\"types\" value=\"idea\" required/>Have an idea?\r\n\t\t\t\t\t\t\t\t\t&nbsp;\r\n\t\t\t\t\t\t\t\t\t<input type=\"radio\" onChange={() => this.onTypeSelect(\"other\")} name=\"types\" value=\"other\" required/>Other\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div className=\"form-group center\">\r\n\t\t\t\t\t\t\t\t\t{this.TypeOther()}\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div className=\"form-group center\">\r\n\t\t\t\t\t\t\t\t\t<textarea className=\"modal-text-area\" placeholder=\"Type message in here.\" ref={this.textRef} required></textarea>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div className=\"form-group center\">\r\n\t\t\t\t\t\t\t\t\t<input className=\"input-btn\" type=\"submit\" disabled={this.state.disabled} />\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</form>\r\n\t\t\t\t\t</div>\r\n      \t\t\t</ReactModal>\r\n\t\t\t</div>\r\n\t\t) : null;\r\n\t}\r\n}","import React from \"react\";\r\nimport { Dropdown, DropdownToggle, DropdownMenu, DropdownItem, Navbar as RNavbar, NavItem, Collapse, NavbarToggler, Nav, NavLink } from \"reactstrap\";\r\nimport { NavbarBrand } from 'reactstrap';\r\nimport { MailModal } from \"./MailModal\"\r\nimport Simulator from \"../Simulator\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\nexport class Navbar extends React.Component{\r\n\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\r\n\t    this.state = {\r\n\t\t\tshowNav: false,\t\t\t// navbar collapse\r\n\t\t\tshowModal: false,\t\t// mail modal visibility\r\n\t\t\tshowAdvanced: false\t\t// advanced dropdown menu visibility\r\n\t    };\r\n\r\n\t}\r\n\r\n\t// close the mail modal\r\n\tcloseModal(){\r\n\t\tthis.setState({showModal: false});\r\n\t}\r\n\r\n\t// show the mail modal\r\n\topenModal(){\r\n\t\tthis.setState({showModal: true});\r\n\t}\r\n\r\n\t// toggles the navbar collapse state\r\n\ttoggleNavbar(){\r\n\t\tthis.setState(prev => ({showNav: !prev.showNav}));\r\n\t}\r\n\r\n\t// toggle advanced dropdown\r\n\ttoggleDropdown(){\r\n\t\tthis.setState(prev => ({showAdvanced: !prev.showAdvanced}));\r\n\t}\r\n\r\n\t// advanced dropdown error correction option toggle\r\n\ttoggleErrorCorrection(){\r\n\t\tSimulator.isErrCorrecting = !Simulator.isErrCorrecting;\r\n\t}\r\n\r\n\trender(){\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<RNavbar color=\"light\" light expand=\"md\">\r\n\t\t\t\t\t<NavbarBrand>\r\n\t\t\t\t\t\t<span className=\"pp-heading\">The Plague Project</span>\r\n\t\t\t\t\t\t&nbsp;\r\n\t\t\t\t\t\t<FontAwesomeIcon className=\"skull-icon\" icon=\"skull\"></FontAwesomeIcon>\r\n\t\t\t\t\t\t&nbsp;\r\n\t\t\t\t\t\t<a href='/'>Disease Simulator</a>\r\n\t\t\t\t\t</NavbarBrand>\r\n\t\t\t\t\t<NavbarToggler color=\"dark\" onClick={this.toggleNavbar.bind(this)}/>\r\n\t\t\t\t\t<Collapse isOpen={this.state.showNav} navbar>\t\t\t\t\t\r\n\t\t\t\t\t\t<Nav navbar  className=\"ml-auto\">\r\n\t\t\t\t\t\t\t{/*<NavItem>\r\n\t\t\t\t\t\t\t\t<NavLink className=\"pointer\" >FAQ</NavLink>\r\n\t\t\t\t\t\t\t</NavItem>*/}\r\n\t\t\t\t\t\t\t<NavItem>\r\n\t\t\t\t\t\t\t\t<NavLink  className=\"pointer\" selected onClick={this.openModal.bind(this)}>Contact Us</NavLink>\r\n\t\t\t\t\t\t\t</NavItem>\r\n\t\t\t\t\t\t\t<NavItem>\r\n\t\t\t\t\t\t\t\t<Dropdown isOpen={this.state.showAdvanced} toggle={this.toggleDropdown.bind(this)}>\r\n\t\t\t\t\t\t\t\t\t\t<DropdownToggle caret color=\"light\">\r\n\t\t\t\t\t\t\t\t\t\t\tAdvanced\r\n\t\t\t\t\t\t\t\t\t\t</DropdownToggle>\r\n\t\t\t\t\t\t\t\t\t\t<DropdownMenu>\r\n\t\t\t\t\t\t\t\t\t\t\t<DropdownItem className=\"errCorrect\" onClick={this.toggleErrorCorrection.bind(this)}>\r\n\t\t\t\t\t\t\t\t\t\t\t{Simulator.isErrCorrecting ? \"Disable\" : \"Enable\"}<br />Error Correction\r\n\t\t\t\t\t\t\t\t\t\t\t</DropdownItem>\r\n\t\t\t\t\t\t\t\t\t\t</DropdownMenu>\r\n\t\t\t\t\t\t\t\t\t</Dropdown>\r\n\t\t\t\t\t\t\t</NavItem>\r\n\t\t\t\t\t\t\t<NavItem>\r\n\t\t\t\t\t\t\t\t<NavLink href='https://github.com/davidrosenblum/Plague-Project'>\r\n\t\t\t\t\t\t\t\t\t<FontAwesomeIcon icon={['fab', 'github']} />\r\n\t\t\t\t\t\t\t\t\t&nbsp;\r\n\t\t\t\t\t\t\t\t\t<span className=\"Version\">v0.2</span>\r\n\t\t\t\t\t\t\t\t</NavLink>\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t</NavItem>\r\n\t\t\t\t\t\t</Nav>\r\n\t\t\t\t\t</Collapse>\r\n\t\t\t\t</RNavbar>\r\n\t\t\t\t<MailModal showModal={this.state.showModal} closeModal={this.closeModal.bind(this)} />\r\n\t      \t</div>\r\n\t\t);\r\n\t}\r\n}","import React from \"react\";\r\nimport Simulator from \"../Simulator\";\r\n\r\nexport class Table extends React.Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\tvisible: false\t//true/false if simulator data to render\r\n\t\t};\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\t// simulator singles data set loaded - render data\r\n\t\tSimulator.on(\"data\", () => this.setState({visible: true}));\r\n\r\n\t\t// simulator signals a reset - nothing to render\r\n\t\tSimulator.on(\"reset\", () => this.setState({visible: false}));\r\n\t}\r\n\r\n\r\n\tgetStyleForDay(index){\r\n\t\tlet style = null;\r\n\r\n\t\tif(Simulator.firstInvalidDay > -1){\r\n\t\t\tif(index === Simulator.firstInvalidDay){\r\n\t\t\t\t// this row is first invalid day\r\n\t\t\t\tstyle = {\r\n\t\t\t\t\tborderLeft: \"5px solid red\",\r\n\t\t\t\t\tborderRight: \"5px solid red\"\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\telse if(index > Simulator.firstInvalidDay){\r\n\t\t\t\t// subsequent invalid days\r\n\t\t\t\tstyle = {\r\n\t\t\t\t\tborderLeft: \"1px solid red\",\r\n\t\t\t\t\tborderRight: \"1px solid red\"\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t}\t\t\r\n\r\n\t\treturn style;\r\n\t}\r\n\r\n\t// renders table rows up to the current simulation day\r\n\trenderRows(){\r\n\t\tlet data = Simulator.data;\r\n\r\n\t\tif(data){\r\n\t\t\tlet rows = new Array(data.length + 1);\r\n\r\n\t\t\tdata.forEach((dayData, index) => {\r\n\t\t\t\t// extract data\r\n\t\t\t\tlet susceptible = \tMath.round(dayData.Susceptible),\r\n\t\t\t\t\tinfected = \t\tMath.round(dayData.Infected),\r\n\t\t\t\t\timmune = \t\tMath.round(dayData.Immune),\r\n\t\t\t\t\tdead = \t\t\tMath.round(dayData.Dead),\r\n\t\t\t\t\tpopulation = \tMath.round(dayData.TotalPopulation);\r\n\r\n\t\t\t\t// get the style (for data correction)\r\n\t\t\t\tlet style = this.getStyleForDay(index);\r\n\r\n\t\t\t\t// create table row\r\n\t\t\t\t// (toLocalString adds the ',' as the number grows in thousands)\r\n\t\t\t\trows[index] = (\r\n\t\t\t\t\t<tr key={index} style={style}>\r\n\t\t\t\t\t\t<td>{index}</td>\r\n\t\t\t\t\t\t<td>{susceptible.toLocaleString()}</td>\r\n\t\t\t\t\t\t<td>{infected.toLocaleString()}</td>\r\n\t\t\t\t\t\t<td>{immune.toLocaleString()}</td>\r\n\t\t\t\t\t\t<td>{dead.toLocaleString()}</td>\r\n\t\t\t\t\t\t<td>{population.toLocaleString()}</td>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t);\r\n\t\t\t});\r\n\r\n\t\t\treturn rows;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n\r\n\trender(){\r\n\t\treturn this.state.visible ? (\r\n\t\t\t<div>\r\n\t\t\t\t<table className=\"table table-striped overflow-table\">\r\n\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t<th>Day</th>\r\n\t\t\t\t\t\t\t<th>Susceptible</th>\r\n\t\t\t\t\t\t\t<th>Infected</th>\r\n\t\t\t\t\t\t\t<th>Immune</th>\r\n\t\t\t\t\t\t\t<th>Dead</th>\r\n\t\t\t\t\t\t\t<th>Total Population</th>\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t</thead>\r\n\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t{this.renderRows()}\r\n\t\t\t\t\t</tbody>\r\n\t\t\t\t</table>\r\n\t\t\t\t<div className=\"text-center\">\r\n\t\t\t\t\t{Simulator.firstInvalidDay > -1 ? `* Error correction begins on day ${Simulator.firstInvalidDay} *` : null}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t) : null;\r\n\t}\r\n}","import \"./GraphRange.css\"\r\nimport React from \"react\";\r\nimport GraphData from \"../GraphData\";\r\n\r\nexport class GraphRange extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.lowerRef = React.createRef();\r\n        this.upperRef = React.createRef();\r\n    }\r\n\r\n    onChangeLow(){\r\n        let lowValue = this.lowerRef.current.value,\r\n            low = parseInt(lowValue);\r\n\r\n        if(lowValue.length){\r\n            let high = this.selectedMax || this.props.max;\r\n\r\n            low = Math.max(this.props.min, low);\r\n            low = Math.min(low, high - 1);\r\n\r\n            this.lowerRef.current.value = low;\r\n\r\n            GraphData.startDay = low;\r\n        }\r\n    }\r\n\r\n    onChangeHigh(){\r\n        let highValue = this.upperRef.current.value,\r\n            high = parseInt(highValue);\r\n\r\n        if(highValue.length){\r\n            let low = this.selectedMin || this.props.min;\r\n\r\n            high = Math.max(low + 1, high);\r\n            high = Math.min(high, this.props.max);\r\n\r\n            this.upperRef.current.value = high;\r\n\r\n            GraphData.endDay = high;\r\n        }\r\n    }\r\n\r\n    onSubmit(evt){\r\n        evt.preventDefault();\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"graph-range-container\">\r\n                <form onSubmit={this.onSubmit.bind(this)}>\r\n                    <input\r\n                        ref={this.lowerRef}\r\n                        min={this.props.min}\r\n                        max={this.props.max}\r\n                        step={1}\r\n                        defaultValue={this.props.min}\r\n                        placeholder=\"Start\"\r\n                        type=\"number\"\r\n                        required\r\n                        onChange={this.onChangeLow.bind(this)}\r\n                    />&nbsp;\r\n                    <input\r\n                        ref={this.upperRef}\r\n                        min={this.props.min}\r\n                        max={this.props.max}\r\n                        step={1}\r\n                        defaultValue={this.props.max}\r\n                        placeholder=\"End\"\r\n                        type=\"number\"\r\n                        required\r\n                        onChange={this.onChangeHigh.bind(this)}\r\n                    />\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    get selectedMin(){\r\n        return parseFloat(this.lowerRef.current.value) || this.props.min;\r\n    }\r\n\r\n    get selectedMax(){\r\n        return parseFloat(this.upperRef.current.value) || this.props.max;\r\n    }\r\n}","import \"./TrendLine.css\";\r\nimport React from \"react\";\r\nimport GraphData from \"../GraphData\";\r\n\r\nexport class TrendLine extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.rangeRef = React.createRef();\r\n        this.numRef = React.createRef();\r\n    }\r\n\r\n    onSlide(){\r\n        let val = this.rangeRef.current.value;\r\n        GraphData.trendLineY = parseInt(val);\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"trend-line-container\">\r\n                <input\r\n                    className=\"trend-slider\"\r\n                    ref={this.rangeRef}\r\n                    type=\"range\"\r\n                    min={this.props.min || 0}\r\n                    max={this.props.max}\r\n                    step={100}\r\n                    defaultValue={this.props.defaultValue || 0}\r\n                    onChange={this.onSlide.bind(this)}\r\n                />\r\n                <div className=\"trend-line-text\">\r\n                    Trend Line\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    get value(){\r\n        return this.rangeRef.current.value;\r\n    }\r\n}","import React from \"react\";\r\nimport { LineChart } from \"react-easy-chart\"\r\nimport Simulator from \"../Simulator\";\r\nimport GraphData from \"../GraphData\";\r\nimport { GraphRange } from \"./GraphRange\";\r\nimport { TrendLine } from \"./TrendLine\";\r\n\r\n// graph size constants\r\nconst WIDTH = \t\t540,\r\n\tHEIGHT = \t\t475,\r\n\tMARGIN_TOP = \t10,\r\n\tMARGIN_BOTTOM =\t50,\r\n\tMARGIN_LEFT = \t80,\r\n\tMARGIN_RIGHT = \t10;\r\n\r\n// graph line colors\r\nconst COLORS = {\r\n\t\"Infected\": \t\"green\",\r\n\t\"Susceptible\": \t\"red\",\r\n\t\"Immune\": \t\t\"steelblue\",\r\n\t\"Dead\": \t\t\"gray\",\r\n\t\"TrendLine\":\t\"black\"\r\n};\r\n\r\nexport class Graph extends React.Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\r\n\t\tthis.graphContainerRef = React.createRef();\r\n\t\t\r\n\t    this.state = {\r\n\t\t\tvisible: false,\t\t\t\t\t\t// true/false if simulator data to render\r\n\t\t\ttooltip: null,\t\t\t\t\t\t// text to display\r\n\t\t\tcontainerWidth: WIDTH,\t\t\t\t// line graph parent width\r\n\t\t\tgraphLabels: {}\t\t\t\t\t\t// selected graph labels (Infected, Susceptible, etc)\r\n\t    };\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\t// auto select infected\r\n\t\tthis.toggleLabel(\"Infected\");\r\n\r\n\t\t// simulator singles data set loaded - render data\r\n\t\tSimulator.on(\"data\", () => this.setState({visible: true}));\r\n\r\n\t\t// simulator reset - nothing to render\r\n\t\tSimulator.on(\"reset\", () => this.setState({visible: false}));\r\n\r\n\t\t// graph update\r\n\t\tGraphData.on(\"update\", () => this.forceUpdate());\r\n\r\n\t\t// when the window size changes - resize the graph if neccessary\r\n\t\twindow.addEventListener(\"resize\", this.onResize.bind(this));\r\n\t\tthis.onResize();\r\n\t}\r\n\r\n\tcomponentDidUpdate(prevProps, prevState){\r\n\t\tif(prevState.yLabel !== this.state.yLabel){\r\n\t\t\tthis.setState({tooltip: null});\r\n\t\t}\r\n\t}\r\n\t\r\n\t// when a label ('Infected', 'Susceptible', etc) is clicked...\r\n\ttoggleLabel(label){\r\n\t\t// copy labels dictionary\r\n\t\tlet nextLabels = Object.assign({}, this.state.graphLabels);\r\n\r\n\t\t// toggle parameter label\r\n\t\tif(label in nextLabels){\r\n\t\t\tnextLabels[label] = !nextLabels[label];\r\n\t\t}\r\n\t\telse{\r\n\t\t\tnextLabels[label] = true;\r\n\t\t}\r\n\r\n\t\t// update state\r\n\t\tthis.setState({graphLabels: nextLabels});\r\n\t}\r\n\r\n\t// when a point on the graph is clicked...\r\n\tonGraphClick(data, evt){\r\n\t\tlet {x, y} = data;\r\n\t\tthis.setState({tooltip: `${Math.round(y)} people on day ${x}.`});\r\n\t}\r\n\r\n    onResize(){\r\n        // updates the state to reflect the maximum size allowed for the graph\r\n        let element = this.graphContainerRef.current;\r\n\t\tif(element){\r\n\t\t\tthis.setState({containerWidth: element.getBoundingClientRect().width});\r\n\t\t}\r\n    }\r\n\r\n\t// renders a simple HTML key for the graph line/colors\r\n\trenderLabelButtons(){\r\n\t\tlet labels = this.state.graphLabels;\r\n\r\n\t\t// border style for button (null = no change)\r\n\t\tlet borders = [\r\n\t\t\t(labels.Infected === true) ? `2px solid ${COLORS.Infected}` : null,\r\n\t\t\t(labels.Susceptible === true) ? `2px solid ${COLORS.Susceptible}` : null,\r\n\t\t\t(labels.Immune === true) ? `2px solid ${COLORS.Immune}` : null,\r\n\t\t\t(labels.Dead === true) ? `2px solid ${COLORS.Dead}` : null\r\n\t\t];\r\n\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<button style={{color: COLORS[\"Infected\"], borderBottom: borders[0]}} onClick={() => this.toggleLabel(\"Infected\")} className=\"pointer graph-button\">Infected</button>\r\n\t\t\t\t<button style={{color: COLORS[\"Susceptible\"], borderBottom: borders[1]}} onClick={() => this.toggleLabel(\"Susceptible\")} className=\"pointer graph-button\">Susceptible</button>\r\n\t\t\t\t<button style={{color: COLORS[\"Immune\"], borderBottom: borders[2]}} onClick={() => this.toggleLabel(\"Immune\") }className=\"pointer graph-button\">Immune</button>\r\n\t\t\t\t<button style={{color: COLORS[\"Dead\"], borderBottom: borders[3]}} onClick={() => this.toggleLabel(\"Dead\")} className=\"pointer graph-button\">Dead</button>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\r\n\t// exports the current svg graph to a jpg file \r\n\tdownloadJPG(){\r\n\t\tlet container = this.graphContainerRef.current;\r\n\t\tif(container){\r\n\t\t\t// get svg element\r\n\t\t\tlet svgElement = container.querySelector(\"svg\");\r\n\r\n\t\t\t// create canvas\r\n\t\t\tlet canvas = document.createElement(\"canvas\");\r\n\t\t\tlet ctx = canvas.getContext(\"2d\");\r\n\r\n\t\t\t// resize canvas to svg\r\n\t\t\tcanvas.width = svgElement.getAttribute(\"width\");\r\n\t\t\tcanvas.height = svgElement.getAttribute(\"height\");\r\n\r\n\t\t\t// convert svg element to xml \r\n\t\t\tlet svgXml = new XMLSerializer().serializeToString(svgElement);\r\n\r\n\t\t\t// create a data url from the svg+xml\r\n\t\t\tlet blob = new Blob([svgXml], {type: \"image/svg+xml\"});\r\n\t\t\tlet svgUrl = window.URL.createObjectURL(blob);\r\n\r\n\t\t\t// create an image to hold the svg data url \r\n\t\t\tlet svgImage = document.createElement(\"img\");\r\n\r\n\t\t\t// when the svgxml image loads...\r\n\t\t\tsvgImage.onload = () => {\r\n\t\t\t\t// draw svg+xml onto canvas\r\n\t\t\t\tctx.imageSmoothingEnabled = true;\r\n\t\t\t\tctx.imageSmoothingQuality = \"high\";\r\n\t\t\t\tctx.drawImage(svgImage, 0, 0);\r\n\r\n\t\t\t\t// remove black background for white \r\n\t\t\t\tctx.globalCompositeOperation = \"destination-over\";\r\n\t\t\t\tctx.fillStyle = \"white\";\r\n\t\t\t\tctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n\t\t\t\t// get jpg data\r\n\t\t\t\tlet jpg = document.createElement(\"img\");\r\n\t\t\t\tjpg.onload = () => {\r\n\t\t\t\t\t// jpg is rasterized svg\r\n\t\t\t\t\t// (implement download here)\r\n\t\t\t\t\t//document.body.appendChild(jpg);\r\n\t\t\t\t\twindow.URL.revokeObjectURL(svgUrl);\r\n\t\t\t\t}\r\n\t\t\t\tjpg.setAttribute(\"src\", canvas.toDataURL(\"image/jpeg\"));\r\n\t\t\t};\r\n\r\n\t\t\t// load the svgxml data\r\n\t\t\tsvgImage.setAttribute(\"src\", svgUrl);\r\n\t\t}\r\n\t}\r\n\r\n\trender(){\r\n\t\tif(this.state.visible){\r\n\t\t\tlet data = GraphData.getData(this.state.graphLabels);\r\n\t\t\tlet dayCount = data.values.length ? data.values[0].length : 0;\r\n\t\t\tlet width = Math.min(this.state.containerWidth, WIDTH);\r\n\r\n\t\t\treturn (\r\n\t\t\t\t<div className=\"graph-container\">\r\n\t\t\t\t\t<h5>{data.labels.join(\" + \") || \"(Nothing Selected)\"}</h5>\r\n\t\t\t\t\t{this.renderLabelButtons()}\r\n\t\t\t\t\t<div ref={this.graphContainerRef}>\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<LineChart\r\n\t\t\t\t\t\t\t\tdata={data.values}\r\n\t\t\t\t\t\t\t\twidth={width}\r\n\t\t\t\t\t\t\t\theight={HEIGHT}\r\n\t\t\t\t\t\t\t\tmargin={{\r\n\t\t\t\t\t\t\t\t\ttop: MARGIN_TOP, bottom: MARGIN_BOTTOM,\r\n\t\t\t\t\t\t\t\t\tleft: MARGIN_LEFT, right: MARGIN_RIGHT\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\taxes\r\n\t\t\t\t\t\t\t\taxisLabels={{x: \"Days Elapsed\", y: \"People\"}}\r\n\t\t\t\t\t\t\t\tdataPoints={dayCount < 0} // enable this later\r\n\t\t\t\t\t\t\t\txDomainRange={[GraphData.startDay, GraphData.endDay]}\r\n\t\t\t\t\t\t\t\tyDomainRange={[0, data.largestY]}\r\n\t\t\t\t\t\t\t\tlineColors={data.labels.map(label => COLORS[label])}\r\n\t\t\t\t\t\t\t\tclickHandler={this.onGraphClick.bind(this)}\r\n\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\t\".label\": {fill: \"black\"},\r\n\t\t\t\t\t\t\t\t\t\".axis\": {fontSize: \"0.75em\", fontFamily: \"arial\"}\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t<TrendLine max={data.largestY}/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<GraphRange\r\n\t\t\t\t\t\t\tmin={0}\r\n\t\t\t\t\t\t\tmax={Simulator.data.length - 1 || 0}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"text-center\">\r\n\t\t\t\t\t\t{this.state.tooltip}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t\treturn <div ref={this.graphContainerRef}></div> // required for resize to work! \r\n\t}\r\n} ","import \"../lib/bootstrap.min.css\";\r\nimport \"./App.css\";\r\nimport \"./Print.css\";\r\nimport React from \"react\";\r\nimport { Container, Row, Col, Card, CardBody } from \"reactstrap\";\r\nimport { Inputs } from \"./Inputs\";\r\nimport { Navbar } from \"./Navbar\";\r\nimport { Table } from \"./Table\";\r\nimport { Graph } from \"./Graph\";\r\nimport { library } from '@fortawesome/fontawesome-svg-core';\r\nimport { fab } from '@fortawesome/free-brands-svg-icons';\r\nimport { faAngleDoubleLeft, faAngleDoubleRight, faSkull, faBalanceScale } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nlibrary.add(fab, faAngleDoubleLeft, faAngleDoubleRight, faSkull, faBalanceScale);\r\nlet d = new Date();\r\n\r\nexport class App extends React.Component{\r\n    render(){\r\n        return (\r\n            <div>\r\n                <Navbar/>\r\n                <br/>\r\n                <main>\r\n                    <Container>\r\n                        <Card color=\"light\">\r\n                            <CardBody>\r\n                                <Row className=\"text-center input-graph-container\">\r\n                                    <div className=\"print-title-containter d-none d-print-block\">\r\n                                        <h1>The Plague Project</h1>\r\n                                        <FontAwesomeIcon className=\"skull-icon\" icon=\"skull\" size=\"lg\"></FontAwesomeIcon>\r\n                                        <h2>Disease Simulator</h2>                                        \r\n                                    </div>\r\n                                    <Col lg={6}>\r\n                                        <Inputs/>\r\n                                    </Col>\r\n                                    <Col lg={6}>\r\n                                        <Graph/>\r\n                                    </Col>\r\n                                </Row>\r\n                                <br/>\r\n                                <div>\r\n                                    <Table/>\r\n                                </div>\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Container>\r\n                </main>\r\n                <footer>\r\n                    <Container className=\"text-center\">\r\n                        <hr/>\r\n                        <Row>\r\n                            <Col lg={6}>\r\n                                Juall\r\n                                &nbsp;\r\n                                <a href=\"https://github.com/rjuall\">\r\n                                    <FontAwesomeIcon icon={['fab', 'github-square']}></FontAwesomeIcon>\r\n                                </a>\r\n                                &nbsp;\r\n                                <a href=\"https://www.linkedin.com/in/rjuall/\">\r\n                                    <FontAwesomeIcon icon={['fab', 'linkedin']}></FontAwesomeIcon>\r\n                                </a>\r\n                                &nbsp;|&nbsp; \r\n                                Rosenblum\r\n                                &nbsp;\r\n                                <a href=\"https://github.com/davidrosenblum\">\r\n                                    <FontAwesomeIcon icon={['fab', 'github-square']}></FontAwesomeIcon>\r\n                                </a>\r\n                                &nbsp;|&nbsp;\r\n                                Pojero\r\n                                &nbsp;\r\n                                <a href=\"https://github.com/jpojero\">\r\n                                    <FontAwesomeIcon icon={['fab', 'github-square']}></FontAwesomeIcon>\r\n                                </a>\r\n                                &nbsp;|&nbsp;\r\n                                Erry\r\n                                &nbsp;\r\n                                <a href=\"https://linkedin.com/in/karanerry\">\r\n                                    <FontAwesomeIcon icon={['fab', 'linkedin']}></FontAwesomeIcon>\r\n                                </a>\r\n                            </Col>\r\n                            <Col lg={6}>                                \r\n                                <a href=\"https://github.com/davidrosenblum/Plague-Project/blob/master/LICENSE\" target=\"_blank\">\r\n                                    <FontAwesomeIcon icon=\"balance-scale\" size=\"sm\"></FontAwesomeIcon>\r\n                                    &nbsp;\r\n                                    MIT License\r\n                                    &copy;\r\n                                    { d.getFullYear() }\r\n                                </a>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </footer>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { App } from \"./components/App\";\r\n\r\nReactDOM.render(<App/>, document.querySelector(\"#root\"));"],"sourceRoot":""}