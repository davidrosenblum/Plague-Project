{"version":3,"sources":["Ajax.js","EventEmitter.js","Simulator.js","ParamStorage.js","components/NumSlider.jsx","preset.js","components/Inputs.jsx","components/MailModal.jsx","components/Navbar.jsx","components/Chart.jsx","GraphData.js","components/GraphRange.jsx","components/Graph.jsx","components/App.jsx","index.js"],"names":["Ajax","Object","classCallCheck","this","createClass","key","value","options","arguments","length","undefined","Promise","resolve","reject","method","url","window","location","origin","headers","query","data","xhr","XMLHttpRequest","h","onload","onerror","err","queryString","open","setRequestHeader","send","JSON","stringify","request","dict","qs","param","concat","substring","EventEmitter","_listeners","event","willTrigger","type","forEach","listener","eventType","push","listeners","i","splice","src_Simulator","Simulator","_this","possibleConstructorReturn","getPrototypeOf","call","_firstInvalidDay","_useErrCorrecting","_this2","href","includes","Access-Control-Allow-Origin","Error-Correction","isErrCorrecting","get","then","status","parse","response","parseInt","getResponseHeader","emit","Event","Error","catch","_this3","Content-Type","csvDataBlob","Blob","a","document","createElement","URL","createObjectURL","setAttribute","Date","now","click","revokeObjectURL","console","log","message","src_ParamStorage","ParamStorage","_numParamSets","_lastParamSet","_currDay","sessionStorage","clear","params","convertToTitleCase","paramsNotLastSave","setItem","numParamSets","removeItem","infectionLength","transmissionRate","virulence","initialPopulation","immunePercent","initialInfected","simulationLength","preset","saveParamsInputsDict","infection_length","transmission_rate","initial_population","immune_percent","initial_infected","simulation_length","newParams","paramId","json","getItem","firstStoredDay","getSavedParams","NumSlider","_React$Component","props","numRef","React","createRef","rangeRef","inherits","current","init","min","evt","val","parseFloat","target","Math","max","react_default","className","label","showRange","minText","maxText","ref","onChange","onNumber","bind","step","placeholder","required","disabled","onSlide","set","n","Component","presets","Seasonal Flu","Infection Length","Transmission","Virulence","Smallpox","Polio","Measles","Ebola","H1N1 Flu","H5N1 Flu","1918 Flu","Inputs","intialImmunityRef","transmissionRef","virulenceRef","initialInfectedRef","intialPopRef","infectionLengthRef","daysRef","presetRef","state","pending","isDisabled","on","onSimulatorLoad","onSimulatorError","URLSearchParams","search","getInputsDictionary","setState","reset","downloadCSVFile","hasData","currParams","runSimulation","load","preventDefault","direction","stepBackwards","stepForwards","currentParams","onPresetChange","_this4","id","onClick","switchParamSet","onSubmit","NumSlider_NumSlider","onReset","downloadCSV","MailModal","textRef","errorRef","headerRef","typeError","errorTime","errorMsg","other","errMessage","successMessage","prevProps","showModal","e","goodHeader","BuildArray","post","text","lib_default","isOpen","closeModal","submitClick","onTypeSelect","name","TypeOther","Navbar","showNav","showAdvanced","prev","reactstrap_es","color","light","expand","toggleNavbar","navbar","selected","openModal","toggle","toggleDropdown","caret","toggleErrorCorrection","MailModal_MailModal","Chart","visible","index","style","firstInvalidDay","borderLeft","borderRight","rows","Array","dayData","susceptible","round","Susceptible","infected","Infected","immune","Immune","dead","Dead","population","TotalPopulation","getStyleForDay","toLocaleString","renderRows","src_GraphData","GraphData","_startDay","_endDay","Number","MAX_SAFE_INTEGER","keysDict","simData","labeledPoints","largestY","start","startDay","end","endDay","day","y","pt","x","values","keys","labels","filter","GraphRange","lowerRef","upperRef","lowValue","selectedMin","toString","low","high","selectedMax","highValue","defaultValue","onChangeLow","onChangeHigh","WIDTH","COLORS","Graph","graphContainerRef","tooltip","containerWidth","graphLabels","toggleLabel","forceUpdate","addEventListener","onResize","prevState","yLabel","nextLabels","assign","element","getBoundingClientRect","width","borders","borderBottom","getData","dayCount","join","renderLabelButtons","react_easy_chart_lib","height","margin","top","bottom","left","right","axes","axisLabels","dataPoints","xDomainRange","yDomainRange","lineColors","map","clickHandler","onGraphClick",".label","fill",".axis","fontSize","fontFamily","GraphRange_GraphRange","App","apply","Navbar_Navbar","Inputs_Inputs","Graph_Graph","Chart_Chart","ReactDOM","render","App_App","querySelector"],"mappings":"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","file":"static/js/main.cb0886b1.chunk.js","sourcesContent":["export class Ajax{\r\n    // sends an async http request \r\n    static request(options={}){\r\n        return new Promise((resolve, reject) => {\r\n            // extract config from options object\r\n            let method = (typeof options.method === \"string\") ? options.method : \"GET\",\r\n                url = (typeof options.url === \"string\") ? options.url : window.location.origin,\r\n                headers = (typeof options.headers === \"object\" && options.headers) ? options.headers : {},\r\n                query = (typeof options.query === \"object\" && options.query) ? options.query : {},\r\n                data = (typeof options.data !== \"undefined\") ? options.data : null;\r\n\r\n            // create the request\r\n            let xhr = new XMLHttpRequest();\r\n\r\n            // attach listeners\r\n            xhr.onload = () => resolve(xhr);\r\n            xhr.onerror = err => reject(err);\r\n\r\n            // apply query string\r\n            if(query){\r\n                url += Ajax.queryString(query);\r\n            }\r\n\r\n            // open the request\r\n            xhr.open(method, url);\r\n\r\n            // apply http headers\r\n            for(let h in headers){\r\n                xhr.setRequestHeader(h, headers[h]);\r\n            }\r\n\r\n            // send the request\r\n            // send JSON if the data is not a string\r\n            if(data){\r\n                if(typeof data !== \"string\"){\r\n                    xhr.send(JSON.stringify(data));\r\n                }\r\n                else xhr.send(data);\r\n            }\r\n            else xhr.send();\r\n        });\r\n    }\r\n\r\n    // async http get request\r\n    static get(url, headers, query){\r\n        return Ajax.request({method: \"GET\", url, headers, query});\r\n    }\r\n\r\n    // async http post request\r\n    static post(url, headers, data){\r\n        return Ajax.request({method: \"POST\", url, headers, data});\r\n    }\r\n\r\n    // creates a query string from an object\r\n    static queryString(dict){\r\n        let qs = \"?\";\r\n\r\n        for(let param in dict){\r\n            qs += `${param}=${dict[param]}&`;\r\n        }\r\n\r\n        return qs.substring(0, qs.length - 1);\r\n    }\r\n}","// simple event emitter class\r\nexport class EventEmitter{\r\n    constructor(){\r\n        this._listeners = {};   // 'private' dictionary of {eventType: listenerFunction}\r\n    }\r\n\r\n    // triggers all listening functions\r\n    emit(event){\r\n        if(this.willTrigger(event.type)){\r\n            this._listeners[event.type].forEach(listener => listener(event));\r\n        }\r\n    }\r\n\r\n    // adds a listener\r\n    on(eventType, listener){\r\n        if(this.willTrigger(eventType)){\r\n            this._listeners[eventType].push(listener);\r\n        }\r\n        else{\r\n            this._listeners[eventType] = [listener];\r\n        }\r\n    }\r\n\r\n    // removes a listener\r\n    off(eventType, listener){\r\n        if(this.willTrigger(eventType)){\r\n            let listeners = this._listeners[eventType];\r\n\r\n            for(let i = 0; i < listeners.length; i++){\r\n                if(listeners[i] === listener){\r\n                    listeners.splice(i, 1);\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // checks if there are any listeners for a given type\r\n    willTrigger(eventType){\r\n        return eventType in this._listeners;\r\n    }\r\n}","import { Ajax } from \"./Ajax\";\r\nimport { EventEmitter } from \"./EventEmitter\";\r\n\r\n// singleton for holding simulation data\r\n// event-driven to keep chart + graph updated\r\nclass Simulator extends EventEmitter{\r\n    constructor(){\r\n        super();\r\n\r\n        this.data = null;                   // simulation data array\r\n        this._firstInvalidDay = -1;         // first invalid day (-1 = no invalid days)\r\n        this._useErrCorrecting = true;      // use error correction?\r\n    }\r\n\r\n    // hits the API for data, signals progress\r\n    // query should be a dictionary of the inputs, will be converted into a query string\r\n    load(query){\r\n        return new Promise((resolve, reject) => {\r\n            // figure out endpoint\r\n            let url = window.location.href.includes(\"localhost\") ? \"http://localhost:8080/plague\" : `${window.location.origin}/plague`;\r\n            \r\n            // CORS headers (use foreign domain)\r\n            let headers = {\r\n                \"Access-Control-Allow-Origin\": window.location.origin,\r\n                \"Error-Correction\": this.isErrCorrecting\r\n            };\r\n\r\n            // ajax call with query string\r\n            // (null headers)\r\n            Ajax.get(url, headers, query)\r\n                .then(xhr => {    \r\n                    // ajax resolved (could be bad/good request, but server responded)\r\n                    if(xhr.status === 200){\r\n                        // good request - attempt to parse results json\r\n                        try{\r\n                            // parse json\r\n                            this.data = JSON.parse(xhr.response);\r\n\r\n                            // extract first invalid day\r\n                            this._firstInvalidDay = parseInt(xhr.getResponseHeader(\"First-Invalid-Day\")) || -1;\r\n                        }\r\n                        catch(err){\r\n                            // json parse error (should never happen)\r\n                            reject(err);\r\n                            this.emit(new Event(\"error\"));  // server responded with bad request signal\r\n                        }\r\n\r\n                        // done, resolve promise and emit load + data\r\n                        resolve();\r\n                        this.emit(new Event(\"load\"));   // server responded with good request signal\r\n\r\n                        this.emit(new Event(\"data\"));   // parsed data signal\r\n                    }\r\n                    else{\r\n                        // bad request\r\n                        reject(new Error(xhr.response || \"Bad request\"));\r\n                        this.emit(new Event(\"error\"));  // server responded with bad request signal\r\n                    }\r\n                })\r\n                .catch(err => {\r\n                    // ajax request died (really bad NOT a 400 error!)\r\n                    reject(err);\r\n                    this.emit(new Event(\"error\"));  // request died signal\r\n                });\r\n        });\r\n    }\r\n\r\n    // asychronously downloads a csv file using ajax\r\n    downloadCSVFile(query){\r\n        return new Promise((resolve, reject) => {\r\n            // figure out endpoint origin\r\n            let origin = window.location.origin.includes(\"localhost\") ? \"http://localhost:8080\" : window.location.origin;\r\n\r\n            // figure out endpoint using origin\r\n            let url = `${origin}/plague`;\r\n\r\n            // http request headers\r\n            let headers = {\r\n                \"Access-Control-Allow-Origin\": window.location.origin,\r\n                \"Content-Type\": \"text/csv\",\r\n                \"Error-Correction\": this.isErrCorrecting\r\n            };\r\n\r\n            // get csv file via Ajax\r\n            Ajax.get(url, headers, query)\r\n                .then(xhr => {\r\n                    // server responded\r\n                    if(xhr.status === 200){\r\n                        // good http status - download\r\n                        // xhr.response = csv text\r\n                        // convert to blob\r\n                        let csvDataBlob = new Blob([xhr.response], {type: \"octet/stream\"});\r\n\r\n                        // create a 'secret' link using the blob\r\n                        let a = document.createElement(\"a\");\r\n                        let url = window.URL.createObjectURL(csvDataBlob);\r\n                        \r\n                        // setup the link to download blob data\r\n                        a.setAttribute(\"download\", `data_${Date.now()}.csv`);\r\n                        a.setAttribute(\"href\", url);\r\n\r\n                        // click the link to download the file\r\n                        a.click();\r\n                        window.URL.revokeObjectURL(url);\r\n\r\n                        // trigger any listeners\r\n                        resolve(\"File downloaded.\");\r\n                    }\r\n                    else{\r\n                        // bad http status - trigger listeners with error\r\n                        console.log(xhr.response);\r\n                        reject(new Error(\"Error downloading CSV file.\"));\r\n                    }\r\n                })\r\n                .catch(err => {\r\n                    // server did not responed - trigger listeners with error\r\n                    console.log(err.message);\r\n                    reject(new Error(\"Unable to download CSV file.\"))\r\n                });\r\n        });\r\n    }\r\n\r\n    // resets simulation to day 0 and clears all stored data\r\n    // (triggers listeners)\r\n    reset(){\r\n        this.data = null;\r\n        this.emit(new Event(\"reset\"));\r\n    }\r\n\r\n    set isErrCorrecting(value){\r\n        if(typeof value === \"boolean\"){\r\n            this._useErrCorrecting = value;\r\n        }\r\n        else throw new Error(\"isErrCorrecting must be set to a boolean value.\");\r\n    }\r\n\r\n    get hasData(){\r\n        return this.data !== null;\r\n    }\r\n\r\n    get firstInvalidDay(){\r\n        return this._firstInvalidDay;\r\n    }\r\n\r\n    get isErrCorrecting(){\r\n        return this._useErrCorrecting;\r\n    }\r\n}\r\n\r\n// singleton\r\nexport default new Simulator();","// class for managing parameter data history using session storage\r\nconst PARAM_STORAGE_LIMIT = 100;\r\n\r\nclass ParamStorage{\r\n    constructor(){\r\n        this._numParamSets = 0;\r\n        this._lastParamSet = null;\r\n        this._currDay = 0;\r\n\r\n        window.sessionStorage.clear();\r\n    }\r\n    \r\n    // saves parameters to session storage - expects query string format (as provided by inputs.jsx)\r\n    saveParamsInputsDict(dict){\r\n        let params = this.convertToTitleCase(dict);\r\n\r\n        // prevent saving multiple set same time in a row\r\n        if(this.paramsNotLastSave(params)){\r\n            window.sessionStorage.setItem(++this._numParamSets, JSON.stringify(params))\r\n            this._currDay = this.numParamSets;\r\n            this._lastParamSet = params;\r\n\r\n            // enforce storage capacity - begin deleting from the left bound\r\n            if(this.numParamSets > PARAM_STORAGE_LIMIT){\r\n                window.sessionStorage.removeItem(this.numParamSets - PARAM_STORAGE_LIMIT);\r\n            }\r\n\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // saves parameters to session storage\r\n    saveParams(infectionLength, transmissionRate, virulence, initialPopulation, immunePercent, initialInfected, simulationLength, preset){\r\n        return this.saveParamsInputsDict({\r\n            infection_length:   infectionLength,\r\n            transmission_rate:  transmissionRate,\r\n            virulence,\r\n            initial_population: initialPopulation,\r\n            immune_percent:     immunePercent,\r\n            initial_infected:   initialInfected,\r\n            simulation_length:  simulationLength,\r\n            preset\r\n        });\r\n    }\r\n\r\n    // converts underscore format dict to title case (ex: initial_population to InitialPopulation)\r\n    convertToTitleCase(dict){\r\n        return {\r\n            infectionLength:    dict.infection_length,\r\n            transmissionRate:   dict.transmission_rate,\r\n            virulence:          dict.virulence,\r\n            initialPopulation:  dict.initial_population,\r\n            immunePercent:      dict.immune_percent,\r\n            initialInfected:    dict.initial_infected,\r\n            simulationLength:   dict.simulation_length,\r\n            preset:             dict.preset\r\n        };\r\n    }\r\n\r\n    // checks if 'newParams' is content different from the last save param set\r\n    paramsNotLastSave(newParams){\r\n        if(!this._lastParamSet) return true;\r\n\r\n        for(let param in this._lastParamSet){\r\n            if(this._lastParamSet[param] !== newParams[param]){\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // gets saved parameters\r\n    getSavedParams(paramId){\r\n        let json = window.sessionStorage.getItem(paramId) || null;\r\n        return json ? JSON.parse(json) : null;\r\n    }\r\n\r\n    // moves current day one into the backwards\r\n    stepBackwards(){\r\n        if(this._currDay - 1 >= this.firstStoredDay){\r\n            --this._currDay;\r\n            //this._lastParamSet = this.getSavedParams(--this._currDay);\r\n        }\r\n    }\r\n\r\n    // move sthe current day one day forwards\r\n    stepForwards(){\r\n        if(this._currDay + 1 <= this.numParamSets){\r\n            ++this._currDay;\r\n            //this._lastParamSet = this.getSavedParams(++this._currDay);\r\n        }\r\n    }\r\n\r\n    get firstStoredDay(){\r\n        if(this.numParamSets > PARAM_STORAGE_LIMIT){\r\n            return this.numParamSets - PARAM_STORAGE_LIMIT;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    get currentParams(){\r\n        return this.getSavedParams(this._currDay);\r\n    }\r\n\r\n    get currentDay(){\r\n        return this._currDay;\r\n    }\r\n\r\n    get numParamSets(){\r\n        return this._numParamSets;\r\n    }\r\n}\r\n\r\nexport default new ParamStorage();","import \"./NumSlider.css\";\r\nimport React from \"react\";\r\n\r\nexport class NumSlider extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.numRef = React.createRef();\r\n        this.rangeRef = React.createRef();\r\n    }\r\n\r\n    // mounted - set the default numbers\r\n    componentDidMount(){\r\n        this.numRef.current.value = this.props.init || this.props.min;\r\n        this.rangeRef.current.value = this.props.init || this.props.min;\r\n    }\r\n\r\n    // on text field input\r\n    onNumber(evt){\r\n        // set the range value to the number value\r\n        let val = parseFloat(evt.target.value);\r\n    \r\n        if(val){\r\n            // enforce min/max constraints\r\n            val = Math.min(Math.max(val, this.props.min), this.props.max); \r\n\r\n            // update inputs\r\n            this.numRef.current.value = val;\r\n            this.rangeRef.current.value = val;\r\n        }\r\n        else{\r\n            // empty input - range at min and number will be empty\r\n            this.rangeRef.current.value = this.props.min;\r\n        }\r\n    }\r\n\r\n    // on range bar move\r\n    onSlide(evt){\r\n        // set the text value to the number value\r\n        let val = evt.target.value;\r\n\r\n        // enforce min/max constraints \r\n        val = Math.min(Math.max(val, this.props.min), this.props.max);\r\n\r\n        // update number input\r\n        this.numRef.current.value = val;\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"num-slider-container\">\r\n                <div>\r\n                    <label>{this.props.label}</label>\r\n                    {this.props.showRange ? (` ${this.minText}-${this.maxText}`) : null}\r\n                </div>\r\n                <div>\r\n                    <input \r\n                        ref={this.numRef}\r\n                        onChange={this.onNumber.bind(this)}\r\n                        type=\"number\"\r\n                        min={this.props.min}\r\n                        max={this.props.max}\r\n                        step={this.props.step}\r\n                        placeholder={this.props.placeholder}\r\n                        required={this.props.required}\r\n                        disabled={this.props.disabled}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <input\r\n                        ref={this.rangeRef}\r\n                        onChange={this.onSlide.bind(this)}\r\n                        type=\"range\"\r\n                        min={this.props.min}\r\n                        max={this.props.max}\r\n                        step={this.props.step}\r\n                        disabled={this.props.disabled}\r\n                        className=\"num-slider-slider\"\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    set value(n){\r\n        this.numRef.current.value = n;\r\n        this.rangeRef.current.value = n;\r\n    }\r\n\r\n    get minText(){\r\n        return this.props.minText ? this.props.minText : this.props.min;\r\n    }\r\n\r\n    get maxText(){\r\n        return this.props.maxText ? this.props.maxText : this.props.max;\r\n    }\r\n\r\n    get value(){\r\n        return this.numRef.current.value;\r\n    }\r\n}","export const presets ={\r\n    //presets in the inputs go here\r\n    //seasonal flu\r\n   \"Seasonal Flu\":{\r\n       \"Infection Length\": 8,\r\n       \"Transmission\": 1.2,\r\n       \"Virulence\": 0.01\r\n   },\r\n   //smallpox\r\n   \"Smallpox\":{\r\n    \"Infection Length\": 14,\r\n    \"Transmission\": 2.5,\r\n    \"Virulence\": 0.25 \r\n   },\r\n   //polio\r\n   \"Polio\":{\r\n    \"Infection Length\": 18,\r\n    \"Transmission\": 1,\r\n    \"Virulence\": 0.01 \r\n   },\r\n   //measles\r\n   \"Measles\":{\r\n    \"Infection Length\": 8,\r\n    \"Transmission\": 10,\r\n    \"Virulence\": 0.01 \r\n   },\r\n   //Ebola\r\n   \"Ebola\":{\r\n    \"Infection Length\": 13,\r\n    \"Transmission\": 1.5,\r\n    \"Virulence\": 0.75 \r\n   },\r\n    //H1N1 Flu\r\n    \"H1N1 Flu\":{\r\n    \"Infection Length\": 8,\r\n    \"Transmission\": 1.6,\r\n    \"Virulence\": 0.01 \r\n    },\r\n    //H5N1 Flu\r\n   \"H5N1 Flu\":{\r\n    \"Infection Length\": 8,\r\n    \"Transmission\": 0.1,\r\n    \"Virulence\": 0.6 \r\n   },\r\n    //1918 Flu\r\n    \"1918 Flu\":{\r\n    \"Infection Length\": 8,\r\n    \"Transmission\": 2,\r\n    \"Virulence\": 0.03 \r\n    }\r\n}\r\nexport default presets;\r\n","import React from \"react\";\r\nimport Simulator from \"../Simulator\";\r\nimport ParamStorage from \"../ParamStorage\";\r\nimport { NumSlider } from \"./NumSlider\";\r\nimport preset from \"../preset\"\r\n\r\nexport class Inputs extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        // input refs\r\n        this.intialImmunityRef = React.createRef();\r\n        this.transmissionRef = React.createRef();\r\n        this.virulenceRef = React.createRef();\r\n        this.initialInfectedRef = React.createRef();\r\n        this.intialPopRef = React.createRef();\r\n        this.infectionLengthRef = React.createRef();\r\n        this.daysRef = React.createRef();\r\n        this.presetRef = React.createRef();\r\n\r\n        this.state = {\r\n            pending: false,         // no new requests while pending (disable buttons)\r\n            message: null,          // message to display (errors)\r\n            isDisabled: false       // to disable/enable fields depending on what preset is selected\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        Simulator.on(\"load\", this.onSimulatorLoad.bind(this));\r\n        Simulator.on(\"error\", this.onSimulatorError.bind(this));\r\n\r\n        // test values\r\n        if(new URLSearchParams(window.location.search).get(\"test\") === \"true\"){\r\n            this.initialInfectedRef.current.value = 500;\r\n            this.intialImmunityRef.current.value = 0.10;\r\n            this.intialPopRef.current.value = 1000000;\r\n            this.virulenceRef.current.value = 0.25;\r\n            this.daysRef.current.value = 365;\r\n            this.infectionLengthRef.current.value = 100;\r\n            this.transmissionRef.current.value = 0.2;\r\n\r\n            ParamStorage.saveParamsInputsDict(this.getInputsDictionary());\r\n        }\r\n    }\r\n\r\n    // creates a dictionary of all the inputs and their values (names formatted for the API call) \r\n    getInputsDictionary(){\r\n        // extract data from inputs to use in query string \r\n        let immune_percent =        this.intialImmunityRef.current.value,\r\n            transmission_rate =     this.transmissionRef.current.value,\r\n            virulence =             this.virulenceRef.current.value,\r\n            initial_infected =      this.initialInfectedRef.current.value,\r\n            initial_population =    this.intialPopRef.current.value,\r\n            infection_length =      this.infectionLengthRef.current.value,\r\n            simulation_length =     this.daysRef.current.value,\r\n            preset =                this.presetRef.current.value;\r\n\r\n        // make sure infected <= population\r\n        initial_infected = Math.min(initial_infected, initial_population);\r\n\r\n        // MUST match API expectations! \r\n        return {immune_percent, transmission_rate, virulence, initial_infected, initial_population, infection_length, simulation_length, preset};\r\n    }\r\n\r\n    onSimulatorError(){\r\n        this.setState({pending: false});    // enable buttons\r\n    }\r\n\r\n    onSimulatorLoad(){\r\n        this.setState({pending: false});    // enable buttons\r\n    }\r\n\r\n    // called when then the reset button is clicked\r\n    onReset(){\r\n        // cleared stored simulation data\r\n        Simulator.reset();\r\n    }\r\n\r\n    // downloads the csv file\r\n    downloadCSV(){\r\n        if(!this.state.pending){\r\n            // disable buttons\r\n            this.setState({pending: true});\r\n\r\n            Simulator.downloadCSVFile(this.getInputsDictionary())\r\n                .catch(err => {\r\n                    // something went wrong (server did not respond or bad request)\r\n                    this.setState({message: err.message});\r\n                })\r\n                .then(() => {\r\n                    // (this fires when any response happens not successful only!)\r\n                    // always enable buttons\r\n                    this.setState({pending: false})\r\n                });\r\n        }\r\n    }\r\n\r\n    runSimulation(){\r\n        // no simulation data - load it (first simulation or reset happened)\r\n        if(!Simulator.hasData){\r\n            // disable buttons for loading time\r\n            this.setState({pending: true});\r\n\r\n            // load data then auto run\r\n            Simulator.load(this.getInputsDictionary())\r\n                .then(() => {\r\n                    this.setState({message: null}); // remove possible err message\r\n\r\n                    ParamStorage.saveParamsInputsDict(this.getInputsDictionary());  // save parameters\r\n                })\r\n                .catch(err => this.setState({message: err.message}));\r\n        }\r\n        else{\r\n            // verify current parameters are not the same as the ones already run\r\n            // (prevents reloading data that we already have!)\r\n            let currParams = ParamStorage.convertToTitleCase(this.getInputsDictionary());\r\n\r\n            if(ParamStorage.paramsNotLastSave(currParams)){\r\n                // parameters are different than last time\r\n                // run new simulation\r\n                Simulator.reset();      // triggers clearing graph/table and clears data\r\n                this.runSimulation();   // runs again, but sim will have no data\r\n            }\r\n        }\r\n    }\r\n\r\n    // called when the form is 'submitted'\r\n    // entire purpose is to block the sending of the form\r\n    // (submit enforces 'required', 'min', 'max' constraints)\r\n    onSubmit(evt){\r\n        // no default submission (using ajax instead)\r\n        evt.preventDefault();\r\n\r\n        this.runSimulation();\r\n    }\r\n\r\n    onPresetChange(){\r\n        let value = this.presetRef.current.value;\r\n        \r\n        if(value !== \"Custom\"){\r\n            this.setState({isDisabled: true});\r\n            this.infectionLengthRef.current.value = preset[value][\"Infection Length\"];\r\n            this.transmissionRef.current.value = preset[value][\"Transmission\"];\r\n            this.virulenceRef.current.value = preset[value][\"Virulence\"]\r\n        }else{\r\n            this.setState({isDisabled: false});\r\n        }\r\n    }\r\n\r\n    // moves the parameter storage day & updates UI inputs\r\n    switchParamSet(direction){\r\n        // move the day\r\n        if(direction === \"backwards\"){\r\n            ParamStorage.stepBackwards();\r\n        }\r\n        else if(direction === \"forwards\"){\r\n            ParamStorage.stepForwards();\r\n        }\r\n        else throw new Error(\"Parameter switch direction must be 'forwards' or 'backwards'.\");\r\n\r\n        // bail if nothing already saved\r\n        let params = ParamStorage.currentParams || null;\r\n        if(!params) return; // nothing saved\r\n\r\n        // fill out UI form\r\n        this.infectionLengthRef.current.value = params.infectionLength;\r\n        this.transmissionRef.current.value = params.transmissionRate;\r\n        this.virulenceRef.current.value = params.virulence;\r\n        this.intialPopRef.current.value = params.initialPopulation;\r\n        this.intialImmunityRef.current.value = params.immunePercent;\r\n        this.initialInfectedRef.current.value = params.initialInfected;\r\n        this.daysRef.current.value = params.simulationLength;\r\n\r\n        this.presetRef.current.value = params.preset;\r\n        this.onPresetChange();\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <div id=\"inputs-header-container\" className=\"text-center\">\r\n                    <button onClick={() => this.switchParamSet(\"backwards\")}>&larr;</button>\r\n                    <h5 className=\"text-center\">Experimental Variables</h5>\r\n                    <button onClick={() => this.switchParamSet(\"forwards\")}>&rarr;</button>\r\n                </div>\r\n                <br/>\r\n                <form onSubmit={this.onSubmit.bind(this)}>\r\n                    <div className=\"row\">\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <NumSlider\r\n                                label={\"Length of Infection (Days)\"}\r\n                                showRange={true}\r\n                                min={1}\r\n                                max={365}\r\n                                step={1}\r\n                                required={true}\r\n                                ref={this.infectionLengthRef}\r\n                                disabled={this.state.isDisabled}\r\n                            />\r\n                        </div>\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <NumSlider\r\n                                label={\"Transmission Rate\"}\r\n                                showRange={true}\r\n                                min={0}\r\n                                max={20}\r\n                                step={0.01}\r\n                                required={true}\r\n                                ref={this.transmissionRef}\r\n                                disabled={this.state.isDisabled}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <NumSlider\r\n                                label={\"Virulence\"}\r\n                                showRange={true}\r\n                                min={0}\r\n                                max={1}\r\n                                step={0.001}\r\n                                required={true}\r\n                                ref={this.virulenceRef}\r\n                                disabled={this.state.isDisabled}\r\n                            />\r\n                        </div>\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <NumSlider\r\n                                label={\"Initial Population\"}\r\n                                showRange={true}\r\n                                min={1}\r\n                                max={1000000}\r\n                                step={1}\r\n                                required={true}\r\n                                ref={this.intialPopRef}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <NumSlider\r\n                                label={\"Initial Immunity Percent\"}\r\n                                showRange={true}\r\n                                min={0}\r\n                                max={1}\r\n                                step={0.01}\r\n                                required={true}\r\n                                ref={this.intialImmunityRef}\r\n                            />\r\n                        </div>\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <NumSlider\r\n                                label={\"Initial Infected\"}\r\n                                showRange={true}\r\n                                min={0}\r\n                                max={1000000}\r\n                                maxText={\"Population\"}\r\n                                step={1}\r\n                                required={true}\r\n                                ref={this.initialInfectedRef}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <NumSlider\r\n                                label={\"Simulation Length (Days)\"}\r\n                                showRange={true}\r\n                                min={1}\r\n                                max={365}\r\n                                step={1}\r\n                                required={true}\r\n                                ref={this.daysRef}\r\n                            />\r\n                        </div>\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <label>Presets:</label>\r\n                            <select ref={this.presetRef} className=\"form-control\" onChange={this.onPresetChange.bind(this)}>\r\n                                <option>Custom</option>\r\n                                <option>Seasonal Flu</option>\r\n                                <option>Smallpox</option>\r\n                                <option>Polio</option>\r\n                                <option>Measles</option>\r\n                                <option>Ebola</option>\r\n                                <option>H1N1 Flu</option>\r\n                                <option>H5N1 Flu</option>\r\n                                <option>1918 Flu</option>\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group text-center\">\r\n                        <button className=\"input-btn\" disabled={this.state.pending}>Run</button>&nbsp;\r\n                        <button onClick={this.onReset.bind(this)} className=\"input-btn\" disabled={this.state.pending} type=\"button\" >Reset</button>&nbsp;\r\n                        <button onClick={this.downloadCSV.bind(this)} className=\"input-btn\" disabled={this.state.pending} type=\"button\" >Export CSV</button>\r\n                    </div>\r\n                </form>\r\n                <div>{this.state.message}</div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport ReactModal from \"react-modal\"\r\nimport { Ajax } from \"../Ajax\";\r\n\r\nexport class MailModal extends React.Component{\r\n\r\n\tconstructor(props){\r\n        super(props);\r\n\r\n        // input refs\r\n        this.textRef = React.createRef();\r\n        this.errorRef = React.createRef();\r\n        this.headerRef = React.createRef();\r\n\r\n        this.type = null;\r\n        this.typeError = true;\r\n        this.errorTime = false;\r\n        this.errorMsg = \"\";\r\n\r\n        this.state = { \r\n\t\t\tother: false,\r\n\t\t\terrMessage:null,\r\n\t\t\tsuccessMessage:null,\r\n\t\t\tdisabled: false\r\n        };\r\n\r\n        //Modal.setAppElement(this.props.app);\r\n\t}\r\n\r\n\tcomponentDidUpdate(prevProps){\r\n\t\t// clear messages when the visibility changes\r\n\t\tif(prevProps.showModal && !this.props.showModal){\r\n\t\t\tthis.setState({errMessage: null, successMessage: null});\r\n\t\t}\r\n\t}\r\n\r\n\t// on click of submit button \r\n\tsubmitClick(e){\r\n\t\tthis.setState({errMessage:null});\r\n\t\te.preventDefault();\r\n\t\tlet goodHeader = this.headerRef.current ? (this.headerRef.current.value.length > 0) : true;\r\n\t\tif(this.type != null && this.textRef.current.value != \"\" && goodHeader){\r\n\t\t\tlet message = this.BuildArray();\r\n\r\n\t\t\t// localhost = dev, else = prod\r\n\t\t\tlet origin = window.location.origin.includes(\"localhost\") ? \"http://localhost:8080\" : window.location.origin;\r\n\r\n\t\t\t// sending message, disable send button\r\n\t\t\tthis.setState({successMessage: \"Sending...\", errMessage: null, disabled: true});\r\n\r\n\t\t\tAjax.post(`${origin}/mail`, null, message)\r\n\t\t\t\t.then(xhr => {  \r\n                    // ajax resolved (could be bad/good request, but server responded)\r\n                    if(xhr.status === 200){\r\n\t\t\t\t\t\t// good request - attempt to parse results json\r\n\t\t\t\t\t\tthis.setState({successMessage:\"Submit Successful\", errMessage: null, disabled: false});\r\n                    }\r\n                    else{\r\n\t\t\t\t\t\t// bad request\r\n\t\t\t\t\t\tthis.setState({errMessage:\"Bad Request Error\", successMessage: null, disabled: false});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\t// clear inputs\r\n\t\t\t\t\tif(this.headerRef.current){\r\n\t\t\t\t\t\tthis.headerRef.current.value = \"\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.textRef.current.value = \"\";\r\n                })\r\n                .catch(err => {\r\n                    // ajax request died (really bad NOT a 400 error!)\r\n\t\t\t\t\tthis.setState({errMessage:\"Cannot reach server\", disabled: false});// request died signal\r\n                });\r\n\t\t}\r\n\t}\r\n\t\r\n\t//Build the JSON array that is sent over the Ajax request\r\n\tBuildArray(){\r\n\t\t//get the text in the the message textarea\r\n\t\tlet text = this.textRef.current.value;\r\n\t\t//\r\n        let type = \"\";\r\n\r\n        if(this.state.other){\r\n        \ttype = this.headerRef.current.value;\r\n        }else{\r\n        \ttype = this.type;\r\n        }\r\n\r\n        // MUST match API expectations! \r\n        return {type,text};\r\n    }\r\n\r\n\t// on change of radio button set type\r\n\tonTypeSelect(type){\r\n\t\t//get the type of the radio button selected\r\n\t \tthis.type = type;\r\n\r\n\t\t// check to see if other is selected\r\n\t\tthis.setState({other: this.type === \"other\"});\r\n\r\n\t \tthis.typeError = false;\r\n\t }\r\n\r\n\t //Check if other is selcted and load elements based on that\r\n \t TypeOther(){\r\n\t \tif(!this.state.other){\r\n\t\t\t // remove element of screen\r\n\t \t\treturn null;\r\n\t \t}else{\r\n\t\t\t //load element onto screen\r\n\t \t\treturn(\r\n\t \t\t\t<div>\r\n\t \t\t\t\t<label>Other: </label> <input type=\"text\" placeholder=\"Input for other\" ref={this.headerRef} required/>\r\n\t \t\t\t</div>\r\n\t \t\t);\r\n\t \t}\r\n\t }\r\n\t \r\n\trender(){\r\n\t\treturn this.props.showModal ? (\r\n\t\t\t<div>\r\n\t\t\t\t<ReactModal isOpen={this.props.showModal} >\r\n\t\t\t\t\t<div className=\"col-lg-1\">\r\n\t\t\t  \t\t\t<span className=\"pointer\" onClick={this.props.closeModal}>&times;</span>\r\n\t\t\t  \t\t</div>\r\n\t\t\t  \t\t<div className=\"container border\">\r\n\t\t\t\t\t  <form onSubmit={this.submitClick.bind(this)}>\r\n\t\t\t\t\t  \t\t<div>\r\n\t\t\t\t\t\t\t\t<div className=\"header center\">\r\n\t\t\t\t\t\t\t\t\t<h2 className=\"modalHeader\">Contact Us</h2>\r\n\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t<span className=\"error\">\r\n\t\t\t\t\t\t\t\t\t\t{this.state.errMessage}\r\n\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t\t<span className=\"success\">\r\n\t\t\t\t\t\t\t\t\t\t{this.state.successMessage}\r\n\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div className=\"form-group center\">\r\n\t\t\t\t\t\t\t\t\t<input type=\"radio\" onChange={() => this.onTypeSelect(\"Bug Report\")} name=\"types\" value=\"problem\" required/>Have a problem?\r\n\t\t\t\t\t\t\t\t\t&nbsp;\r\n\t\t\t\t\t\t\t\t\t<input type=\"radio\" onChange={() => this.onTypeSelect(\"Feature Request\")} name=\"types\" value=\"idea\" required/>Have an idea?\r\n\t\t\t\t\t\t\t\t\t&nbsp;\r\n\t\t\t\t\t\t\t\t\t<input type=\"radio\" onChange={() => this.onTypeSelect(\"other\")} name=\"types\" value=\"other\" required/>Other\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div className=\"form-group center\">\r\n\t\t\t\t\t\t\t\t\t{this.TypeOther()}\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div className=\"form-group center\">\r\n\t\t\t\t\t\t\t\t\t<textarea className=\"modal-text-area\" placeholder=\"Type message in here.\" ref={this.textRef} required></textarea>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div className=\"form-group center\">\r\n\t\t\t\t\t\t\t\t\t<input className=\"input-btn\" type=\"submit\" disabled={this.state.disabled} />\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</form>\r\n\t\t\t\t\t</div>\r\n      \t\t\t</ReactModal>\r\n\t\t\t</div>\r\n\t\t) : null;\r\n\t}\r\n}","import React from \"react\";\r\nimport { Dropdown, DropdownToggle, DropdownMenu, DropdownItem, Navbar as RNavbar, NavItem, Collapse, NavbarToggler, Nav, NavLink } from \"reactstrap\";\r\nimport { MailModal } from \"./MailModal\"\r\nimport Simulator from \"../Simulator\";\r\n\r\nexport class Navbar extends React.Component{\r\n\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\r\n\t    this.state = {\r\n\t\t\tshowNav: false,\t\t\t// navbar collapse\r\n\t\t\tshowModal: false,\t\t// mail modal visibility\r\n\t\t\tshowAdvanced: false\t\t// advanced dropdown menu visibility\r\n\t    };\r\n\r\n\t}\r\n\r\n\t// close the mail modal\r\n\tcloseModal(){\r\n\t\tthis.setState({showModal: false});\r\n\t}\r\n\r\n\t// show the mail modal\r\n\topenModal(){\r\n\t\tthis.setState({showModal: true});\r\n\t}\r\n\r\n\t// toggles the navbar collapse state\r\n\ttoggleNavbar(){\r\n\t\tthis.setState(prev => ({showNav: !prev.showNav}));\r\n\t}\r\n\r\n\t// toggle advanced dropdown\r\n\ttoggleDropdown(){\r\n\t\tthis.setState(prev => ({showAdvanced: !prev.showAdvanced}));\r\n\t}\r\n\r\n\t// advanced dropdown error correction option toggle\r\n\ttoggleErrorCorrection(){\r\n\t\tSimulator.isErrCorrecting = !Simulator.isErrCorrecting;\r\n\t}\r\n\r\n\trender(){\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<RNavbar color=\"light\" light expand=\"md\">\r\n\t\t\t\t\t<NavbarToggler color=\"dark\" onClick={this.toggleNavbar.bind(this)}/>\r\n\t\t\t\t\t<Collapse isOpen={this.state.showNav} navbar>\r\n\t\t\t\t\t\t<Nav navbar>\r\n\t\t\t\t\t\t\t<NavItem>\r\n\t\t\t\t\t\t\t\t<NavLink  className=\"pointer\" selected onClick={this.openModal.bind(this)}>Contact Us</NavLink>\r\n\t\t\t\t\t\t\t</NavItem>\r\n\t\t\t\t\t\t\t<NavItem>\r\n\t\t\t\t\t\t\t\t<Dropdown isOpen={this.state.showAdvanced} toggle={this.toggleDropdown.bind(this)}>\r\n\t\t\t\t\t\t\t\t\t\t<DropdownToggle caret color=\"light\">\r\n\t\t\t\t\t\t\t\t\t\t\tAdvanced\r\n\t\t\t\t\t\t\t\t\t\t</DropdownToggle>\r\n\t\t\t\t\t\t\t\t\t\t<DropdownMenu>\r\n\t\t\t\t\t\t\t\t\t\t\t<DropdownItem onClick={this.toggleErrorCorrection.bind(this)}>\r\n\t\t\t\t\t\t\t\t\t\t\t\tToggle Error Correction (Currently {Simulator.isErrCorrecting ? \"Enabled\" : \"Disabled\"})\r\n\t\t\t\t\t\t\t\t\t\t\t</DropdownItem>\r\n\t\t\t\t\t\t\t\t\t\t</DropdownMenu>\r\n\t\t\t\t\t\t\t\t\t</Dropdown>\r\n\t\t\t\t\t\t\t</NavItem>\r\n\t\t\t\t\t\t</Nav>\r\n\t\t\t\t\t</Collapse>\r\n\t\t\t\t</RNavbar>\r\n\t\t\t\t<MailModal showModal={this.state.showModal} closeModal={this.closeModal.bind(this)} />\r\n\t      \t</div>\r\n\t\t);\r\n\t}\r\n}","import React from \"react\";\r\nimport Simulator from \"../Simulator\";\r\n\r\nexport class Chart extends React.Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\tvisible: false\t//true/false if simulator data to render\r\n\t\t};\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\t// simulator singles data set loaded - render data\r\n\t\tSimulator.on(\"data\", () => this.setState({visible: true}));\r\n\r\n\t\t// simulator signals a reset - nothing to render\r\n\t\tSimulator.on(\"reset\", () => this.setState({visible: false}));\r\n\t}\r\n\r\n\r\n\tgetStyleForDay(index){\r\n\t\tlet style = null;\r\n\r\n\t\tif(Simulator.firstInvalidDay > -1){\r\n\t\t\tif(index === Simulator.firstInvalidDay){\r\n\t\t\t\t// this row is first invalid day\r\n\t\t\t\tstyle = {\r\n\t\t\t\t\tborderLeft: \"5px solid red\",\r\n\t\t\t\t\tborderRight: \"5px solid red\"\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\telse if(index > Simulator.firstInvalidDay){\r\n\t\t\t\t// subsequent invalid days\r\n\t\t\t\tstyle = {\r\n\t\t\t\t\tborderLeft: \"1px solid red\",\r\n\t\t\t\t\tborderRight: \"1px solid red\"\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t}\t\t\r\n\r\n\t\treturn style;\r\n\t}\r\n\r\n\t// renders table rows up to the current simulation day\r\n\trenderRows(){\r\n\t\tlet data = Simulator.data;\r\n\r\n\t\tif(data){\r\n\t\t\tlet rows = new Array(data.length + 1);\r\n\r\n\t\t\tdata.forEach((dayData, index) => {\r\n\t\t\t\t// extract data\r\n\t\t\t\tlet susceptible = \tMath.round(dayData.Susceptible),\r\n\t\t\t\t\tinfected = \t\tMath.round(dayData.Infected),\r\n\t\t\t\t\timmune = \t\tMath.round(dayData.Immune),\r\n\t\t\t\t\tdead = \t\t\tMath.round(dayData.Dead),\r\n\t\t\t\t\tpopulation = \tMath.round(dayData.TotalPopulation);\r\n\r\n\t\t\t\t// get the style (for data correction)\r\n\t\t\t\tlet style = this.getStyleForDay(index);\r\n\r\n\t\t\t\t// create table row\r\n\t\t\t\t// (toLocalString adds the ',' as the number grows in thousands)\r\n\t\t\t\trows[index] = (\r\n\t\t\t\t\t<tr key={index} style={style}>\r\n\t\t\t\t\t\t<td>{index}</td>\r\n\t\t\t\t\t\t<td>{susceptible.toLocaleString()}</td>\r\n\t\t\t\t\t\t<td>{infected.toLocaleString()}</td>\r\n\t\t\t\t\t\t<td>{immune.toLocaleString()}</td>\r\n\t\t\t\t\t\t<td>{dead.toLocaleString()}</td>\r\n\t\t\t\t\t\t<td>{population.toLocaleString()}</td>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t);\r\n\t\t\t});\r\n\r\n\t\t\treturn rows;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n\r\n\trender(){\r\n\t\treturn this.state.visible ? (\r\n\t\t\t<div>\r\n\t\t\t\t<table className=\"table table-striped overflow-table\">\r\n\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t<th>Day</th>\r\n\t\t\t\t\t\t\t<th>Susceptible</th>\r\n\t\t\t\t\t\t\t<th>Infected</th>\r\n\t\t\t\t\t\t\t<th>Immune</th>\r\n\t\t\t\t\t\t\t<th>Dead</th>\r\n\t\t\t\t\t\t\t<th>Total Population</th>\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t</thead>\r\n\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t{this.renderRows()}\r\n\t\t\t\t\t</tbody>\r\n\t\t\t\t</table>\r\n\t\t\t\t<div className=\"text-center\">\r\n\t\t\t\t\t{Simulator.firstInvalidDay > -1 ? `* Error correction begins on day ${Simulator.firstInvalidDay} *` : null}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t) : null;\r\n\t}\r\n}","import Simulator from \"./Simulator\";\r\nimport { EventEmitter } from './EventEmitter';\r\n\r\nclass GraphData extends EventEmitter{\r\n    constructor(){\r\n        super();\r\n\r\n        this._startDay = -1;\r\n        this._endDay = Number.MAX_SAFE_INTEGER;\r\n    }\r\n\r\n    getData(keysDict){\r\n        let simData = Simulator.data;   // simulation data array\r\n        let labeledPoints = {};         // stores the points array in a dictionary (key=label)\r\n        let largestY = 0;               // largest y in data set\r\n\r\n        if(simData){\r\n            // start & end indeces \r\n            let start = this.startDay > -1 ? this.startDay : 0;\r\n            let end = this.endDay < simData.length ? this.endDay : simData.length;\r\n\r\n            for(let i = start; i < end; i++){\r\n                let day = simData[i];\r\n\r\n                // label is 'Infected', 'Susceptible', etc (whatever is provided)\r\n                for(let label in keysDict){\r\n                    if(keysDict[label] !== true){\r\n                        continue;\r\n                    }\r\n\r\n                    // get y value (x is always the day/index)\r\n                    let y = parseFloat(day[label]);\r\n\r\n                    // create x, y point\r\n                    let pt = {x: i, y};\r\n\r\n                    // store the point to its associated label\r\n                    if(label in labeledPoints){\r\n                        labeledPoints[label].push(pt);\r\n                    }\r\n                    else{\r\n                        labeledPoints[label] = [pt];\r\n                    }\r\n\r\n                    // update largest Y\r\n                    largestY = Math.max(largestY, y);\r\n                };\r\n            }\r\n        }\r\n\r\n        // convert sorted dictionary into an array\r\n        let values = [];\r\n        Object.keys(labeledPoints).forEach(key => values.push(labeledPoints[key]));\r\n\r\n        // gets all the labels that are in the dictionary and true (in order)\r\n        let labels = Object.keys(keysDict).filter(key => keysDict[key] === true);\r\n\r\n        return {values, largestY, labels};\r\n    }\r\n\r\n    // sets the start/end days\r\n    // (better to use this than setting start & end days individually due to 1 update)\r\n    setDaysRange(start, end){\r\n        this._startDay = start;\r\n        this._endDay = end;\r\n        this.emit(new Event(\"update\"));\r\n    }\r\n\r\n    set startDay(value){\r\n        this._startDay = value;\r\n        this.emit(new Event(\"update\"));\r\n    }\r\n\r\n    set endDay(value){\r\n        this._endDay = value;\r\n        this.emit(new Event(\"update\"));\r\n    }\r\n\r\n    get startDay(){\r\n        return Math.max(0, this._startDay);\r\n    }\r\n\r\n    get endDay(){\r\n        return Math.min(this._endDay, Simulator.data ? Simulator.data.length : 0);\r\n    }\r\n}\r\n\r\nexport default new GraphData();","import \"./GraphRange.css\"\r\nimport React from \"react\";\r\nimport GraphData from \"../GraphData\";\r\n\r\nexport class GraphRange extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.lowerRef = React.createRef();\r\n        this.upperRef = React.createRef();\r\n    }\r\n\r\n    onChangeLow(){\r\n        let lowValue = this.selectedMin.toString(),\r\n            low = this.selectedMin;\r\n\r\n        if(lowValue.length){\r\n            let high = this.selectedMax || this.props.max;\r\n\r\n            low = Math.max(this.props.min, low);\r\n            low = Math.min(low, high - 1);\r\n\r\n            this.lowerRef.current.value = low;\r\n\r\n            GraphData.startDay = low;\r\n        }\r\n    }\r\n\r\n    onChangeHigh(){\r\n        let highValue = this.selectedMax.toString(),\r\n            high = this.selectedMax;\r\n\r\n        if(highValue.length){\r\n            let low = this.selectedMin || this.props.min;\r\n\r\n            high = Math.max(low + 1, high);\r\n            high = Math.min(high, this.props.max);\r\n\r\n            this.upperRef.current.value = high;\r\n\r\n            GraphData.endDay = high;\r\n        }\r\n    }\r\n\r\n    onSubmit(evt){\r\n        evt.preventDefault();\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"graph-range-container\">\r\n                <form onSubmit={this.onSubmit.bind(this)}>\r\n                    <input\r\n                        ref={this.lowerRef}\r\n                        min={this.props.min}\r\n                        max={this.props.max}\r\n                        step={1}\r\n                        defaultValue={this.props.min}\r\n                        placeholder=\"Start\"\r\n                        type=\"number\"\r\n                        required\r\n                        onChange={this.onChangeLow.bind(this)}\r\n                    />&nbsp;\r\n                    <input\r\n                        ref={this.upperRef}\r\n                        min={this.props.min}\r\n                        max={this.props.max}\r\n                        step={1}\r\n                        defaultValue={this.props.max}\r\n                        placeholder=\"End\"\r\n                        type=\"number\"\r\n                        required\r\n                        onChange={this.onChangeHigh.bind(this)}\r\n                    />\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    get selectedMin(){\r\n        return parseFloat(this.lowerRef.current.value) || this.props.min;\r\n    }\r\n\r\n    get selectedMax(){\r\n        return parseFloat(this.upperRef.current.value) || this.props.max;\r\n    }\r\n}","import React from \"react\";\r\nimport { LineChart } from \"react-easy-chart\"\r\nimport Simulator from \"../Simulator\";\r\nimport GraphData from \"../GraphData\";\r\nimport { GraphRange } from \"./GraphRange\";\r\n\r\n// graph size constants\r\nconst WIDTH = \t\t540,\r\n\tHEIGHT = \t\t475,\r\n\tMARGIN_TOP = \t10,\r\n\tMARGIN_BOTTOM =\t50,\r\n\tMARGIN_LEFT = \t80,\r\n\tMARGIN_RIGHT = \t10;\r\n\r\n// graph line colors\r\nconst COLORS = {\r\n\t\"Infected\": \t\"green\",\r\n\t\"Susceptible\": \t\"red\",\r\n\t\"Immune\": \t\t\"steelblue\",\r\n\t\"Dead\": \t\t\"gray\"\r\n};\r\n\r\nexport class Graph extends React.Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\r\n\t\tthis.graphContainerRef = React.createRef();\r\n\t\t\r\n\t    this.state = {\r\n\t\t\tvisible: false,\t\t\t\t\t\t// true/false if simulator data to render\r\n\t\t\ttooltip: null,\t\t\t\t\t\t// text to display\r\n\t\t\tcontainerWidth: WIDTH,\t\t\t\t// line graph parent width\r\n\t\t\tgraphLabels: {}\r\n\t    };\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\t// auto select infected\r\n\t\tthis.toggleLabel(\"Infected\");\r\n\r\n\t\t// simulator singles data set loaded - render data\r\n\t\tSimulator.on(\"data\", () => this.setState({visible: true}));\r\n\r\n\t\t// simulator reset - nothing to render\r\n\t\tSimulator.on(\"reset\", () => this.setState({visible: false}));\r\n\r\n\t\t// graph update\r\n\t\tGraphData.on(\"update\", () => this.forceUpdate());\r\n\r\n\t\t// when the window size changes - resize the graph if neccessary\r\n\t\twindow.addEventListener(\"resize\", this.onResize.bind(this));\r\n\t\tthis.onResize();\r\n\t}\r\n\r\n\tcomponentDidUpdate(prevProps, prevState){\r\n\t\tif(prevState.yLabel !== this.state.yLabel){\r\n\t\t\tthis.setState({tooltip: null});\r\n\t\t}\r\n\t}\r\n\r\n\t// when a label ('Infected', 'Susceptible', etc) is clicked...\r\n\ttoggleLabel(label){\r\n\t\t// copy labels dictionary\r\n\t\tlet nextLabels = Object.assign({}, this.state.graphLabels);\r\n\r\n\t\t// toggle parameter label\r\n\t\tif(label in nextLabels){\r\n\t\t\tnextLabels[label] = !nextLabels[label];\r\n\t\t}\r\n\t\telse{\r\n\t\t\tnextLabels[label] = true;\r\n\t\t}\r\n\r\n\t\t// update state\r\n\t\tthis.setState({graphLabels: nextLabels});\r\n\t}\r\n\r\n\t// when a point on the graph is clicked...\r\n\tonGraphClick(data, evt){\r\n\t\tlet {x, y} = data;\r\n\t\tthis.setState({tooltip: `${Math.round(y)} people on day ${x}.`});\r\n\t}\r\n\r\n    onResize(){\r\n        // updates the state to reflect the maximum size allowed for the graph\r\n        let element = this.graphContainerRef.current;\r\n\t\tif(element){\r\n\t\t\tthis.setState({containerWidth: element.getBoundingClientRect().width});\r\n\t\t}\r\n    }\r\n\r\n\t// renders a simple HTML key for the graph line/colors\r\n\trenderLabelButtons(){\r\n\t\tlet labels = this.state.graphLabels;\r\n\r\n\t\t// border style for button (null = no change)\r\n\t\tlet borders = [\r\n\t\t\t(labels.Infected === true) ? `2px solid ${COLORS.Infected}` : null,\r\n\t\t\t(labels.Susceptible === true) ? `2px solid ${COLORS.Susceptible}` : null,\r\n\t\t\t(labels.Immune === true) ? `2px solid ${COLORS.Immune}` : null,\r\n\t\t\t(labels.Dead === true) ? `2px solid ${COLORS.Dead}` : null\r\n\t\t];\r\n\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<button style={{color: COLORS[\"Infected\"], borderBottom: borders[0]}} onClick={() => this.toggleLabel(\"Infected\")} className=\"pointer graph-button\">Infected</button>\r\n\t\t\t\t<button style={{color: COLORS[\"Susceptible\"], borderBottom: borders[1]}} onClick={() => this.toggleLabel(\"Susceptible\")} className=\"pointer graph-button\">Susceptible</button>\r\n\t\t\t\t<button style={{color: COLORS[\"Immune\"], borderBottom: borders[2]}} onClick={() => this.toggleLabel(\"Immune\") }className=\"pointer graph-button\">Immune</button>\r\n\t\t\t\t<button style={{color: COLORS[\"Dead\"], borderBottom: borders[3]}} onClick={() => this.toggleLabel(\"Dead\")} className=\"pointer graph-button\">Dead</button>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\r\n\trender(){\r\n\t\tif(this.state.visible){\r\n\t\t\tlet data = GraphData.getData(this.state.graphLabels);\r\n\t\t\tlet dayCount = data.values.length ? data.values[0].length : 0;\r\n\t\t\tlet width = Math.min(this.state.containerWidth, WIDTH);\r\n\r\n\t\t\treturn (\r\n\t\t\t\t<div ref={this.graphContainerRef}>\r\n\t\t\t\t\t<h5>{data.labels.join(\" + \") || \"(Nothing Selected)\"}</h5>\r\n\t\t\t\t\t{this.renderLabelButtons()}\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<LineChart\r\n\t\t\t\t\t\t\tdata={data.values}\r\n\t\t\t\t\t\t\twidth={width}\r\n\t\t\t\t\t\t\theight={HEIGHT}\r\n\t\t\t\t\t\t\tmargin={{\r\n\t\t\t\t\t\t\t\ttop: MARGIN_TOP, bottom: MARGIN_BOTTOM,\r\n\t\t\t\t\t\t\t\tleft: MARGIN_LEFT, right: MARGIN_RIGHT\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\taxes\r\n\t\t\t\t\t\t\taxisLabels={{x: \"Days Elapsed\", y: \"People\"}}\r\n\t\t\t\t\t\t\tdataPoints={dayCount < 0} // enable this later\r\n\t\t\t\t\t\t\txDomainRange={[GraphData.startDay, GraphData.endDay]}\r\n\t\t\t\t\t\t\tyDomainRange={[0, data.largestY]}\r\n\t\t\t\t\t\t\tlineColors={data.labels.map(label => COLORS[label])}\r\n\t\t\t\t\t\t\tclickHandler={this.onGraphClick.bind(this)}\r\n\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\".label\": {fill: \"black\"},\r\n\t\t\t\t\t\t\t\t\".axis\": {fontSize: \"0.75em\", fontFamily: \"arial\"}\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<GraphRange\r\n\t\t\t\t\t\t\tmin={1}\r\n\t\t\t\t\t\t\tmax={Simulator.data.length || 1}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"text-center\">\r\n\t\t\t\t\t\t{this.state.tooltip}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t\treturn <div ref={this.graphContainerRef}></div> // required for resize to work! \r\n\t}\r\n} ","import \"../lib/bootstrap.min.css\";\r\nimport \"./App.css\";\r\nimport React from \"react\";\r\nimport { Inputs } from \"./Inputs\";\r\nimport { Navbar } from \"./Navbar\";\r\nimport { Chart } from \"./Chart\";\r\nimport { Graph } from \"./Graph\";\r\n\r\nexport class App extends React.Component{\r\n    render(){\r\n        return (\r\n            <div>\r\n                <Navbar/>\r\n                <br/>\r\n                <span className=\"Version\">V0.2</span>\r\n                <main className=\"container card card-body bg-light\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-lg-6\">\r\n                            <Inputs/>\r\n                        </div>\r\n                        <div className=\"col-lg-6 graph\">\r\n                            <Graph/>\r\n                        </div>\r\n                    </div>\r\n                    <br/>\r\n                    <div>\r\n                        <Chart/>\r\n                    </div>\r\n                </main>\r\n                <footer className=\"container text-center\">\r\n                    <hr/>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-lg-6\">\r\n                            Juall | Rosenblum | Pojero | Erry \r\n                        </div>\r\n                        <div className=\"col-lg-6\">\r\n                            <a href=\"https://opensource.org/licenses/MIT\" target=\"_blank\">MIT License</a>\r\n                        </div>\r\n                    </div>\r\n                </footer>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { App } from \"./components/App\";\r\n\r\nReactDOM.render(<App/>, document.querySelector(\"#root\"));"],"sourceRoot":""}