{"version":3,"sources":["Ajax.js","Simulator.js","EventEmitter.js","components/NumSlider.jsx","components/Inputs.jsx","components/Modal.jsx","components/Navbar.jsx","components/Chart.jsx","components/Graph.jsx","components/App.jsx","index.js"],"names":["Ajax","Object","classCallCheck","this","createClass","key","value","options","arguments","length","undefined","Promise","resolve","reject","method","url","window","location","origin","headers","query","data","xhr","XMLHttpRequest","h","onload","onerror","err","queryString","open","setRequestHeader","send","JSON","stringify","request","dict","qs","param","concat","substring","src_Simulator","_EventEmitter","Simulator","_this","possibleConstructorReturn","getPrototypeOf","call","_currentDay","inherits","_this2","href","includes","Access-Control-Allow-Origin","Access-Control-Allow-Headers","get","then","status","parse","response","emit","Event","Error","catch","currentDay","set","day","EventEmitter","_listeners","event","willTrigger","type","forEach","listener","eventType","push","listeners","i","splice","NumSlider","_React$Component","props","numRef","React","createRef","rangeRef","current","init","min","evt","val","target","Math","max","react_default","a","createElement","className","label","showRange","minText","maxText","ref","onChange","onNumber","bind","step","placeholder","required","onSlide","Component","Inputs","intialImmunityRef","virilityRef","fatalityRef","initialInfectedRef","intialPopRef","infectionLengthRef","daysRef","state","pending","message","lastBtn","on","onSimulatorLoad","onSimulatorError","immune_percent","virility","fatal_percent","initial_infected","initial_population","infection_length","simulation_length","setState","reset","hasData","nextDay","load","getInputsDictionary","_this3","autoRun","createCSVDownloadURL","link","document","setAttribute","click","preventDefault","dayByDay","downloadCSV","getAttribute","onSubmit","NumSlider_NumSlider","onClick","onFormClick","disabled","btn","onReset","Modal","apply","lib_default","isOpen","showModal","closeModal","rows","cols","Navbar","id","openModal","Modal_Modal","Chart","onSimulatorData","onSimulatorReset","onSimulatorUpdate","Array","susceptible","floor","infected","immune","dead","population","total_population","renderRows","Graph","map","row","index","x","y","values","slice","react_d3_components_lib","getData","axes","width","height","margin","top","bottom","left","right","xAxis","yAxis","App","Navbar_Navbar","Inputs_Inputs","Graph_Graph","Chart_Chart","ReactDOM","render","App_App","querySelector"],"mappings":"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","file":"static/js/main.9b95d1e9.chunk.js","sourcesContent":["export class Ajax{\r\n    // sends an async http request \r\n    static request(options={}){\r\n        return new Promise((resolve, reject) => {\r\n            // extract config from options object\r\n            let method = (typeof options.method === \"string\") ? options.method : \"GET\",\r\n                url = (typeof options.url === \"string\") ? options.url : window.location.origin,\r\n                headers = (typeof options.headers === \"object\" && options.headers) ? options.headers : {},\r\n                query = (typeof options.query === \"object\" && options.query) ? options.query : {},\r\n                data = (typeof options.data !== \"undefined\") ? options.data : null;\r\n\r\n            // create the request\r\n            let xhr = new XMLHttpRequest();\r\n\r\n            // attach listeners\r\n            xhr.onload = () => resolve(xhr);\r\n            xhr.onerror = err => reject(err);\r\n\r\n            // apply query string\r\n            if(query){\r\n                url += Ajax.queryString(query);\r\n            }\r\n\r\n            // open the request\r\n            xhr.open(method, url);\r\n\r\n            // apply http headers\r\n            for(let h in headers){\r\n                xhr.setRequestHeader(h, headers[h]);\r\n            }\r\n\r\n            // send the request\r\n            // send JSON if the data is not a string\r\n            if(data){\r\n                if(typeof data !== \"string\"){\r\n                    xhr.send(JSON.stringify(data));\r\n                }\r\n                else xhr.send(data);\r\n            }\r\n            else xhr.send();\r\n        });\r\n    }\r\n\r\n    // async http get request\r\n    static get(url, headers, query){\r\n        return Ajax.request({method: \"GET\", url, headers, query});\r\n    }\r\n\r\n    // async http post request\r\n    static post(url, headers, data){\r\n        return Ajax.request({method: \"POST\", url, headers, data});\r\n    }\r\n\r\n    // creates a query string from an object\r\n    static queryString(dict){\r\n        let qs = \"?\";\r\n\r\n        for(let param in dict){\r\n            qs += `${param}=${dict[param]}&`;\r\n        }\r\n\r\n        return qs.substring(0, qs.length - 1);\r\n    }\r\n}","import { Ajax } from \"./Ajax\";\r\nimport { EventEmitter } from \"./EventEmitter\";\r\n\r\n// singleton for holding simulation data\r\n// event-driven to keep chart + graph updated\r\nlet Simulator = class Simulator extends EventEmitter{\r\n    constructor(){\r\n        super();\r\n\r\n        this.data = null;       // simulation data array\r\n        this._currentDay = 0;    // 'private' current simulation day\r\n    }\r\n\r\n    // hits the API for data, signals progress\r\n    // query should be a dictionary of the inputs, will be converted into a query string\r\n    load(query){\r\n        return new Promise((resolve, reject) => {\r\n            // figure out endpoint\r\n            let url = window.location.href.includes(\"localhost\") ? \"http://localhost:8080/plague\" : `${window.location.origin}/plague`;\r\n            \r\n            // CORS headers (use foreign domain)\r\n            let headers = {\r\n                \"Access-Control-Allow-Origin\": window.location.origin,\r\n                \"Access-Control-Allow-Headers\": \"Access-Control-Allow-Origin\"\r\n            };\r\n\r\n            // ajax call with query string\r\n            // (null headers)\r\n            Ajax.get(url, headers, query)\r\n                .then(xhr => {    \r\n                    // ajax resolved (could be bad/good request, but server responded)\r\n                    if(xhr.status === 200){\r\n                        // good request - attempt to parse results json\r\n                        try{\r\n                            // parse json\r\n                            this.data = JSON.parse(xhr.response);\r\n                        }\r\n                        catch(err){\r\n                            // json parse error (should never happen)\r\n                            reject(err);\r\n                            this.emit(new Event(\"error\"));  // server responded with bad request signal\r\n                        }\r\n\r\n                        // done, resolve promise and emit load + data\r\n                        resolve();\r\n                        this.emit(new Event(\"load\"));   // server responded with good request signal\r\n\r\n                        this.emit(new Event(\"data\"));   // parsed data signal\r\n                    }\r\n                    else{\r\n                        // bad request\r\n                        reject(new Error(xhr.response || \"Bad request\"));\r\n                        this.emit(new Event(\"error\"));  // server responded with bad request signal\r\n                    }\r\n                })\r\n                .catch(err => {\r\n                    // ajax request died (really bad NOT a 400 error!)\r\n                    reject(err);\r\n                    this.emit(new Event(\"error\"));  // request died signal\r\n                });\r\n        });\r\n    }\r\n\r\n    // async download\r\n    downloadCSV(query){\r\n        let url = window.location.href.includes(\"localhost\") ? `http://localhost:8080/plague/csv` : `${window.location.origin}/plague/csv`;\r\n        return Ajax.get(url, null, query);\r\n    }\r\n\r\n    // csv download url\r\n    createCSVDownloadURL(query){\r\n        let qs = Ajax.queryString(query);\r\n        return window.location.href.includes(\"localhost\") ? `http://localhost:8080/plague/csv${qs}` : `${window.location.origin}/plague/csv${qs}`;\r\n    }\r\n\r\n    // simulation moves to the last day\r\n    // (triggers listeners)\r\n    autoRun(){\r\n        this.currentDay = this.data.length - 1; // auto emits update\r\n    }\r\n\r\n    // steps the simulation forward one day\r\n    // (triggers listeners)\r\n    nextDay(){\r\n        if(this.currentDay < this.data.length){\r\n            this.currentDay++;  // auto emits update\r\n        }\r\n    }\r\n\r\n    // resets simulation to day 0 and clears all stored data\r\n    // (triggers listeners)\r\n    reset(){\r\n        this.data = null;\r\n        this.currentDay = 0;\r\n        this.emit(new Event(\"reset\"));\r\n    }\r\n\r\n    // always emit update\r\n    set currentDay(day){\r\n        this._currentDay = day; \r\n        this.emit(new Event(\"update\"));\r\n    }\r\n\r\n    get hasData(){\r\n        return this.data !== null;\r\n    }\r\n\r\n    get currentDay(){\r\n        return this._currentDay;\r\n    }\r\n}\r\n\r\n// singleton\r\nexport default new Simulator();","// simple event emitter class\r\nexport class EventEmitter{\r\n    constructor(){\r\n        this._listeners = {};   // 'private' dictionary of {eventType: listenerFunction}\r\n    }\r\n\r\n    // triggers all listening functions\r\n    emit(event){\r\n        if(this.willTrigger(event.type)){\r\n            this._listeners[event.type].forEach(listener => listener(event));\r\n        }\r\n    }\r\n\r\n    // adds a listener\r\n    on(eventType, listener){\r\n        if(this.willTrigger(eventType)){\r\n            this._listeners[eventType].push(listener);\r\n        }\r\n        else{\r\n            this._listeners[eventType] = [listener];\r\n        }\r\n    }\r\n\r\n    // removes a listener\r\n    off(eventType, listener){\r\n        if(this.willTrigger(eventType)){\r\n            let listeners = this._listeners[eventType];\r\n\r\n            for(let i = 0; i < listeners.length; i++){\r\n                if(listeners[i] === listener){\r\n                    listeners.splice(i, 1);\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // checks if there are any listeners for a given type\r\n    willTrigger(eventType){\r\n        return eventType in this._listeners;\r\n    }\r\n}","import \"./NumSlider.css\";\r\nimport React from \"react\";\r\n\r\nexport class NumSlider extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.numRef = React.createRef();\r\n        this.rangeRef = React.createRef();\r\n    }\r\n\r\n    // mounted - set the default numbers\r\n    componentDidMount(){\r\n        this.numRef.current.value = this.props.init || this.props.min;\r\n        this.rangeRef.current.value = this.props.init || this.props.min;\r\n    }\r\n\r\n    // on text field input\r\n    onNumber(evt){\r\n        // set the range value to the number value\r\n        let val = evt.target.value;\r\n    \r\n        // enforce min/max constraints\r\n        val = Math.min(Math.max(val, this.props.min), this.props.max); \r\n\r\n        // update inputs (update both incase bad number entered)\r\n        this.rangeRef.current.value = val;\r\n        this.numRef.current.value = val;\r\n    }\r\n\r\n    // on range bar move\r\n    onSlide(evt){\r\n        // set the text value to the number value\r\n        let val = evt.target.value;\r\n\r\n        // enforce min/max constraints \r\n        val = Math.min(Math.max(val, this.props.min), this.props.max);\r\n\r\n        // update number input\r\n        this.numRef.current.value = val;\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"num-slider-container\">\r\n                <div>\r\n                    <label>{this.props.label}</label>\r\n                    {this.props.showRange ? (` ${this.minText}-${this.maxText}`) : null}\r\n                </div>\r\n                <div>\r\n                    <input \r\n                        ref={this.numRef}\r\n                        onChange={this.onNumber.bind(this)}\r\n                        type=\"number\"\r\n                        min={this.props.min}\r\n                        max={this.props.max}\r\n                        step={this.props.step}\r\n                        placeholder={this.props.placeholder}\r\n                        required={this.props.required}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <input\r\n                        ref={this.rangeRef}\r\n                        onChange={this.onSlide.bind(this)}\r\n                        type=\"range\"\r\n                        min={this.props.min}\r\n                        max={this.props.max}\r\n                        step={this.props.step}\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    get minText(){\r\n        return this.props.minText ? this.props.minText : this.props.min;\r\n    }\r\n\r\n    get maxText(){\r\n        return this.props.maxText ? this.props.maxText : this.props.max;\r\n    }\r\n\r\n    get value(){\r\n        return this.numRef.current.value;\r\n    }\r\n}","import React from \"react\";\r\nimport Simulator from \"../Simulator\";\r\nimport { NumSlider } from \"./NumSlider\";\r\n\r\nexport class Inputs extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        // input refs\r\n        this.intialImmunityRef = React.createRef();\r\n        this.virilityRef = React.createRef();\r\n        this.fatalityRef = React.createRef();\r\n        this.initialInfectedRef = React.createRef();\r\n        this.intialPopRef = React.createRef();\r\n        this.infectionLengthRef = React.createRef();\r\n        this.daysRef = React.createRef();\r\n\r\n        this.state = {\r\n            pending: false,         // no new requests while pending (disable buttons)\r\n            message: null,          // message to display (errors)\r\n            lastBtn: null\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        Simulator.on(\"load\", this.onSimulatorLoad.bind(this));\r\n        Simulator.on(\"error\", this.onSimulatorError.bind(this));\r\n    }\r\n\r\n    // creates a dictionary of all the inputs and their values (names formatted for the API call) \r\n    getInputsDictionary(){\r\n        // extract data from inputs to use in query string \r\n        let immune_percent = this.intialImmunityRef.current.value,\r\n            virility = this.virilityRef.current.value,\r\n            fatal_percent = this.fatalityRef.current.value,\r\n            initial_infected = this.initialInfectedRef.current.value,\r\n            initial_population = this.intialPopRef.current.value,\r\n            infection_length = this.infectionLengthRef.current.value,\r\n            simulation_length = this.daysRef.current.value;\r\n\r\n        // make sure infected <= population\r\n        initial_infected = Math.min(initial_infected, initial_population);\r\n\r\n        // MUST match API expectations! \r\n        return {immune_percent, virility, fatal_percent, initial_infected, initial_population, infection_length, simulation_length};\r\n    }\r\n\r\n    onSimulatorError(){\r\n        this.setState({pending: false});    // enable buttons\r\n    }\r\n\r\n    onSimulatorLoad(){\r\n        this.setState({pending: false});    // enable buttons\r\n    }\r\n\r\n    // called when then the reset button is clicked\r\n    onReset(){\r\n        // cleared stored simulation data\r\n        Simulator.reset();\r\n    }\r\n\r\n    dayByDay(){\r\n        if(!Simulator.hasData){\r\n            // disable buttons for loading time\r\n            this.setState({pending: true});\r\n\r\n            // load data then show next day\r\n            Simulator.load(this.getInputsDictionary())\r\n                .then(() => {\r\n                    this.setState({message: null}); // remove possible err message\r\n                    Simulator.nextDay();\r\n                })\r\n                .catch(err => this.setState({message: err.message}));\r\n        }\r\n        else{\r\n            Simulator.nextDay();\r\n        }\r\n    }\r\n\r\n    autoRun(){\r\n        if(!Simulator.hasData){\r\n            // disable buttons for loading time\r\n            this.setState({pending: true});\r\n\r\n            // load data then auto run\r\n            Simulator.load(this.getInputsDictionary())\r\n                .then(() => {\r\n                    this.setState({message: null}); // remove possible err message\r\n                    Simulator.autoRun();\r\n                })\r\n                .catch(err => this.setState({message: err.message}));\r\n        }\r\n        else{\r\n            Simulator.autoRun();\r\n        }\r\n    }\r\n\r\n    // downloads the csv file\r\n    downloadCSV(){\r\n        if(!this.state.pending){\r\n            // create download link (never rendered)\r\n            let url = Simulator.createCSVDownloadURL(this.getInputsDictionary());\r\n\r\n            // create a link tag\r\n            let link = document.createElement(\"a\");\r\n            link.setAttribute(\"href\", url);\r\n            link.setAttribute(\"target\", \"_blank\");\r\n            link.setAttribute(\"download\", \"download\");\r\n\r\n            // click the tag\r\n            link.click();\r\n            link = null;\r\n\r\n            /*\r\n            //this.setState({pending: true});     // disable buttons\r\n\r\n            // async csv download request\r\n            Simulator.downloadCSV(this.getInputsDictionary())\r\n                .catch(err => this.setState({message: err.message}))    // error\r\n                .then(() => this.setState({pending: false}));           // enable buttons after fulfilled/rejected\r\n            */\r\n        }\r\n    }\r\n\r\n    // called when the form is 'submitted'\r\n    // entire purpose is to block the sending of the form\r\n    // (submit enforces 'required', 'min', 'max' constraints)\r\n    onSubmit(evt){\r\n        // no default submission (using ajax instead)\r\n        evt.preventDefault();\r\n\r\n        // problem - both autorun + next day activate this... (only way to do it with using form requires)\r\n\r\n        // day-by-day was the trigger\r\n        if(this.state.lastBtn === \"day-by-day\"){\r\n            this.dayByDay();\r\n        }\r\n\r\n        // autorun was the trigger\r\n        else if(this.state.lastBtn === \"auto-run\"){\r\n            this.autoRun();\r\n        }\r\n\r\n        // csv export was the trigger\r\n        else if(this.state.lastBtn === \"export-csv\"){\r\n            this.downloadCSV();\r\n        }\r\n        \r\n    }\r\n\r\n    // sets the last button to 'day-by-day' or 'autorun'\r\n    // kinda ugly but its because form has 2 submit buttons\r\n    onFormClick(evt){\r\n        this.setState({lastBtn: evt.target.getAttribute(\"btn\")});\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <h5 className=\"text-center\">Experimental Variables</h5>\r\n                <form onSubmit={this.onSubmit.bind(this)}>\r\n                    <div className=\"row\">\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <NumSlider\r\n                                label={\"Length of Infection (Days)\"}\r\n                                showRange={true}\r\n                                min={1}\r\n                                max={365}\r\n                                step={1}\r\n                                required={true}\r\n                                ref={this.infectionLengthRef}\r\n                            />\r\n                        </div>\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <NumSlider\r\n                                label={\"Virility\"}\r\n                                showRange={true}\r\n                                min={0}\r\n                                max={20}\r\n                                step={0.01}\r\n                                required={true}\r\n                                ref={this.virilityRef}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <NumSlider\r\n                                label={\"Fatality Percent\"}\r\n                                showRange={true}\r\n                                min={0}\r\n                                max={1}\r\n                                step={0.001}\r\n                                required={true}\r\n                                ref={this.fatalityRef}\r\n                            />\r\n                        </div>\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <NumSlider\r\n                                label={\"Initial Population\"}\r\n                                showRange={true}\r\n                                min={1}\r\n                                max={1000000}\r\n                                step={1}\r\n                                required={true}\r\n                                ref={this.intialPopRef}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <NumSlider\r\n                                label={\"Initial Immunity Percent\"}\r\n                                showRange={true}\r\n                                min={0}\r\n                                max={1}\r\n                                step={0.01}\r\n                                required={true}\r\n                                ref={this.intialImmunityRef}\r\n                            />\r\n                        </div>\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <NumSlider\r\n                                label={\"Initial Infected\"}\r\n                                showRange={true}\r\n                                min={0}\r\n                                max={1000000}\r\n                                maxText={\"Population\"}\r\n                                step={1}\r\n                                required={true}\r\n                                ref={this.initialInfectedRef}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <NumSlider\r\n                                label={\"Simulation Length (Days)\"}\r\n                                showRange={true}\r\n                                min={1}\r\n                                max={365}\r\n                                step={1}\r\n                                required={true}\r\n                                ref={this.daysRef}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group text-center\">\r\n                        <button onClick={this.onFormClick.bind(this)} className=\"input-btn\" disabled={this.state.pending} btn=\"day-by-day\">Day-By-Day</button>&nbsp;\r\n                        <button onClick={this.onFormClick.bind(this)} className=\"input-btn\" disabled={this.state.pending} btn=\"auto-run\">Auto Run</button>&nbsp;\r\n                        <button onClick={this.onReset.bind(this)} className=\"input-btn\" disabled={this.state.pending} type=\"button\" >Reset</button>&nbsp;\r\n                        <button onClick={this.onFormClick.bind(this)} className=\"input-btn\" disabled={this.state.pending} btn=\"export-csv\">Export CSV</button>\r\n                    </div>\r\n                </form>\r\n                <div>{this.state.message}</div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport ReactModal from \"react-modal\"\r\n\r\nexport class Modal extends React.Component{\r\n\r\n\tonClick(){\r\n\r\n\t}\r\n\r\n\trender(){\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<ReactModal isOpen={this.props.showModal} >\r\n      \t\t\t\t<span className=\"close\" onClick={this.props.closeModal}>&times;</span>\r\n      \t\t\t\t\t<h2 className=\"modalHeader\">Report Bug or Request New Feature</h2>\r\n      \t\t\t\t\t<table className=\"reportsTable\">\r\n      \t\t\t\t\t\t<tr>\r\n\t      \t\t\t\t\t\t<td className=\"bugReport\">\r\n\t      \t\t\t\t\t\t\t<h5>Report Bug:</h5>\r\n\t\t\t      \t\t\t\t\t<textarea rows=\"4\" cols=\"100\">\r\n\t\t\t      \t\t\t\t\t\tReport Bug Here\r\n\t\t\t      \t\t\t\t\t</textarea>\r\n\t\t\t      \t\t\t\t\t<br/>\r\n\t\t\t      \t\t\t\t\t<button onClick={this.onClick.bind(this)}>Submit</button>\r\n\t\t      \t\t\t\t\t</td>\r\n\t\t      \t\t\t\t\t<td className=\"featureRequest\">\r\n\t\t      \t\t\t\t\t\t<h5>Request Feature:</h5>\r\n\t\t\t      \t\t\t\t\t<textarea rows=\"4\" cols=\"100\">\r\n\t\t\t      \t\t\t\t\t\t Request Feature Here\r\n\t\t\t      \t\t\t\t\t</textarea>\r\n\t\t\t      \t\t\t\t\t<br/>\r\n\t\t\t      \t\t\t\t\t<button onClick={this.onClick.bind(this)}>Submit</button>\r\n\t\t      \t\t\t\t\t</td>\r\n\t      \t\t\t\t\t</tr>\r\n      \t\t\t\t\t</table>\r\n      \t\t\t</ReactModal>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n","import React from \"react\";\r\nimport { Modal } from \"./Modal\"\r\n\r\nexport class Navbar extends React.Component{\r\n\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\r\n\t    this.state = {\r\n\t    \tshowModal: false,\r\n\t    \tcloseModal:false\r\n\t    };\r\n\r\n\t}\r\n\r\n\tcloseModal(){\r\n\t\tthis.setState({showModal:false});\r\n\t}\r\n\r\n\topenModal(){\r\n\t\tthis.setState({showModal:true});\r\n\t}\r\n\r\n\trender(){\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n\t\t\t\t\t<div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n\t\t\t\t\t\t<ul className=\"navbar-nav mr-auto\">\r\n\t\t  \t\t\t\t\t<li className=\"nav-item active\">\r\n\t\t    \t\t\t\t\t<span className=\"nav-link\" onClick={this.openModal.bind(this)}>Report Bug <span className=\"sr-only\">(current)</span></span>\r\n\t\t  \t\t\t\t\t</li>\r\n\t\t  \t\t\t\t</ul>\r\n\t\t  \t\t\t</div>\r\n\t      \t\t</nav>\r\n\t      \t\t<Modal showModal={this.state.showModal} closeModal={this.closeModal.bind(this)} />\r\n\t      \t</div>\r\n\t\t);\r\n\t}\r\n}","import React from \"react\";\r\nimport Simulator from \"../Simulator\";\r\n\r\nexport class Chart extends React.Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\tdata: null,\t\t// simulatoion data set\r\n\t\t\tday: 0\t\t\t// current simulation day\r\n\t\t};\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\t// simulator singles data set loaded\r\n\t\tSimulator.on(\"data\", this.onSimulatorData.bind(this));\r\n\r\n\t\t// simulator signals a reset\r\n\t\tSimulator.on(\"reset\", this.onSimulatorReset.bind(this));\r\n\r\n\t\t// simulator signals a different day\r\n\t\tSimulator.on(\"update\", this.onSimulatorUpdate.bind(this));\r\n\t}\r\n\r\n\t// simulator got data - store it\r\n\tonSimulatorData(){\r\n\t\tthis.setState({data: Simulator.data});\r\n\t}\r\n\r\n\t// simulator reset - reset this component\r\n\tonSimulatorReset(){\r\n\t\tthis.setState({data: null, day: 0});\r\n\t}\r\n\r\n\t// simulator day changed - update component day\r\n\tonSimulatorUpdate(){\r\n\t\tthis.setState({day: Simulator.currentDay});\r\n\t}\r\n\r\n\t// renders table rows up to the current simulation day\r\n\trenderRows(){\r\n\t\tif(Simulator.hasData){\r\n\t\t\tlet rows = new Array(Simulator.currentDay + 1);\r\n\r\n\t\t\tfor(let i = 0, day; i < Simulator.currentDay; i++){\r\n\t\t\t\tday = Simulator.data[i];\r\n\r\n\t\t\t\tlet susceptible = Math.floor(day.susceptible),\r\n\t\t\t\t\tinfected = Math.floor(day.infected),\r\n\t\t\t\t\timmune = Math.floor(day.immune),\r\n\t\t\t\t\tdead = Math.floor(day.dead),\r\n\t\t\t\t\tpopulation = Math.floor(day.total_population);\r\n\r\n\t\t\t\trows[i] = (\r\n\t\t\t\t\t<tr key={i}>\r\n\t\t\t\t\t\t<td>{i}</td>\r\n\t\t\t\t\t\t<td>{susceptible}</td>\r\n\t\t\t\t\t\t<td>{infected}</td>\r\n\t\t\t\t\t\t<td>{immune}</td>\r\n\t\t\t\t\t\t<td>{dead}</td>\r\n\t\t\t\t\t\t<td>{population}</td>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\treturn rows;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n\r\n\trender(){\r\n\t\treturn this.state.data !== null ? (\r\n\t\t\t<div>\r\n\t\t\t\t<table className=\"table table-striped overflow-table\">\r\n\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t<th>Day</th>\r\n\t\t\t\t\t\t\t<th>Susceptible</th>\r\n\t\t\t\t\t\t\t<th>Infected</th>\r\n\t\t\t\t\t\t\t<th>Immune</th>\r\n\t\t\t\t\t\t\t<th>Dead</th>\r\n\t\t\t\t\t\t\t<th>Total Population</th>\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t</thead>\r\n\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t{this.renderRows()}\r\n\t\t\t\t\t</tbody>\r\n\t\t\t\t</table>\r\n\t\t\t</div>\r\n\t\t) : null;\r\n\t}\r\n}","import React from \"react\";\r\nimport Simulator from \"../Simulator\";\r\nimport { LineChart } from \"react-d3-components\";\r\n\r\nexport class Graph extends React.Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\r\n\t    this.state = {\r\n\t\t\tdata: null,\t\t// graph points\r\n\t\t\tday: 0\t\t\t// current simulation day\r\n\t    };\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\t// when the simulator signals it has received data\r\n\t\tSimulator.on(\"data\", this.onSimulatorData.bind(this));\r\n\r\n\t\t// when the simulator signals a reset\r\n\t\tSimulator.on(\"reset\", this.onSimulatorReset.bind(this));\r\n\r\n\t\t// when the simulator changes the day\r\n\t\tSimulator.on(\"update\", this.onSimulatorUpdate.bind(this));\r\n\t}\r\n\r\n\t// simulator has data - convert to d3 format and store it\r\n\tonSimulatorData(){\r\n\t\t// map a new array of {x: day, y: dead}\r\n\t\tlet data = Simulator.data.map((row, index) => {\r\n\t\t\treturn {\r\n\t\t\t\tx: index,\r\n\t\t\t\ty: row.infected\r\n\t\t\t};\r\n\t\t});\r\n\r\n\t\t// update\r\n\t\tthis.setState({data});\r\n\t}\r\n\r\n\t// simulator reset - reset this component\r\n\tonSimulatorReset(){\r\n\t\tthis.setState({data: null, day: 0});\r\n\t}\r\n\r\n\t// simulator update - update to the current day\r\n\tonSimulatorUpdate(){\r\n\t\tthis.setState({day: Simulator.currentDay});\r\n\t}\r\n\r\n\t// gets the data values up to the current day\r\n\tgetData(){\r\n\t\tif(!this.state.data || this.state.day < 1){\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\t// d3 wants {values:[...]}\r\n\t\tlet values = this.state.data.slice(0, this.state.day + 1);\r\n\t\treturn {values};\r\n\t}\r\n\r\n\trender(){\r\n\t\treturn this.state.data !== null ? (\r\n\t\t\t<div>\r\n\t\t\t\t<h5></h5>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<LineChart\r\n\t\t\t\t\t\tdata={this.getData()}\r\n\t\t\t\t\t\taxes\r\n\t\t\t\t\t\twidth={400}\r\n\t\t\t\t\t\theight={400}\r\n\t\t\t\t\t\tmargin={{top: 10, bottom: 50, left: 50, right: 10}}\r\n\t\t\t\t\t\txAxis={{label: \"Day\"}}\r\n\t\t\t\t\t\tyAxis={{label: \"Infected\"}}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t) : null;\r\n\t}\r\n}","import \"../lib/bootstrap.min.css\";\r\nimport \"./App.css\";\r\nimport React from \"react\";\r\nimport { Inputs } from \"./Inputs\";\r\nimport { Navbar } from \"./Navbar\";\r\nimport { Chart } from \"./Chart\";\r\nimport { Graph } from \"./Graph\";\r\n\r\nexport class App extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            rows: null\r\n        };\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <Navbar/>\r\n                <br/>\r\n                <main className=\"container card card-body bg-light\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-lg-6\">\r\n                            <Inputs/>\r\n                        </div>\r\n                        <div className=\"col-lg-6\">\r\n                            <Graph rows={this.state.rows}/>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-lg-12\">\r\n                        <Chart/>\r\n                    </div>\r\n                </main>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { App } from \"./components/App\";\r\n\r\nReactDOM.render(<App/>, document.querySelector(\"#root\"));"],"sourceRoot":""}