{"version":3,"sources":["Ajax.js","EventEmitter.js","Simulator.js","ParamStorage.js","GraphData.js","components/NumSlider.jsx","components/ExportsModal.jsx","preset.js","components/Inputs.jsx","components/MailModal.jsx","components/Navbar.jsx","components/faqModal.jsx","components/Table.jsx","components/GraphRange.jsx","components/TrendLine.jsx","components/Graph.jsx","components/App.jsx","index.js"],"names":["Ajax","Object","classCallCheck","this","createClass","key","value","options","arguments","length","undefined","Promise","resolve","reject","method","url","window","location","origin","headers","query","data","xhr","XMLHttpRequest","h","onload","onerror","err","queryString","open","setRequestHeader","send","JSON","stringify","request","dict","qs","param","concat","substring","EventEmitter","_listeners","event","willTrigger","type","forEach","listener","eventType","push","listeners","i","splice","src_Simulator","Simulator","_this","possibleConstructorReturn","getPrototypeOf","call","_firstInvalidDay","_useErrCorrecting","_this2","href","includes","Access-Control-Allow-Origin","Error-Correction","isErrCorrecting","get","then","status","parse","response","parseInt","getResponseHeader","emit","Event","Error","catch","filename","Content-Type","csvDataBlob","Blob","a","document","createElement","URL","createObjectURL","setAttribute","Date","now","click","revokeObjectURL","console","log","message","src_ParamStorage","ParamStorage","_numParamSets","_lastParamSet","_currDay","sessionStorage","clear","params","convertToTitleCase","paramsNotLastSave","setItem","numParamSets","removeItem","infectionLength","transmissionRate","virulence","initialPopulation","immunePercent","initialInfected","simulationLength","preset","errCorrection","saveParamsInputsDict","infection_length","transmission_rate","initial_population","immune_percent","initial_infected","simulation_length","error_correction","errorCorrection","newParams","paramId","json","getItem","firstStoredDay","currentDay","getSavedParams","src_GraphData","GraphData","_startDay","_endDay","Number","MAX_SAFE_INTEGER","_trendLineY","extractTrendLine","URLSearchParams","search","trendLineY","parseFloat","keysDict","simData","labeledPoints","largestY","start","startDay","end","endDay","day","label","y","pt","x","Math","max","Array","fill","map","val","index","values","keys","labels","filter","min","NumSlider","_React$Component","props","numRef","React","createRef","rangeRef","inherits","current","init","evt","target","react_default","className","showRange","minText","maxText","ref","onChange","onNumber","bind","step","placeholder","required","disabled","onSlide","set","n","Component","ExportsModal","exportUrlRef","csvFilenameElement","state","exportOption","exportDropdown","copyMessage","csvMessage","pending","setState","downloadCSVFile","getInputsDictionary","toggle","prev","elem","select","execCommand","_this3","reactstrap_es","innerRef","element","maxLength","color","onClick","downloadCSV","defaultValue","getExportURL","readOnly","copyLinkText","_this4","isOpen","toggleModal","toggleExportDropdown","caret","renderExportOptBody","presets","Seasonal Flu","Infection Length","Transmission","Virulence","Smallpox","Polio","Measles","Ebola","H1N1 Flu","H5N1 Flu","1918 Flu","INPUT_RANGES","Inputs","intialImmunityRef","transmissionRef","virulenceRef","initialInfectedRef","intialPopRef","infectionLengthRef","daysRef","presetRef","isDisabled","exportModalOpen","on","onSimulatorLoad","onSimulatorError","forceUpdate","extractQueryStringParams","useTestValues","onPresetChange","healthy","reset","hasData","currParams","runSimulation","load","preventDefault","direction","stepBackwards","stepForwards","currentParams","id","switchParamSet","hasPrevDay","index_es","icon","hasNextDay","onSubmit","NumSlider_NumSlider","onReset","toggleExportModal","ExportsModal_ExportsModal","MailModal","textRef","errorRef","headerRef","typeError","errorTime","errorMsg","other","errMessage","successMessage","prevProps","showModal","e","goodHeader","BuildArray","post","text","lib_default","closeModal","submitClick","onTypeSelect","name","TypeOther","Navbar","showNav","showAdvanced","showHelp","light","expand","toggleNavbar","navbar","selected","openModal","toggleDropdown","toggleErrorCorrection","closeHelp","MailModal_MailModal","Table","visible","style","firstInvalidDay","borderLeft","borderRight","rows","dayData","susceptible","round","Susceptible","infected","Infected","immune","Immune","dead","Dead","population","TotalPopulation","getStyleForDay","toLocaleString","renderRows","GraphRange","lowerRef","upperRef","lowValue","low","high","selectedMax","highValue","selectedMin","onChangeLow","onChangeHigh","TrendLine","WIDTH","COLORS","Graph","graphContainerRef","tooltip","containerWidth","graphLabels","toggleLabel","addEventListener","onResize","prevState","yLabel","nextLabels","assign","getBoundingClientRect","width","borders","borderBottom","container","svgElement","querySelector","canvas","ctx","getContext","getAttribute","height","svgXml","XMLSerializer","serializeToString","blob","svgUrl","svgImage","imageSmoothingEnabled","imageSmoothingQuality","drawImage","globalCompositeOperation","fillStyle","fillRect","jpg","toDataURL","getData","dayCount","join","renderLabelButtons","react_easy_chart_lib","margin","top","bottom","left","right","axes","axisLabels","dataPoints","xDomainRange","yDomainRange","lineColors","clickHandler","onGraphClick",".label",".axis","fontSize","fontFamily","TrendLine_TrendLine","GraphRange_GraphRange","library","add","fab","faAngleDoubleLeft","faAngleDoubleRight","faSkull","faBalanceScale","d","App","apply","Navbar_Navbar","size","lg","Inputs_Inputs","Graph_Graph","Table_Table","getFullYear","ReactDOM","render","App_App"],"mappings":"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","file":"static/js/main.4eb46a18.chunk.js","sourcesContent":["export class Ajax{\r\n    // sends an async http request \r\n    static request(options={}){\r\n        return new Promise((resolve, reject) => {\r\n            // extract config from options object\r\n            let method = (typeof options.method === \"string\") ? options.method : \"GET\",\r\n                url = (typeof options.url === \"string\") ? options.url : window.location.origin,\r\n                headers = (typeof options.headers === \"object\" && options.headers) ? options.headers : {},\r\n                query = (typeof options.query === \"object\" && options.query) ? options.query : {},\r\n                data = (typeof options.data !== \"undefined\") ? options.data : null;\r\n\r\n            // create the request\r\n            let xhr = new XMLHttpRequest();\r\n\r\n            // attach listeners\r\n            xhr.onload = () => resolve(xhr);\r\n            xhr.onerror = err => reject(err);\r\n\r\n            // apply query string\r\n            if(query){\r\n                url += Ajax.queryString(query);\r\n            }\r\n\r\n            // open the request\r\n            xhr.open(method, url);\r\n\r\n            // apply http headers\r\n            for(let h in headers){\r\n                xhr.setRequestHeader(h, headers[h]);\r\n            }\r\n\r\n            // send the request\r\n            // send JSON if the data is not a string\r\n            if(data){\r\n                if(typeof data !== \"string\"){\r\n                    xhr.send(JSON.stringify(data));\r\n                }\r\n                else xhr.send(data);\r\n            }\r\n            else xhr.send();\r\n        });\r\n    }\r\n\r\n    // async http get request\r\n    static get(url, headers, query){\r\n        return Ajax.request({method: \"GET\", url, headers, query});\r\n    }\r\n\r\n    // async http post request\r\n    static post(url, headers, data){\r\n        return Ajax.request({method: \"POST\", url, headers, data});\r\n    }\r\n\r\n    // creates a query string from an object\r\n    static queryString(dict){\r\n        let qs = \"?\";\r\n\r\n        for(let param in dict){\r\n            qs += `${param}=${dict[param]}&`;\r\n        }\r\n\r\n        return qs.substring(0, qs.length - 1);\r\n    }\r\n}","// simple event emitter class\r\nexport class EventEmitter{\r\n    constructor(){\r\n        this._listeners = {};   // 'private' dictionary of {eventType: listenerFunction}\r\n    }\r\n\r\n    // triggers all listening functions\r\n    emit(event){\r\n        if(this.willTrigger(event.type)){\r\n            this._listeners[event.type].forEach(listener => listener(event));\r\n        }\r\n    }\r\n\r\n    // adds a listener\r\n    on(eventType, listener){\r\n        if(this.willTrigger(eventType)){\r\n            this._listeners[eventType].push(listener);\r\n        }\r\n        else{\r\n            this._listeners[eventType] = [listener];\r\n        }\r\n    }\r\n\r\n    // removes a listener\r\n    off(eventType, listener){\r\n        if(this.willTrigger(eventType)){\r\n            let listeners = this._listeners[eventType];\r\n\r\n            for(let i = 0; i < listeners.length; i++){\r\n                if(listeners[i] === listener){\r\n                    listeners.splice(i, 1);\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // checks if there are any listeners for a given type\r\n    willTrigger(eventType){\r\n        return eventType in this._listeners;\r\n    }\r\n}","import { Ajax } from \"./Ajax\";\r\nimport { EventEmitter } from \"./EventEmitter\";\r\n\r\n// singleton for holding simulation data\r\n// event-driven to keep chart + graph updated\r\nclass Simulator extends EventEmitter{\r\n    constructor(){\r\n        super();\r\n\r\n        this.data = null;                   // simulation data array\r\n        this._firstInvalidDay = -1;         // first invalid day (-1 = no invalid days)\r\n        this._useErrCorrecting = true;      // use error correction?\r\n    }\r\n\r\n    // hits the API for data, signals progress\r\n    // query should be a dictionary of the inputs, will be converted into a query string\r\n    load(query){\r\n        return new Promise((resolve, reject) => {\r\n            // figure out endpoint\r\n            let url = window.location.href.includes(\"localhost\") ? \"http://localhost:8080/plague\" : `${window.location.origin}/plague`;\r\n            \r\n            // CORS headers (use foreign domain)\r\n            let headers = {\r\n                \"Access-Control-Allow-Origin\": window.location.origin,\r\n                \"Error-Correction\": this.isErrCorrecting\r\n            };\r\n\r\n            // ajax call with query string\r\n            // (null headers)\r\n            Ajax.get(url, headers, query)\r\n                .then(xhr => {    \r\n                    // ajax resolved (could be bad/good request, but server responded)\r\n                    if(xhr.status === 200){\r\n                        // good request - attempt to parse results json\r\n                        try{\r\n                            // parse json\r\n                            this.data = JSON.parse(xhr.response);\r\n\r\n                            // extract first invalid day\r\n                            this._firstInvalidDay = parseInt(xhr.getResponseHeader(\"First-Invalid-Day\")) || -1;\r\n                        }\r\n                        catch(err){\r\n                            // json parse error (should never happen)\r\n                            reject(err);\r\n                            this.emit(new Event(\"error\"));  // server responded with bad request signal\r\n                        }\r\n\r\n                        // done, resolve promise and emit load + data\r\n                        resolve();\r\n                        this.emit(new Event(\"load\"));   // server responded with good request signal\r\n\r\n                        this.emit(new Event(\"data\"));   // parsed data signal\r\n                    }\r\n                    else{\r\n                        // bad request\r\n                        reject(new Error(xhr.response || \"Bad request\"));\r\n                        this.emit(new Event(\"error\"));  // server responded with bad request signal\r\n                    }\r\n                })\r\n                .catch(err => {\r\n                    // ajax request died (really bad NOT a 400 error!)\r\n                    reject(err);\r\n                    this.emit(new Event(\"error\"));  // request died signal\r\n                });\r\n        });\r\n    }\r\n\r\n    // asychronously downloads a csv file using ajax\r\n    downloadCSVFile(query, filename=null){\r\n        return new Promise((resolve, reject) => {\r\n            // figure out endpoint origin\r\n            let origin = window.location.origin.includes(\"localhost\") ? \"http://localhost:8080\" : window.location.origin;\r\n\r\n            // figure out endpoint using origin\r\n            let url = `${origin}/plague`;\r\n\r\n            // http request headers\r\n            let headers = {\r\n                \"Access-Control-Allow-Origin\": window.location.origin,\r\n                \"Content-Type\": \"text/csv\"\r\n            };\r\n\r\n            // make sure .csv\r\n            if(filename && filename.substring(filename.length - 4, filename.length) !== \".csv\"){\r\n                filename += \".csv\";\r\n            }\r\n\r\n            // get csv file via Ajax\r\n            Ajax.get(url, headers, query)\r\n                .then(xhr => {\r\n                    // server responded\r\n                    if(xhr.status === 200){\r\n                        // good http status - download\r\n                        // xhr.response = csv text\r\n                        // convert to blob\r\n                        let csvDataBlob = new Blob([xhr.response], {type: \"octet/stream\"});\r\n\r\n                        // create a 'secret' link using the blob\r\n                        let a = document.createElement(\"a\");\r\n                        let url = window.URL.createObjectURL(csvDataBlob);\r\n                        \r\n                        // setup the link to download blob data\r\n                        a.setAttribute(\"download\", filename || `data_${Date.now()}.csv`);\r\n                        a.setAttribute(\"href\", url);\r\n\r\n                        // click the link to download the file\r\n                        a.click();\r\n                        window.URL.revokeObjectURL(url);\r\n\r\n                        // trigger any listeners\r\n                        resolve(\"File downloaded.\");\r\n                    }\r\n                    else{\r\n                        // bad http status - trigger listeners with error\r\n                        console.log(xhr.response);\r\n                        reject(new Error(\"Error downloading CSV file.\"));\r\n                    }\r\n                })\r\n                .catch(err => {\r\n                    // server did not responed - trigger listeners with error\r\n                    console.log(err.message);\r\n                    reject(new Error(\"Unable to download CSV file.\"))\r\n                });\r\n        });\r\n    }\r\n\r\n    // resets simulation to day 0 and clears all stored data\r\n    // (triggers listeners)\r\n    reset(){\r\n        this.data = null;\r\n        this.emit(new Event(\"reset\"));\r\n    }\r\n\r\n    set isErrCorrecting(value){\r\n        if(typeof value === \"boolean\"){\r\n            this._useErrCorrecting = value;\r\n            this.emit(new Event(\"update\"));\r\n        }\r\n        else throw new Error(\"isErrCorrecting must be set to a boolean value.\");\r\n    }\r\n\r\n    get hasData(){\r\n        return this.data !== null;\r\n    }\r\n\r\n    get firstInvalidDay(){\r\n        return this._firstInvalidDay;\r\n    }\r\n\r\n    get isErrCorrecting(){\r\n        return this._useErrCorrecting;\r\n    }\r\n}\r\n\r\n// singleton\r\nexport default new Simulator();","import { EventEmitter } from \"./EventEmitter\";\r\n\r\n// class for managing parameter data history using session storage\r\nconst PARAM_STORAGE_LIMIT = 100;\r\n\r\nclass ParamStorage extends EventEmitter{\r\n    constructor(){\r\n        super();\r\n\r\n        this._numParamSets = 0;\r\n        this._lastParamSet = null;\r\n        this._currDay = 0;\r\n\r\n        window.sessionStorage.clear();\r\n    }\r\n    \r\n    // saves parameters to session storage - expects query string format (as provided by inputs.jsx)\r\n    saveParamsInputsDict(dict){\r\n        let params = this.convertToTitleCase(dict);\r\n\r\n        // prevent saving multiple set same time in a row\r\n        if(this.paramsNotLastSave(params)){\r\n            window.sessionStorage.setItem(++this._numParamSets, JSON.stringify(params))\r\n            this._currDay = this.numParamSets;\r\n            this._lastParamSet = params;\r\n\r\n            // enforce storage capacity - begin deleting from the left bound\r\n            if(this.numParamSets > PARAM_STORAGE_LIMIT){\r\n                window.sessionStorage.removeItem(this.numParamSets - PARAM_STORAGE_LIMIT);\r\n            }\r\n\r\n            this.emit(new Event(\"save\"));\r\n\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // saves parameters to session storage\r\n    saveParams(infectionLength, transmissionRate, virulence, initialPopulation, immunePercent, initialInfected, simulationLength, preset, errCorrection){\r\n        return this.saveParamsInputsDict({\r\n            infection_length:   infectionLength,\r\n            transmission_rate:  transmissionRate,\r\n            virulence,\r\n            initial_population: initialPopulation,\r\n            immune_percent:     immunePercent,\r\n            initial_infected:   initialInfected,\r\n            simulation_length:  simulationLength,\r\n            preset,\r\n            error_correction:   errCorrection\r\n        });\r\n    }\r\n\r\n    // converts underscore format dict to title case (ex: initial_population to InitialPopulation)\r\n    convertToTitleCase(dict){\r\n        return {\r\n            infectionLength:    dict.infection_length,\r\n            transmissionRate:   dict.transmission_rate,\r\n            virulence:          dict.virulence,\r\n            initialPopulation:  dict.initial_population,\r\n            immunePercent:      dict.immune_percent,\r\n            initialInfected:    dict.initial_infected,\r\n            simulationLength:   dict.simulation_length,\r\n            preset:             dict.preset,\r\n            errorCorrection:    dict.error_correction\r\n        };\r\n    }\r\n\r\n    // checks if 'newParams' is content different from the last save param set\r\n    paramsNotLastSave(newParams){\r\n        if(!this._lastParamSet) return true;\r\n\r\n        for(let param in this._lastParamSet){\r\n            if(this._lastParamSet[param] !== newParams[param]){\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // gets saved parameters\r\n    getSavedParams(paramId){\r\n        let json = window.sessionStorage.getItem(paramId) || null;\r\n        return json ? JSON.parse(json) : null;\r\n    }\r\n\r\n    // moves current day one into the backwards\r\n    stepBackwards(){\r\n        if(this._currDay - 1 >= this.firstStoredDay){\r\n            --this._currDay;\r\n            //this._lastParamSet = this.getSavedParams(--this._currDay);\r\n        }\r\n    }\r\n\r\n    // move sthe current day one day forwards\r\n    stepForwards(){\r\n        if(this._currDay + 1 <= this.numParamSets){\r\n            ++this._currDay;\r\n            //this._lastParamSet = this.getSavedParams(++this._currDay);\r\n        }\r\n    }\r\n\r\n    get hasPrevDay(){\r\n        return this._numParamSets > 0 && this.currentDay > 1;\r\n    }\r\n\r\n    get hasNextDay(){\r\n        return this._numParamSets > 0 && this.currentDay < this.numParamSets;\r\n    }\r\n\r\n    get firstStoredDay(){\r\n        if(this.numParamSets > PARAM_STORAGE_LIMIT){\r\n            return this.numParamSets - PARAM_STORAGE_LIMIT;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    get currentParams(){\r\n        return this.getSavedParams(this._currDay);\r\n    }\r\n\r\n    get currentDay(){\r\n        return this._currDay;\r\n    }\r\n\r\n    get numParamSets(){\r\n        return this._numParamSets;\r\n    }\r\n}\r\n\r\nexport default new ParamStorage();","import Simulator from \"./Simulator\";\r\nimport { EventEmitter } from './EventEmitter';\r\n\r\nclass GraphData extends EventEmitter{\r\n    constructor(){\r\n        super();\r\n\r\n        this._startDay = -1;\r\n        this._endDay = Number.MAX_SAFE_INTEGER;\r\n        this._trendLineY = 0;\r\n\r\n        this.extractTrendLine();\r\n    }\r\n\r\n    // extracts trend line from query strings\r\n    extractTrendLine(){\r\n        // query strings\r\n        let qs = new URLSearchParams(window.location.search);\r\n        \r\n        // get trend line as float (default 0)\r\n\t\tlet trendLineY = parseFloat(qs.get(\"trend_line\")) || 0;\r\n        this._trendLineY = trendLineY;\r\n    }\r\n\r\n    getData(keysDict){\r\n        let simData = Simulator.data;   // simulation data array\r\n        let labeledPoints = {};         // stores the points array in a dictionary (key=label)\r\n        let largestY = 0;               // largest y in data set\r\n\r\n        if(simData){\r\n            // start & end indeces \r\n            let start = this.startDay > -1 ? this.startDay : 0;\r\n            let end = this.endDay < simData.length ? this.endDay : (simData.length - 1);\r\n\r\n            for(let i = start; i <= end; i++){\r\n                let day = simData[i];\r\n\r\n                // label is 'Infected', 'Susceptible', etc (whatever is provided)\r\n                for(let label in keysDict){\r\n                    if(keysDict[label] !== true){\r\n                        continue;\r\n                    }\r\n\r\n                    // get y value (x is always the day/index)\r\n                    let y = parseFloat(day[label]);\r\n\r\n                    // create x, y point\r\n                    let pt = {x: i, y};\r\n\r\n                    // store the point to its associated label\r\n                    if(label in labeledPoints){\r\n                        labeledPoints[label].push(pt);\r\n                    }\r\n                    else{\r\n                        labeledPoints[label] = [pt];\r\n                    }\r\n\r\n                    // update largest Y\r\n                    largestY = Math.max(largestY, y);\r\n                }\r\n            }\r\n\r\n            // optional trend line points\r\n            if(this.trendLineY > 0){\r\n                // creates an array of [{x, y},...] where x is the day and y is the trend line Y\r\n                labeledPoints[\"TrendLine\"] = new Array(end - start).fill(null).map((val, index) => ({x: index + start, y: this.trendLineY}));\r\n            }\r\n        }\r\n\r\n        // convert sorted dictionary into an array\r\n        let values = [];\r\n        Object.keys(labeledPoints).forEach(key => values.push(labeledPoints[key]));\r\n\r\n        // gets all the labels that are in the dictionary and true (in order)\r\n        let labels = Object.keys(keysDict).filter(key => keysDict[key] === true);\r\n\r\n        return {values, largestY, labels};\r\n    }\r\n\r\n    // sets the start/end days\r\n    // (better to use this than setting start & end days individually due to 1 update)\r\n    setDaysRange(start, end){\r\n        this._startDay = start;\r\n        this._endDay = end;\r\n        this.emit(new Event(\"update\"));\r\n    }\r\n\r\n    set startDay(value){\r\n        this._startDay = value;\r\n        this.emit(new Event(\"update\"));\r\n    }\r\n\r\n    set endDay(value){\r\n        this._endDay = value;\r\n        this.emit(new Event(\"update\"));\r\n    }\r\n\r\n    set trendLineY(value){\r\n        this._trendLineY = value;\r\n        this.emit(new Event(\"update\"));\r\n    }\r\n\r\n    get startDay(){\r\n        return Math.max(0, this._startDay);\r\n    }\r\n\r\n    get endDay(){\r\n        return Math.min(this._endDay, Simulator.data ? Simulator.data.length : 0);\r\n    }\r\n\r\n    get trendLineY(){\r\n        return this._trendLineY;\r\n    }\r\n}\r\n\r\nexport default new GraphData();","import \"./NumSlider.css\";\r\nimport React from \"react\";\r\n\r\nexport class NumSlider extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.numRef = React.createRef();\r\n        this.rangeRef = React.createRef();\r\n    }\r\n\r\n    // mounted - set the default numbers\r\n    componentDidMount(){\r\n        this.numRef.current.value = this.props.init || this.props.min;\r\n        this.rangeRef.current.value = this.props.init || this.props.min;\r\n    }\r\n\r\n    // on text field input\r\n    onNumber(evt){\r\n        // set the range value to the number value\r\n        let val = parseFloat(evt.target.value);\r\n    \r\n        if(val){\r\n            // enforce min/max constraints\r\n            val = Math.min(Math.max(val, this.props.min), this.props.max); \r\n\r\n            // update inputs\r\n            this.numRef.current.value = val;\r\n            this.rangeRef.current.value = val;\r\n        }\r\n        else{\r\n            // empty input - range at min and number will be empty\r\n            this.rangeRef.current.value = this.props.min;\r\n        }\r\n    }\r\n\r\n    // on range bar move\r\n    onSlide(evt){\r\n        // set the text value to the number value\r\n        let val = evt.target.value;\r\n\r\n        // enforce min/max constraints \r\n        val = Math.min(Math.max(val, this.props.min), this.props.max);\r\n\r\n        // update number input\r\n        this.numRef.current.value = val;\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"num-slider-container\">\r\n                <div>\r\n                    <label>{this.props.label}</label>\r\n                    {this.props.showRange ? (` ${this.minText}-${this.maxText}`) : null}\r\n                </div>\r\n                <div>\r\n                    <input \r\n                        ref={this.numRef}\r\n                        onChange={this.onNumber.bind(this)}\r\n                        type=\"number\"\r\n                        min={this.props.min}\r\n                        max={this.props.max}\r\n                        step={this.props.step}\r\n                        placeholder={this.props.placeholder}\r\n                        required={this.props.required}\r\n                        disabled={this.props.disabled}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <input\r\n                        ref={this.rangeRef}\r\n                        onChange={this.onSlide.bind(this)}\r\n                        type=\"range\"\r\n                        min={this.props.min}\r\n                        max={this.props.max}\r\n                        step={this.props.step}\r\n                        disabled={this.props.disabled}\r\n                        className=\"num-slider-slider\"\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    set value(n){\r\n        // must be in range\r\n        n = Math.max(this.props.min, n);\r\n        n = Math.min(n, this.props.max);\r\n\r\n        // update elements \r\n        this.numRef.current.value = n;\r\n        this.rangeRef.current.value = n;\r\n    }\r\n\r\n    get minText(){\r\n        return this.props.minText ? this.props.minText : this.props.min;\r\n    }\r\n\r\n    get maxText(){\r\n        return this.props.maxText ? this.props.maxText : this.props.max;\r\n    }\r\n\r\n    get value(){\r\n        return this.numRef.current.value;\r\n    }\r\n}","import \"./ExportsModal.css\";\r\nimport React from \"react\";\r\nimport { Modal, ModalBody, ModalHeader, Dropdown, DropdownItem, DropdownMenu, DropdownToggle, Button, Input } from \"reactstrap\";\r\nimport Simulator from \"../Simulator\";\r\nimport GraphData from \"../GraphData\";\r\n\r\nexport class ExportsModal extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        // export refs\r\n        this.exportUrlRef = React.createRef();\r\n        this.csvFilenameElement = null;         // later to set an <input> (reactstrap inner ref)\r\n\r\n        this.state = {\r\n            exportOption: null,\r\n            exportDropdown: false,\r\n            copyMessage: null,\r\n            csvMessage: null,\r\n            pending: false\r\n        };\r\n    }\r\n    \r\n    // downloads the csv file\r\n    downloadCSV(){\r\n        if(!this.state.pending){\r\n            // disable buttons\r\n            this.setState({pending: true, csvMessage: \"Loading...\"});\r\n\r\n            // optional filename override\r\n            let filename = this.csvFilenameElement ? this.csvFilenameElement.value : null;\r\n\r\n            Simulator.downloadCSVFile(this.props.getInputsDictionary(), filename)\r\n                .then(() => this.setState({csvMessage: \"Download complete.\"}))  // good\r\n                .catch(err => this.setState({csvMessage: err.message}))         // err - something went wrong (server did not respond or bad request)\r\n                .then(() => this.setState({pending: false}));                   // always - free buttons\r\n        }\r\n    }\r\n\r\n    toggleModal(){\r\n        this.setState({exportOption: null, copyMessage: null, csvMessage: null});\r\n        this.props.toggle();\r\n    }\r\n\r\n    toggleExportDropdown(){\r\n        this.setState(prev => ({exportDropdown: !prev.exportDropdown}));\r\n    }\r\n\r\n    getExportURL(){\r\n        let dict = this.props.getInputsDictionary();\r\n\r\n        let url = `${window.location.origin}?`;\r\n\r\n        for(let param in dict){\r\n            url += `${param}=${dict[param]}&`;\r\n        }\r\n\r\n        url += `trend_line=${GraphData.trendLineY}`;\r\n\r\n        return url;\r\n    }\r\n\r\n    copyLinkText(){\r\n        let elem = this.exportUrlRef.current;\r\n        if(elem){\r\n            elem.select();\r\n            document.execCommand(\"copy\");\r\n\r\n            this.setState({copyMessage: \"(Copied to clipboard)\"});\r\n        }\r\n    }\r\n\r\n    renderExportOptBody(){\r\n        if(this.state.exportOption === \"csv\"){\r\n            return (\r\n                <div>\r\n                    <div>\r\n                        Exports a comma separated value (.csv) file containing the results displayed in the table.\r\n                        This file is easily accesible in Excel. \r\n                    </div>\r\n                    <br/>\r\n                    <div>\r\n                        <Input\r\n                            innerRef={element => this.csvFilenameElement = element}\r\n                            placeholder=\"Optional filename (.csv automatically appended)\"\r\n                            type=\"text\"\r\n                            maxLength={25}\r\n                        />        \r\n                    </div>\r\n                    <br/>\r\n                    <div>\r\n                        <Button color=\"fade\" onClick={this.downloadCSV.bind(this)} disabled={this.state.pending}>Download CSV</Button>\r\n                        <span className=\"csv-text-container\">\r\n                            {this.state.csvMessage}\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        else if(this.state.exportOption === \"sim-link\"){\r\n            return (\r\n                <div>\r\n                    <div>\r\n                        Exports a URL for this application with preset values that can be shared.\r\n                    </div>\r\n                    <br/>\r\n                    <div>\r\n                        <textarea ref={this.exportUrlRef} className=\"modal-url-text\" defaultValue={this.getExportURL()} readOnly>\r\n                        </textarea>\r\n                    </div>\r\n                    <br/>\r\n                    <div>\r\n                        <Button color=\"fade\" onClick={this.copyLinkText.bind(this)}>Copy Link</Button>\r\n                        <span className=\"copy-text-container\">\r\n                            {this.state.copyMessage}\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        return (\r\n            <div>\r\n                Please select an export option.\r\n            </div>\r\n        )\r\n    }\r\n    \r\n    render(){\r\n        return (\r\n            <Modal isOpen={this.props.isOpen}>\r\n                <ModalHeader toggle={this.toggleModal.bind(this)}>\r\n                    <Dropdown isOpen={this.state.exportDropdown} toggle={this.toggleExportDropdown.bind(this)}>\r\n                        <DropdownToggle color=\"fade\" caret>\r\n                            Export Options\r\n                        </DropdownToggle>\r\n                        <DropdownMenu>\r\n                            <DropdownItem onClick={() => this.setState({exportOption: \"csv\"})}>\r\n                                Table CSV\r\n                            </DropdownItem>\r\n                            <DropdownItem onClick={() => this.setState({exportOption: \"sim-link\"})}>\r\n                                Simulation Link\r\n                            </DropdownItem>\r\n                        </DropdownMenu>\r\n                    </Dropdown>\r\n                </ModalHeader>\r\n                <ModalBody>\r\n                    <div>\r\n                        {this.renderExportOptBody()}\r\n                    </div>\r\n                </ModalBody>\r\n            </Modal>\r\n        );\r\n    }\r\n}","export const presets ={\r\n    //presets in the inputs go here\r\n    //seasonal flu\r\n   \"Seasonal Flu\":{\r\n       \"Infection Length\": 8,\r\n       \"Transmission\": 1.2,\r\n       \"Virulence\": 0.01\r\n   },\r\n   //smallpox\r\n   \"Smallpox\":{\r\n    \"Infection Length\": 14,\r\n    \"Transmission\": 2.5,\r\n    \"Virulence\": 0.25 \r\n   },\r\n   //polio\r\n   \"Polio\":{\r\n    \"Infection Length\": 18,\r\n    \"Transmission\": 1,\r\n    \"Virulence\": 0.01 \r\n   },\r\n   //measles\r\n   \"Measles\":{\r\n    \"Infection Length\": 8,\r\n    \"Transmission\": 10,\r\n    \"Virulence\": 0.01 \r\n   },\r\n   //Ebola\r\n   \"Ebola\":{\r\n    \"Infection Length\": 13,\r\n    \"Transmission\": 1.5,\r\n    \"Virulence\": 0.75 \r\n   },\r\n    //H1N1 Flu\r\n    \"H1N1 Flu\":{\r\n    \"Infection Length\": 8,\r\n    \"Transmission\": 1.6,\r\n    \"Virulence\": 0.01 \r\n    },\r\n    //H5N1 Flu\r\n   \"H5N1 Flu\":{\r\n    \"Infection Length\": 8,\r\n    \"Transmission\": 0.1,\r\n    \"Virulence\": 0.6 \r\n   },\r\n    //1918 Flu\r\n    \"1918 Flu\":{\r\n    \"Infection Length\": 8,\r\n    \"Transmission\": 2,\r\n    \"Virulence\": 0.03 \r\n    }\r\n}\r\nexport default presets;\r\n","import React from \"react\";\r\nimport { Row, Col, Form, FormGroup, Button, Input } from \"reactstrap\";\r\nimport Simulator from \"../Simulator\";\r\nimport ParamStorage from \"../ParamStorage\";\r\nimport GraphData from \"../GraphData\";\r\nimport { NumSlider } from \"./NumSlider\";\r\nimport { ExportsModal } from \"./ExportsModal\";\r\nimport preset from \"../preset\"\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\n// input range constraints (min, max, step)\r\nexport const INPUT_RANGES = {\r\n    INFECTION_LENGTH:   [1, 365, 1],\r\n    TRANSMISSION_RATE:  [0, 20, 0.01],\r\n    VIRULENCE:          [0, 1, 0.001],\r\n    INITIAL_POPULATION: [1, 1000000, 1],\r\n    IMMUNE_PERCENT:     [0, 1, 0.01],\r\n    INITIAL_INFECTED:   [0, 1000000, 1],\r\n    SIMULATION_LENGTH:  [1, 365, 1]\r\n};\r\n\r\nexport class Inputs extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        // input refs\r\n        this.intialImmunityRef = React.createRef();\r\n        this.transmissionRef = React.createRef();\r\n        this.virulenceRef = React.createRef();\r\n        this.initialInfectedRef = React.createRef();\r\n        this.intialPopRef = React.createRef();\r\n        this.infectionLengthRef = React.createRef();\r\n        this.daysRef = React.createRef();\r\n        this.presetRef = React.createRef();\r\n\r\n        this.state = {\r\n            pending: false,             // no new requests while pending (disable buttons)\r\n            message: null,              // message to display (errors)\r\n            isDisabled: false,          // to disable/enable fields depending on what preset is selected\r\n            exportModalOpen: false      // export options modal visibility\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        Simulator.on(\"load\", this.onSimulatorLoad.bind(this));\r\n        Simulator.on(\"error\", this.onSimulatorError.bind(this));\r\n        \r\n        // re-render on param storage save - used for disabling the << >> buttons\r\n        ParamStorage.on(\"save\", () => this.forceUpdate());\r\n\r\n        // query string params?\r\n        this.extractQueryStringParams();\r\n\r\n        // test values?\r\n        if(new URLSearchParams(window.location.search).get(\"test\") === \"true\"){\r\n            this.useTestValues();\r\n        }\r\n    }\r\n    \r\n    // extracts optional query string parameters from the query string\r\n    extractQueryStringParams(){\r\n        // get query string data\r\n        let qs = new URLSearchParams(window.location.search);\r\n\r\n        // extract values from query string - set to the number value or default to min\r\n        // (setting value to below min will result in min)\r\n        this.initialInfectedRef.current.value = parseInt(qs.get(\"initial_infected\")) || -1;\r\n        this.intialImmunityRef.current.value =  parseFloat(qs.get(\"immune_percent\")) || -1;\r\n        this.intialPopRef.current.value =       parseInt(qs.get(\"initial_population\")) || -1;\r\n        this.virulenceRef.current.value =       parseFloat(qs.get(\"virulence\")) || -1;\r\n        this.daysRef.current.value =            parseInt(qs.get(\"simulation_length\")) || -1;\r\n        this.infectionLengthRef.current.value = parseInt(qs.get(\"infection_length\")) || -1;\r\n        this.transmissionRef.current.value =    parseFloat(qs.get(\"transmission_rate\")) || -1;\r\n\r\n        // preset query string\r\n        let preset = qs.get(\"preset\");\r\n        if(preset){\r\n            this.presetRef.current.value = preset;\r\n            this.onPresetChange();\r\n        }\r\n    }\r\n\r\n    // changes the input parameters to predefined test values\r\n    useTestValues(){\r\n        // set values\r\n        this.initialInfectedRef.current.value = 500;\r\n        this.intialImmunityRef.current.value = 0.10;\r\n        this.intialPopRef.current.value = 1000000;\r\n        this.virulenceRef.current.value = 0.25;\r\n        this.daysRef.current.value = 365;\r\n        this.infectionLengthRef.current.value = 100;\r\n        this.transmissionRef.current.value = 0.2;\r\n\r\n        // force save\r\n        ParamStorage.saveParamsInputsDict(this.getInputsDictionary());\r\n    }\r\n\r\n    // creates a dictionary of all the inputs and their values (names formatted for the API call) \r\n    getInputsDictionary(){\r\n        // extract data from inputs to use in query string \r\n        let immune_percent =        this.intialImmunityRef.current.value,\r\n            transmission_rate =     this.transmissionRef.current.value,\r\n            virulence =             this.virulenceRef.current.value,\r\n            initial_infected =      this.initialInfectedRef.current.value,\r\n            initial_population =    this.intialPopRef.current.value,\r\n            infection_length =      this.infectionLengthRef.current.value,\r\n            simulation_length =     this.daysRef.current.value,\r\n            preset =                this.presetRef.current.value,\r\n            error_correction =      Simulator.isErrCorrecting\r\n\r\n        // make sure infected <= population\r\n        initial_infected = Math.min(initial_infected, initial_population);\r\n\r\n        // make sure immune percent is <= healthy population\r\n        let healthy = (initial_population - initial_infected) / initial_population;\r\n        immune_percent = Math.min(immune_percent, healthy);\r\n\r\n        // MUST match API expectations! \r\n        return {immune_percent, transmission_rate, virulence, initial_infected, initial_population, infection_length, simulation_length, preset, error_correction};\r\n    }\r\n\r\n    onSimulatorError(){\r\n        this.setState({pending: false});    // enable buttons\r\n    }\r\n\r\n    onSimulatorLoad(){\r\n        this.setState({pending: false});    // enable buttons\r\n    }\r\n\r\n    // called when then the reset button is clicked\r\n    onReset(){\r\n        // cleared stored simulation data\r\n        Simulator.reset();\r\n    }\r\n\r\n    runSimulation(){\r\n        // no simulation data - load it (first simulation or reset happened)\r\n        if(!Simulator.hasData){\r\n            // disable buttons for loading time\r\n            this.setState({pending: true});\r\n\r\n            // load data then auto run\r\n            Simulator.load(this.getInputsDictionary())\r\n                .then(() => {\r\n                    this.setState({message: null}); // remove possible err message\r\n\r\n                    ParamStorage.saveParamsInputsDict(this.getInputsDictionary());  // save parameters\r\n                })\r\n                .catch(err => this.setState({message: err.message}));\r\n        }\r\n        else{\r\n            // verify current parameters are not the same as the ones already run\r\n            // (prevents reloading data that we already have!)\r\n            let currParams = ParamStorage.convertToTitleCase(this.getInputsDictionary());\r\n\r\n            if(ParamStorage.paramsNotLastSave(currParams)){\r\n                // parameters are different than last time\r\n                // run new simulation\r\n                Simulator.reset();      // triggers clearing graph/table and clears data\r\n                this.runSimulation();   // runs again, but sim will have no data\r\n            }\r\n        }\r\n    }\r\n\r\n    // called when the form is 'submitted'\r\n    // entire purpose is to block the sending of the form\r\n    // (submit enforces 'required', 'min', 'max' constraints)\r\n    onSubmit(evt){\r\n        // no default submission (using ajax instead)\r\n        evt.preventDefault();\r\n\r\n        this.runSimulation();\r\n    }\r\n\r\n    onPresetChange(){\r\n        let value = this.presetRef.current.value;\r\n        \r\n        if(value !== \"Custom\"){\r\n            this.setState({isDisabled: true});\r\n            this.infectionLengthRef.current.value = preset[value][\"Infection Length\"];\r\n            this.transmissionRef.current.value = preset[value][\"Transmission\"];\r\n            this.virulenceRef.current.value = preset[value][\"Virulence\"]\r\n        }else{\r\n            this.setState({isDisabled: false});\r\n        }\r\n    }\r\n\r\n    toggleExportModal(){\r\n        this.setState(prev => ({exportModalOpen: !prev.exportModalOpen}));\r\n    }\r\n\r\n    // moves the parameter storage day & updates UI inputs\r\n    switchParamSet(direction){\r\n        // move the day\r\n        if(direction === \"backwards\"){\r\n            ParamStorage.stepBackwards();\r\n        }\r\n        else if(direction === \"forwards\"){\r\n            ParamStorage.stepForwards();\r\n        }\r\n        else throw new Error(\"Parameter switch direction must be 'forwards' or 'backwards'.\");\r\n\r\n        // bail if nothing already saved\r\n        let params = ParamStorage.currentParams || null;\r\n        if(!params) return; // nothing saved\r\n\r\n        // fill out UI form\r\n        this.infectionLengthRef.current.value = params.infectionLength;\r\n        this.transmissionRef.current.value = params.transmissionRate;\r\n        this.virulenceRef.current.value = params.virulence;\r\n        this.intialPopRef.current.value = params.initialPopulation;\r\n        this.intialImmunityRef.current.value = params.immunePercent;\r\n        this.initialInfectedRef.current.value = params.initialInfected;\r\n        this.daysRef.current.value = params.simulationLength;\r\n\r\n        this.presetRef.current.value = params.preset;\r\n        this.onPresetChange();\r\n\r\n        if(\"errorCorrection\" in params){\r\n            Simulator.isErrCorrecting = params.errorCorrection; \r\n        }\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"input-container\">\r\n                <div id=\"inputs-header-container\" className=\"text-center\">\r\n                    <button onClick={() => this.switchParamSet(\"backwards\")} disabled={!ParamStorage.hasPrevDay}>\r\n                        <FontAwesomeIcon icon=\"angle-double-left\" />\r\n                    </button>\r\n                    <h5 className=\"text-center\">Experimental Variables</h5>\r\n                    <button onClick={() => this.switchParamSet(\"forwards\")} disabled={!ParamStorage.hasNextDay}>\r\n                        <FontAwesomeIcon icon=\"angle-double-right\" />\r\n                    </button>\r\n                </div>\r\n                <br/>\r\n                <form onSubmit={this.onSubmit.bind(this)}>\r\n                    <div className=\"row\">\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <NumSlider\r\n                                label={\"Length of Infection (Days)\"}\r\n                                showRange={true}\r\n                                min={INPUT_RANGES.INFECTION_LENGTH[0]}\r\n                                max={INPUT_RANGES.INFECTION_LENGTH[1]}\r\n                                step={INPUT_RANGES.INFECTION_LENGTH[2]}\r\n                                required={true}\r\n                                ref={this.infectionLengthRef}\r\n                                disabled={this.state.isDisabled}\r\n                            />\r\n                        </div>\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <NumSlider\r\n                                label={\"Transmission Rate\"}\r\n                                showRange={true}\r\n                                min={INPUT_RANGES.TRANSMISSION_RATE[0]}\r\n                                max={INPUT_RANGES.TRANSMISSION_RATE[1]}\r\n                                step={INPUT_RANGES.TRANSMISSION_RATE[2]}\r\n                                required={true}\r\n                                ref={this.transmissionRef}\r\n                                disabled={this.state.isDisabled}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <NumSlider\r\n                                label={\"Virulence\"}\r\n                                showRange={true}\r\n                                min={INPUT_RANGES.VIRULENCE[0]}\r\n                                max={INPUT_RANGES.VIRULENCE[1]}\r\n                                step={INPUT_RANGES.VIRULENCE[2]}\r\n                                required={true}\r\n                                ref={this.virulenceRef}\r\n                                disabled={this.state.isDisabled}\r\n                            />\r\n                        </div>\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <NumSlider\r\n                                label={\"Initial Population\"}\r\n                                showRange={true}\r\n                                min={INPUT_RANGES.INITIAL_POPULATION[0]}\r\n                                max={INPUT_RANGES.INITIAL_POPULATION[1]}\r\n                                step={INPUT_RANGES.INITIAL_POPULATION[2]}\r\n                                required={true}\r\n                                ref={this.intialPopRef}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <NumSlider\r\n                                label={\"Initial Immunity Percent\"}\r\n                                showRange={true}\r\n                                min={INPUT_RANGES.IMMUNE_PERCENT[0]}\r\n                                max={INPUT_RANGES.IMMUNE_PERCENT[1]}\r\n                                step={INPUT_RANGES.IMMUNE_PERCENT[2]}\r\n                                required={true}\r\n                                ref={this.intialImmunityRef}\r\n                            />\r\n                        </div>\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <NumSlider\r\n                                label={\"Initial Infected\"}\r\n                                showRange={true}\r\n                                min={INPUT_RANGES.INITIAL_INFECTED[0]}\r\n                                max={INPUT_RANGES.INITIAL_INFECTED[1]}\r\n                                step={INPUT_RANGES.INITIAL_INFECTED[2]}\r\n                                maxText={\"Population\"}\r\n                                required={true}\r\n                                ref={this.initialInfectedRef}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <NumSlider\r\n                                label={\"Simulation Length (Days)\"}\r\n                                showRange={true}\r\n                                min={INPUT_RANGES.SIMULATION_LENGTH[0]}\r\n                                max={INPUT_RANGES.SIMULATION_LENGTH[1]}\r\n                                step={INPUT_RANGES.SIMULATION_LENGTH[2]}\r\n                                required={true}\r\n                                ref={this.daysRef}\r\n                            />\r\n                        </div>\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <label>Presets:</label>\r\n                            <select ref={this.presetRef} className=\"form-control\" onChange={this.onPresetChange.bind(this)}>\r\n                                <option>Custom</option>\r\n                                <option>Seasonal Flu</option>\r\n                                <option>Smallpox</option>\r\n                                <option>Polio</option>\r\n                                <option>Measles</option>\r\n                                <option>Ebola</option>\r\n                                <option>H1N1 Flu</option>\r\n                                <option>H5N1 Flu</option>\r\n                                <option>1918 Flu</option>\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group text-center\">\r\n                        <button className=\"input-btn\" disabled={this.state.pending}>Run</button>&nbsp;\r\n                        <button onClick={this.onReset.bind(this)} className=\"input-btn\" disabled={this.state.pending} type=\"button\">Reset</button>&nbsp;\r\n                        <button onClick={this.toggleExportModal.bind(this)} className=\"input-btn\" disabled={this.state.pending} type=\"button\">Export</button>\r\n                    </div>\r\n                </form>\r\n                <div>{this.state.message}</div>\r\n                <ExportsModal\r\n                    isOpen={this.state.exportModalOpen}\r\n                    toggle={this.toggleExportModal.bind(this)}\r\n                    getInputsDictionary={this.getInputsDictionary.bind(this)}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport ReactModal from \"react-modal\"\r\nimport { Ajax } from \"../Ajax\";\r\n\r\nexport class MailModal extends React.Component{\r\n\r\n\tconstructor(props){\r\n        super(props);\r\n\r\n        // input refs\r\n        this.textRef = React.createRef();\r\n        this.errorRef = React.createRef();\r\n        this.headerRef = React.createRef();\r\n\r\n        this.type = null;\r\n        this.typeError = true;\r\n        this.errorTime = false;\r\n        this.errorMsg = \"\";\r\n\r\n        this.state = { \r\n\t\t\tother: false,\r\n\t\t\terrMessage:null,\r\n\t\t\tsuccessMessage:null,\r\n\t\t\tdisabled: false\r\n        };\r\n\r\n        //Modal.setAppElement(this.props.app);\r\n\t}\r\n\r\n\tcomponentDidUpdate(prevProps){\r\n\t\t// clear messages when the visibility changes\r\n\t\tif(prevProps.showModal && !this.props.showModal){\r\n\t\t\tthis.setState({errMessage: null, successMessage: null});\r\n\t\t}\r\n\t}\r\n\r\n\t// on click of submit button \r\n\tsubmitClick(e){\r\n\t\tthis.setState({errMessage:null});\r\n\t\te.preventDefault();\r\n\t\tlet goodHeader = this.headerRef.current ? (this.headerRef.current.value.length > 0) : true;\r\n\t\tif(this.type != null && this.textRef.current.value != \"\" && goodHeader){\r\n\t\t\tlet message = this.BuildArray();\r\n\r\n\t\t\t// localhost = dev, else = prod\r\n\t\t\tlet origin = window.location.origin.includes(\"localhost\") ? \"http://localhost:8080\" : window.location.origin;\r\n\r\n\t\t\t// sending message, disable send button\r\n\t\t\tthis.setState({successMessage: \"Sending...\", errMessage: null, disabled: true});\r\n\r\n\t\t\tAjax.post(`${origin}/mail`, null, message)\r\n\t\t\t\t.then(xhr => {  \r\n                    // ajax resolved (could be bad/good request, but server responded)\r\n                    if(xhr.status === 200){\r\n\t\t\t\t\t\t// good request - attempt to parse results json\r\n\t\t\t\t\t\tthis.setState({successMessage:\"Submit Successful\", errMessage: null, disabled: false});\r\n                    }\r\n                    else{\r\n\t\t\t\t\t\t// bad request\r\n\t\t\t\t\t\tthis.setState({errMessage:\"Bad Request Error\", successMessage: null, disabled: false});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\t// clear inputs\r\n\t\t\t\t\tif(this.headerRef.current){\r\n\t\t\t\t\t\tthis.headerRef.current.value = \"\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.textRef.current.value = \"\";\r\n                })\r\n                .catch(err => {\r\n                    // ajax request died (really bad NOT a 400 error!)\r\n\t\t\t\t\tthis.setState({errMessage:\"Cannot reach server\", disabled: false});// request died signal\r\n                });\r\n\t\t}\r\n\t}\r\n\t\r\n\t//Build the JSON array that is sent over the Ajax request\r\n\tBuildArray(){\r\n\t\t//get the text in the the message textarea\r\n\t\tlet text = this.textRef.current.value;\r\n\t\t//\r\n        let type = \"\";\r\n\r\n        if(this.state.other){\r\n        \ttype = this.headerRef.current.value;\r\n        }else{\r\n        \ttype = this.type;\r\n        }\r\n\r\n        // MUST match API expectations! \r\n        return {type,text};\r\n    }\r\n\r\n\t// on change of radio button set type\r\n\tonTypeSelect(type){\r\n\t\t//get the type of the radio button selected\r\n\t \tthis.type = type;\r\n\r\n\t\t// check to see if other is selected\r\n\t\tthis.setState({other: this.type === \"other\"});\r\n\r\n\t \tthis.typeError = false;\r\n\t }\r\n\r\n\t //Check if other is selcted and load elements based on that\r\n \t TypeOther(){\r\n\t \tif(!this.state.other){\r\n\t\t\t // remove element of screen\r\n\t \t\treturn null;\r\n\t \t}else{\r\n\t\t\t //load element onto screen\r\n\t \t\treturn(\r\n\t \t\t\t<div>\r\n\t \t\t\t\t<label>Other: </label> <input type=\"text\" placeholder=\"Input for other\" ref={this.headerRef} required/>\r\n\t \t\t\t</div>\r\n\t \t\t);\r\n\t \t}\r\n\t }\r\n\t \r\n\trender(){\r\n\t\treturn this.props.showModal ? (\r\n\t\t\t<div>\r\n\t\t\t\t<ReactModal isOpen={this.props.showModal} >\r\n\t\t\t\t\t<div className=\"col-lg-1\">\r\n\t\t\t  \t\t\t<span className=\"pointer\" onClick={this.props.closeModal}>&times;</span>\r\n\t\t\t  \t\t</div>\r\n\t\t\t  \t\t<div className=\"container border\">\r\n\t\t\t\t\t  <form onSubmit={this.submitClick.bind(this)}>\r\n\t\t\t\t\t  \t\t<div>\r\n\t\t\t\t\t\t\t\t<div className=\"header center\">\r\n\t\t\t\t\t\t\t\t\t<h2 className=\"modalHeader\">Contact Us</h2>\r\n\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t<span className=\"error\">\r\n\t\t\t\t\t\t\t\t\t\t{this.state.errMessage}\r\n\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t\t<span className=\"success\">\r\n\t\t\t\t\t\t\t\t\t\t{this.state.successMessage}\r\n\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div className=\"form-group center\">\r\n\t\t\t\t\t\t\t\t\t<input type=\"radio\" onChange={() => this.onTypeSelect(\"Bug Report\")} name=\"types\" value=\"problem\" required/>Have a problem?\r\n\t\t\t\t\t\t\t\t\t&nbsp;\r\n\t\t\t\t\t\t\t\t\t<input type=\"radio\" onChange={() => this.onTypeSelect(\"Feature Request\")} name=\"types\" value=\"idea\" required/>Have an idea?\r\n\t\t\t\t\t\t\t\t\t&nbsp;\r\n\t\t\t\t\t\t\t\t\t<input type=\"radio\" onChange={() => this.onTypeSelect(\"other\")} name=\"types\" value=\"other\" required/>Other\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div className=\"form-group center\">\r\n\t\t\t\t\t\t\t\t\t{this.TypeOther()}\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div className=\"form-group center\">\r\n\t\t\t\t\t\t\t\t\t<textarea className=\"modal-text-area\" placeholder=\"Type message in here.\" ref={this.textRef} required></textarea>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div className=\"form-group center\">\r\n\t\t\t\t\t\t\t\t\t<input className=\"input-btn\" type=\"submit\" disabled={this.state.disabled} />\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</form>\r\n\t\t\t\t\t</div>\r\n      \t\t\t</ReactModal>\r\n\t\t\t</div>\r\n\t\t) : null;\r\n\t}\r\n}","import React from \"react\";\r\nimport { Dropdown, DropdownToggle, DropdownMenu, DropdownItem, Navbar as RNavbar, NavItem, Collapse, NavbarToggler, Nav, NavLink } from \"reactstrap\";\r\nimport { NavbarBrand } from 'reactstrap';\r\nimport { MailModal } from \"./MailModal\";\r\nimport Simulator from \"../Simulator\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faqModal } from \"./faqModal\";\r\n\r\nexport class Navbar extends React.Component{\r\n\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\r\n\t    this.state = {\r\n\t\t\tshowNav: false,\t\t\t// navbar collapse\r\n\t\t\tshowModal: false,\t\t// mail modal visibility\r\n\t\t\tshowAdvanced: false,\t\t// advanced dropdown menu visibility\r\n\t\t\tshowHelp: false\t\t\t\t// visibility for the FAQ modal\r\n\t    };\r\n\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\t// error correction changed\r\n\t\tSimulator.on(\"update\", () => this.forceUpdate());\r\n\t}\r\n\r\n\t// close the mail modal\r\n\tcloseModal(){\r\n\t\tthis.setState({showModal: false});\r\n\t}\r\n\r\n\t// show the mail modal\r\n\topenModal(){\r\n\t\tthis.setState({showModal: true});\r\n\t}\r\n\r\n\t// open the FAQ Modal\r\n\topenHelp(){\r\n\t\tthis.setState({showHelp: true});\r\n\t}\r\n\r\n\t// open the FAQ Modal\r\n\tcloseHelp(){\r\n\t\tthis.setState({showHelp: false});\r\n\t}\r\n\r\n\t// toggles the navbar collapse state\r\n\ttoggleNavbar(){\r\n\t\tthis.setState(prev => ({showNav: !prev.showNav}));\r\n\t}\r\n\r\n\t// toggle advanced dropdown\r\n\ttoggleDropdown(){\r\n\t\tthis.setState(prev => ({showAdvanced: !prev.showAdvanced}));\r\n\t}\r\n\r\n\t// advanced dropdown error correction option toggle\r\n\ttoggleErrorCorrection(){\r\n\t\tSimulator.isErrCorrecting = !Simulator.isErrCorrecting;\r\n\t}\r\n\r\n\trender(){\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<RNavbar color=\"light\" light expand=\"md\">\r\n\t\t\t\t\t<NavbarBrand>\r\n\t\t\t\t\t\t<span className=\"pp-heading\">The Plague Project</span>\r\n\t\t\t\t\t\t&nbsp;\r\n\t\t\t\t\t\t<FontAwesomeIcon className=\"skull-icon\" icon=\"skull\"></FontAwesomeIcon>\r\n\t\t\t\t\t\t&nbsp;\r\n\t\t\t\t\t\t<a href='/'>Disease Simulator</a>\r\n\t\t\t\t\t</NavbarBrand>\r\n\t\t\t\t\t<NavbarToggler color=\"dark\" onClick={this.toggleNavbar.bind(this)}/>\r\n\t\t\t\t\t<Collapse isOpen={this.state.showNav} navbar>\t\t\t\t\t\r\n\t\t\t\t\t\t<Nav navbar  className=\"ml-auto\">\r\n\t\t\t\t\t\t\t{/*<NavItem>\r\n\t\t\t\t\t\t\t\t<NavLink className=\"pointer\" selected onClick={this.openHelp.bind(this)}>FAQ</NavLink>\r\n\t\t\t\t\t\t\t</NavItem>*/}\r\n\t\t\t\t\t\t\t<NavItem>\r\n\t\t\t\t\t\t\t\t<NavLink  className=\"pointer\" selected onClick={this.openModal.bind(this)}>Contact Us</NavLink>\r\n\t\t\t\t\t\t\t</NavItem>\r\n\t\t\t\t\t\t\t<NavItem>\r\n\t\t\t\t\t\t\t\t<Dropdown isOpen={this.state.showAdvanced} toggle={this.toggleDropdown.bind(this)}>\r\n\t\t\t\t\t\t\t\t\t\t<DropdownToggle caret color=\"light\">\r\n\t\t\t\t\t\t\t\t\t\t\tAdvanced\r\n\t\t\t\t\t\t\t\t\t\t</DropdownToggle>\r\n\t\t\t\t\t\t\t\t\t\t<DropdownMenu>\r\n\t\t\t\t\t\t\t\t\t\t\t<DropdownItem className=\"errCorrect\" onClick={this.toggleErrorCorrection.bind(this)}>\r\n\t\t\t\t\t\t\t\t\t\t\t{Simulator.isErrCorrecting ? \"Disable\" : \"Enable\"}<br />Error Correction\r\n\t\t\t\t\t\t\t\t\t\t\t</DropdownItem>\r\n\t\t\t\t\t\t\t\t\t\t</DropdownMenu>\r\n\t\t\t\t\t\t\t\t\t</Dropdown>\r\n\t\t\t\t\t\t\t</NavItem>\r\n\t\t\t\t\t\t\t<NavItem>\r\n\t\t\t\t\t\t\t\t<NavLink href='https://github.com/davidrosenblum/Plague-Project'>\r\n\t\t\t\t\t\t\t\t\t<FontAwesomeIcon icon={['fab', 'github']} />\r\n\t\t\t\t\t\t\t\t\t&nbsp;\r\n\t\t\t\t\t\t\t\t\t<span className=\"Version\">v0.2</span>\r\n\t\t\t\t\t\t\t\t</NavLink>\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t</NavItem>\r\n\t\t\t\t\t\t</Nav>\r\n\t\t\t\t\t</Collapse>\r\n\t\t\t\t</RNavbar>\r\n\t\t\t\t<faqModal showModal={this.state.showHelp} closeModal={this.closeHelp.bind(this)}/>\r\n\t\t\t\t<MailModal showModal={this.state.showModal} closeModal={this.closeModal.bind(this)} />\r\n\t      \t</div>\r\n\t\t);\r\n\t}\r\n}","import React from \"react\";\r\nimport ReactModal from \"react-modal\"\r\n\r\nexport class faqModal extends React.Component{\r\n\r\n\tconstructor(props){\r\n        super(props);\r\n\t}\r\n\t \r\n\trender(){\r\n\t\treturn this.props.showHelp ? (\r\n\t\t\t<div>\r\n                Faq Modal\r\n\t\t\t</div>\r\n\t\t) : null;\r\n\t}\r\n}","import React from \"react\";\r\nimport Simulator from \"../Simulator\";\r\n\r\nexport class Table extends React.Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\tvisible: false\t//true/false if simulator data to render\r\n\t\t};\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\t// simulator singles data set loaded - render data\r\n\t\tSimulator.on(\"data\", () => this.setState({visible: true}));\r\n\r\n\t\t// simulator signals a reset - nothing to render\r\n\t\tSimulator.on(\"reset\", () => this.setState({visible: false}));\r\n\t}\r\n\r\n\r\n\tgetStyleForDay(index){\r\n\t\tlet style = null;\r\n\r\n\t\tif(Simulator.firstInvalidDay > -1){\r\n\t\t\tif(index === Simulator.firstInvalidDay){\r\n\t\t\t\t// this row is first invalid day\r\n\t\t\t\tstyle = {\r\n\t\t\t\t\tborderLeft: \"5px solid red\",\r\n\t\t\t\t\tborderRight: \"5px solid red\"\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\telse if(index > Simulator.firstInvalidDay){\r\n\t\t\t\t// subsequent invalid days\r\n\t\t\t\tstyle = {\r\n\t\t\t\t\tborderLeft: \"1px solid red\",\r\n\t\t\t\t\tborderRight: \"1px solid red\"\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t}\t\t\r\n\r\n\t\treturn style;\r\n\t}\r\n\r\n\t// renders table rows up to the current simulation day\r\n\trenderRows(){\r\n\t\tlet data = Simulator.data;\r\n\r\n\t\tif(data){\r\n\t\t\tlet rows = new Array(data.length + 1);\r\n\r\n\t\t\tdata.forEach((dayData, index) => {\r\n\t\t\t\t// extract data\r\n\t\t\t\tlet susceptible = \tMath.round(dayData.Susceptible),\r\n\t\t\t\t\tinfected = \t\tMath.round(dayData.Infected),\r\n\t\t\t\t\timmune = \t\tMath.round(dayData.Immune),\r\n\t\t\t\t\tdead = \t\t\tMath.round(dayData.Dead),\r\n\t\t\t\t\tpopulation = \tMath.round(dayData.TotalPopulation);\r\n\r\n\t\t\t\t// get the style (for data correction)\r\n\t\t\t\tlet style = this.getStyleForDay(index);\r\n\r\n\t\t\t\t// create table row\r\n\t\t\t\t// (toLocalString adds the ',' as the number grows in thousands)\r\n\t\t\t\trows[index] = (\r\n\t\t\t\t\t<tr key={index} style={style}>\r\n\t\t\t\t\t\t<td>{index}</td>\r\n\t\t\t\t\t\t<td>{susceptible.toLocaleString()}</td>\r\n\t\t\t\t\t\t<td>{infected.toLocaleString()}</td>\r\n\t\t\t\t\t\t<td>{immune.toLocaleString()}</td>\r\n\t\t\t\t\t\t<td>{dead.toLocaleString()}</td>\r\n\t\t\t\t\t\t<td>{population.toLocaleString()}</td>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t);\r\n\t\t\t});\r\n\r\n\t\t\treturn rows;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n\r\n\trender(){\r\n\t\treturn this.state.visible ? (\r\n\t\t\t<div>\r\n\t\t\t\t<table className=\"table table-striped overflow-table\">\r\n\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t<th>Day</th>\r\n\t\t\t\t\t\t\t<th>Susceptible</th>\r\n\t\t\t\t\t\t\t<th>Infected</th>\r\n\t\t\t\t\t\t\t<th>Immune</th>\r\n\t\t\t\t\t\t\t<th>Dead</th>\r\n\t\t\t\t\t\t\t<th>Total Population</th>\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t</thead>\r\n\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t{this.renderRows()}\r\n\t\t\t\t\t</tbody>\r\n\t\t\t\t</table>\r\n\t\t\t\t<div className=\"text-center\">\r\n\t\t\t\t\t{Simulator.firstInvalidDay > -1 ? `* Error correction begins on day ${Simulator.firstInvalidDay} *` : null}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t) : null;\r\n\t}\r\n}","import \"./GraphRange.css\"\r\nimport React from \"react\";\r\nimport GraphData from \"../GraphData\";\r\n\r\nexport class GraphRange extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.lowerRef = React.createRef();\r\n        this.upperRef = React.createRef();\r\n    }\r\n\r\n    onChangeLow(){\r\n        let lowValue = this.lowerRef.current.value,\r\n            low = parseInt(lowValue);\r\n\r\n        if(lowValue.length){\r\n            let high = this.selectedMax || this.props.max;\r\n\r\n            low = Math.max(this.props.min, low);\r\n            low = Math.min(low, high - 1);\r\n\r\n            this.lowerRef.current.value = low;\r\n\r\n            GraphData.startDay = low;\r\n        }\r\n    }\r\n\r\n    onChangeHigh(){\r\n        let highValue = this.upperRef.current.value,\r\n            high = parseInt(highValue);\r\n\r\n        if(highValue.length){\r\n            let low = this.selectedMin || this.props.min;\r\n\r\n            high = Math.max(low + 1, high);\r\n            high = Math.min(high, this.props.max);\r\n\r\n            this.upperRef.current.value = high;\r\n\r\n            GraphData.endDay = high;\r\n        }\r\n    }\r\n\r\n    onSubmit(evt){\r\n        evt.preventDefault();\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"graph-range-container\">\r\n                <form onSubmit={this.onSubmit.bind(this)}>\r\n                    <input\r\n                        ref={this.lowerRef}\r\n                        min={this.props.min}\r\n                        max={this.props.max}\r\n                        step={1}\r\n                        defaultValue={this.props.min}\r\n                        placeholder=\"Start\"\r\n                        type=\"number\"\r\n                        required\r\n                        onChange={this.onChangeLow.bind(this)}\r\n                    />&nbsp;\r\n                    <input\r\n                        ref={this.upperRef}\r\n                        min={this.props.min}\r\n                        max={this.props.max}\r\n                        step={1}\r\n                        defaultValue={this.props.max}\r\n                        placeholder=\"End\"\r\n                        type=\"number\"\r\n                        required\r\n                        onChange={this.onChangeHigh.bind(this)}\r\n                    />\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    get selectedMin(){\r\n        return parseFloat(this.lowerRef.current.value) || this.props.min;\r\n    }\r\n\r\n    get selectedMax(){\r\n        return parseFloat(this.upperRef.current.value) || this.props.max;\r\n    }\r\n}","import \"./TrendLine.css\";\r\nimport React from \"react\";\r\nimport GraphData from \"../GraphData\";\r\n\r\nexport class TrendLine extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.rangeRef = React.createRef();\r\n        this.numRef = React.createRef();\r\n    }\r\n\r\n    onSlide(){\r\n        let val = this.rangeRef.current.value;\r\n        GraphData.trendLineY = parseInt(val);\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"trend-line-container\">\r\n                <input\r\n                    className=\"trend-slider\"\r\n                    ref={this.rangeRef}\r\n                    type=\"range\"\r\n                    min={this.props.min || 0}\r\n                    max={this.props.max}\r\n                    step={100}\r\n                    defaultValue={this.props.defaultValue || 0}\r\n                    onChange={this.onSlide.bind(this)}\r\n                />\r\n                <div className=\"trend-line-text\">\r\n                    Trend Line\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    get value(){\r\n        return this.rangeRef.current.value;\r\n    }\r\n}","import React from \"react\";\r\nimport { LineChart } from \"react-easy-chart\"\r\nimport Simulator from \"../Simulator\";\r\nimport GraphData from \"../GraphData\";\r\nimport { GraphRange } from \"./GraphRange\";\r\nimport { TrendLine } from \"./TrendLine\";\r\n\r\n// graph size constants\r\nconst WIDTH = \t\t540,\r\n\tHEIGHT = \t\t475,\r\n\tMARGIN_TOP = \t10,\r\n\tMARGIN_BOTTOM =\t50,\r\n\tMARGIN_LEFT = \t80,\r\n\tMARGIN_RIGHT = \t10;\r\n\r\n// graph line colors\r\nconst COLORS = {\r\n\t\"Infected\": \t\"green\",\r\n\t\"Susceptible\": \t\"red\",\r\n\t\"Immune\": \t\t\"steelblue\",\r\n\t\"Dead\": \t\t\"gray\",\r\n\t\"TrendLine\":\t\"black\"\r\n};\r\n\r\nexport class Graph extends React.Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\r\n\t\tthis.graphContainerRef = React.createRef();\r\n\t\t\r\n\t    this.state = {\r\n\t\t\tvisible: false,\t\t\t\t\t\t// true/false if simulator data to render\r\n\t\t\ttooltip: null,\t\t\t\t\t\t// text to display\r\n\t\t\tcontainerWidth: WIDTH,\t\t\t\t// line graph parent width\r\n\t\t\tgraphLabels: {}\t\t\t\t\t\t// selected graph labels (Infected, Susceptible, etc)\r\n\t    };\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\t// auto select infected\r\n\t\tthis.toggleLabel(\"Infected\");\r\n\r\n\t\t// simulator singles data set loaded - render data\r\n\t\tSimulator.on(\"data\", () => this.setState({visible: true}));\r\n\r\n\t\t// simulator reset - nothing to render\r\n\t\tSimulator.on(\"reset\", () => this.setState({visible: false}));\r\n\r\n\t\t// graph update\r\n\t\tGraphData.on(\"update\", () => this.forceUpdate());\r\n\r\n\t\t// when the window size changes - resize the graph if neccessary\r\n\t\twindow.addEventListener(\"resize\", this.onResize.bind(this));\r\n\t\tthis.onResize();\r\n\t}\r\n\r\n\tcomponentDidUpdate(prevProps, prevState){\r\n\t\tif(prevState.yLabel !== this.state.yLabel){\r\n\t\t\tthis.setState({tooltip: null});\r\n\t\t}\r\n\t}\r\n\t\r\n\t// when a label ('Infected', 'Susceptible', etc) is clicked...\r\n\ttoggleLabel(label){\r\n\t\t// copy labels dictionary\r\n\t\tlet nextLabels = Object.assign({}, this.state.graphLabels);\r\n\r\n\t\t// toggle parameter label\r\n\t\tif(label in nextLabels){\r\n\t\t\tnextLabels[label] = !nextLabels[label];\r\n\t\t}\r\n\t\telse{\r\n\t\t\tnextLabels[label] = true;\r\n\t\t}\r\n\r\n\t\t// update state\r\n\t\tthis.setState({graphLabels: nextLabels});\r\n\t}\r\n\r\n\t// when a point on the graph is clicked...\r\n\tonGraphClick(data, evt){\r\n\t\tlet {x, y} = data;\r\n\t\tthis.setState({tooltip: `${Math.round(y)} people on day ${x}.`});\r\n\t}\r\n\r\n    onResize(){\r\n        // updates the state to reflect the maximum size allowed for the graph\r\n        let element = this.graphContainerRef.current;\r\n\t\tif(element){\r\n\t\t\tthis.setState({containerWidth: element.getBoundingClientRect().width});\r\n\t\t}\r\n    }\r\n\r\n\t// renders a simple HTML key for the graph line/colors\r\n\trenderLabelButtons(){\r\n\t\tlet labels = this.state.graphLabels;\r\n\r\n\t\t// border style for button (null = no change)\r\n\t\tlet borders = [\r\n\t\t\t(labels.Infected === true) ? `2px solid ${COLORS.Infected}` : null,\r\n\t\t\t(labels.Susceptible === true) ? `2px solid ${COLORS.Susceptible}` : null,\r\n\t\t\t(labels.Immune === true) ? `2px solid ${COLORS.Immune}` : null,\r\n\t\t\t(labels.Dead === true) ? `2px solid ${COLORS.Dead}` : null\r\n\t\t];\r\n\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<button style={{color: COLORS[\"Infected\"], borderBottom: borders[0]}} onClick={() => this.toggleLabel(\"Infected\")} className=\"pointer graph-button\">Infected</button>\r\n\t\t\t\t<button style={{color: COLORS[\"Susceptible\"], borderBottom: borders[1]}} onClick={() => this.toggleLabel(\"Susceptible\")} className=\"pointer graph-button\">Susceptible</button>\r\n\t\t\t\t<button style={{color: COLORS[\"Immune\"], borderBottom: borders[2]}} onClick={() => this.toggleLabel(\"Immune\") }className=\"pointer graph-button\">Immune</button>\r\n\t\t\t\t<button style={{color: COLORS[\"Dead\"], borderBottom: borders[3]}} onClick={() => this.toggleLabel(\"Dead\")} className=\"pointer graph-button\">Dead</button>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\r\n\t// exports the current svg graph to a jpg file \r\n\tdownloadJPG(){\r\n\t\tlet container = this.graphContainerRef.current;\r\n\t\tif(container){\r\n\t\t\t// get svg element\r\n\t\t\tlet svgElement = container.querySelector(\"svg\");\r\n\r\n\t\t\t// create canvas\r\n\t\t\tlet canvas = document.createElement(\"canvas\");\r\n\t\t\tlet ctx = canvas.getContext(\"2d\");\r\n\r\n\t\t\t// resize canvas to svg\r\n\t\t\tcanvas.width = svgElement.getAttribute(\"width\");\r\n\t\t\tcanvas.height = svgElement.getAttribute(\"height\");\r\n\r\n\t\t\t// convert svg element to xml \r\n\t\t\tlet svgXml = new XMLSerializer().serializeToString(svgElement);\r\n\r\n\t\t\t// create a data url from the svg+xml\r\n\t\t\tlet blob = new Blob([svgXml], {type: \"image/svg+xml\"});\r\n\t\t\tlet svgUrl = window.URL.createObjectURL(blob);\r\n\r\n\t\t\t// create an image to hold the svg data url \r\n\t\t\tlet svgImage = document.createElement(\"img\");\r\n\r\n\t\t\t// when the svgxml image loads...\r\n\t\t\tsvgImage.onload = () => {\r\n\t\t\t\t// draw svg+xml onto canvas\r\n\t\t\t\tctx.imageSmoothingEnabled = true;\r\n\t\t\t\tctx.imageSmoothingQuality = \"high\";\r\n\t\t\t\tctx.drawImage(svgImage, 0, 0);\r\n\r\n\t\t\t\t// remove black background for white \r\n\t\t\t\tctx.globalCompositeOperation = \"destination-over\";\r\n\t\t\t\tctx.fillStyle = \"white\";\r\n\t\t\t\tctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n\t\t\t\t// get jpg data\r\n\t\t\t\tlet jpg = document.createElement(\"img\");\r\n\t\t\t\tjpg.onload = () => {\r\n\t\t\t\t\t// jpg is rasterized svg\r\n\t\t\t\t\t// (implement download here)\r\n\t\t\t\t\t//document.body.appendChild(jpg);\r\n\t\t\t\t\twindow.URL.revokeObjectURL(svgUrl);\r\n\t\t\t\t}\r\n\t\t\t\tjpg.setAttribute(\"src\", canvas.toDataURL(\"image/jpeg\"));\r\n\t\t\t};\r\n\r\n\t\t\t// load the svgxml data\r\n\t\t\tsvgImage.setAttribute(\"src\", svgUrl);\r\n\t\t}\r\n\t}\r\n\r\n\trender(){\r\n\t\tif(this.state.visible){\r\n\t\t\tlet data = GraphData.getData(this.state.graphLabels);\r\n\t\t\tlet dayCount = data.values.length ? data.values[0].length : 0;\r\n\t\t\tlet width = Math.min(this.state.containerWidth, WIDTH);\r\n\r\n\t\t\treturn (\r\n\t\t\t\t<div className=\"graph-container\">\r\n\t\t\t\t\t<h5>{data.labels.length === 4 ? \"All\" : data.labels.join(\" + \") || \"(Nothing Selected)\"}</h5>\r\n\t\t\t\t\t{this.renderLabelButtons()}\r\n\t\t\t\t\t<div ref={this.graphContainerRef}>\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<LineChart\r\n\t\t\t\t\t\t\t\tdata={data.values}\r\n\t\t\t\t\t\t\t\twidth={width}\r\n\t\t\t\t\t\t\t\theight={HEIGHT}\r\n\t\t\t\t\t\t\t\tmargin={{\r\n\t\t\t\t\t\t\t\t\ttop: MARGIN_TOP, bottom: MARGIN_BOTTOM,\r\n\t\t\t\t\t\t\t\t\tleft: MARGIN_LEFT, right: MARGIN_RIGHT\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\taxes\r\n\t\t\t\t\t\t\t\taxisLabels={{x: \"Days Elapsed\", y: \"People\"}}\r\n\t\t\t\t\t\t\t\tdataPoints={dayCount < 0} // enable this later\r\n\t\t\t\t\t\t\t\txDomainRange={[GraphData.startDay, GraphData.endDay]}\r\n\t\t\t\t\t\t\t\tyDomainRange={[0, data.largestY]}\r\n\t\t\t\t\t\t\t\tlineColors={data.labels.map(label => COLORS[label])}\r\n\t\t\t\t\t\t\t\tclickHandler={this.onGraphClick.bind(this)}\r\n\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\t\".label\": {fill: \"black\"},\r\n\t\t\t\t\t\t\t\t\t\".axis\": {fontSize: \"0.75em\", fontFamily: \"arial\"}\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t<TrendLine max={data.largestY}/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<GraphRange\r\n\t\t\t\t\t\t\tmin={0}\r\n\t\t\t\t\t\t\tmax={Simulator.data.length - 1 || 0}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"text-center\">\r\n\t\t\t\t\t\t{this.state.tooltip}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t\treturn <div ref={this.graphContainerRef}></div> // required for resize to work! \r\n\t}\r\n} ","import \"../lib/bootstrap.min.css\";\r\nimport \"./App.css\";\r\nimport \"./Print.css\";\r\nimport React from \"react\";\r\nimport { Container, Row, Col, Card, CardBody } from \"reactstrap\";\r\nimport { Inputs } from \"./Inputs\";\r\nimport { Navbar } from \"./Navbar\";\r\nimport { Table } from \"./Table\";\r\nimport { Graph } from \"./Graph\";\r\nimport { library } from '@fortawesome/fontawesome-svg-core';\r\nimport { fab } from '@fortawesome/free-brands-svg-icons';\r\nimport { faAngleDoubleLeft, faAngleDoubleRight, faSkull, faBalanceScale } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nlibrary.add(fab, faAngleDoubleLeft, faAngleDoubleRight, faSkull, faBalanceScale);\r\nlet d = new Date();\r\n\r\nexport class App extends React.Component{\r\n    render(){\r\n        return (\r\n            <div>\r\n                <Navbar/>\r\n                <br/>\r\n                <main>\r\n                    <Container>\r\n                        <Card color=\"light\">\r\n                            <CardBody>\r\n                                <Row className=\"text-center input-graph-container\">\r\n                                    <div className=\"print-title-containter d-none d-print-block\">\r\n                                        <h1>The Plague Project</h1>\r\n                                        <FontAwesomeIcon className=\"skull-icon\" icon=\"skull\" size=\"lg\"></FontAwesomeIcon>\r\n                                        <h2>Disease Simulator</h2>                                        \r\n                                    </div>\r\n                                    <Col lg={6}>\r\n                                        <Inputs/>\r\n                                    </Col>\r\n                                    <Col lg={6}>\r\n                                        <Graph/>\r\n                                    </Col>\r\n                                </Row>\r\n                                <br/>\r\n                                <div>\r\n                                    <Table/>\r\n                                </div>\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Container>\r\n                </main>\r\n                <footer>\r\n                    <Container className=\"text-center\">\r\n                        <hr/>\r\n                        <Row>\r\n                            <Col lg={6}>\r\n                                Juall\r\n                                &nbsp;\r\n                                <a href=\"https://github.com/rjuall\">\r\n                                    <FontAwesomeIcon icon={['fab', 'github-square']}></FontAwesomeIcon>\r\n                                </a>\r\n                                &nbsp;\r\n                                <a href=\"https://www.linkedin.com/in/rjuall/\">\r\n                                    <FontAwesomeIcon icon={['fab', 'linkedin']}></FontAwesomeIcon>\r\n                                </a>\r\n                                &nbsp;|&nbsp; \r\n                                Rosenblum\r\n                                &nbsp;\r\n                                <a href=\"https://github.com/davidrosenblum\">\r\n                                    <FontAwesomeIcon icon={['fab', 'github-square']}></FontAwesomeIcon>\r\n                                </a>\r\n                                &nbsp;|&nbsp;\r\n                                Pojero\r\n                                &nbsp;\r\n                                <a href=\"https://github.com/jpojero\">\r\n                                    <FontAwesomeIcon icon={['fab', 'github-square']}></FontAwesomeIcon>\r\n                                </a>\r\n                                &nbsp;\r\n                                <a href=\"https://www.linkedin.com/in/joseph-t-pojero-6795b717a/\">\r\n                                    <FontAwesomeIcon icon={['fab', 'linkedin']}></FontAwesomeIcon>\r\n                                </a>\r\n                                &nbsp;|&nbsp;\r\n                                Erry\r\n                                &nbsp;\r\n                                <a href=\"https://github.com/KaranErry\">\r\n                                    <FontAwesomeIcon icon={['fab', 'github-square']}></FontAwesomeIcon>\r\n                                </a>\r\n                                &nbsp;\r\n                                <a href=\"https://linkedin.com/in/karanerry\">\r\n                                    <FontAwesomeIcon icon={['fab', 'linkedin']}></FontAwesomeIcon>\r\n                                </a>\r\n                            </Col>\r\n                            <Col lg={6}>                                \r\n                                <a href=\"https://github.com/davidrosenblum/Plague-Project/blob/master/LICENSE\" target=\"_blank\">\r\n                                    <FontAwesomeIcon icon=\"balance-scale\" size=\"sm\"></FontAwesomeIcon>\r\n                                    &nbsp;\r\n                                    MIT License\r\n                                    &copy;\r\n                                    { d.getFullYear() }\r\n                                </a>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </footer>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { App } from \"./components/App\";\r\n\r\nReactDOM.render(<App/>, document.querySelector(\"#root\"));"],"sourceRoot":""}