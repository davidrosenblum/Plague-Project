{"version":3,"sources":["Ajax.js","EventEmitter.js","SimulationUpdateEvent.js","Simulator.js","ParamStorage.js","components/NumSlider.jsx","preset.js","components/Inputs.jsx","components/MailModal.jsx","components/Navbar.jsx","components/Chart.jsx","components/Graph.jsx","components/App.jsx","index.js"],"names":["Ajax","Object","classCallCheck","this","createClass","key","value","options","arguments","length","undefined","Promise","resolve","reject","method","url","window","location","origin","headers","query","data","xhr","XMLHttpRequest","h","onload","onerror","err","queryString","open","setRequestHeader","send","JSON","stringify","request","dict","qs","param","concat","substring","EventEmitter","_listeners","event","willTrigger","type","forEach","listener","eventType","push","listeners","i","splice","SimulationUpdateEvent","day","_type","_day","get","src_Simulator","_EventEmitter","Simulator","_this","possibleConstructorReturn","getPrototypeOf","call","_currentDay","_firstInvalidDay","_useErrCorrecting","inherits","_this2","href","includes","Access-Control-Allow-Origin","Error-Correction","isErrCorrecting","then","status","parse","response","parseInt","getResponseHeader","emit","Event","Error","catch","_this3","Content-Type","csvDataBlob","Blob","a","document","createElement","URL","createObjectURL","setAttribute","click","revokeObjectURL","message","currentDay","set","maxDays","hasData","Math","min","src_ParamStorage","ParamStorage","_numParamSets","_lastParamSet","_currDay","sessionStorage","clear","params","infectionLength","infection_length","transmissionRate","transmission_rate","virulence","initialPopulation","initial_population","immunePercent","immune_percent","initialInfected","initial_infected","simulationLength","simulation_length","preset","paramsNotLastSave","setItem","numParamSets","removeItem","saveParamsInputsDict","newParams","paramId","json","getItem","firstStoredDay","getSavedParams","NumSlider","_React$Component","props","numRef","React","createRef","rangeRef","current","init","evt","val","parseFloat","target","max","react_default","className","label","showRange","minText","maxText","ref","onChange","onNumber","bind","step","placeholder","required","disabled","onSlide","n","Component","presets","Seasonal Flu","Infection Length","Transmission","Virulence","Smallpox","Polio","Measles","Ebola","H1N1 Flu","H5N1 Flu","1918 Flu","Inputs","intialImmunityRef","transmissionRef","virulenceRef","initialInfectedRef","intialPopRef","infectionLengthRef","daysRef","presetRef","state","pending","lastBtn","isDisabled","on","onSimulatorLoad","onSimulatorError","URLSearchParams","search","getInputsDictionary","setState","reset","nextDay","load","autoRun","_this4","downloadCSVFile","preventDefault","dayByDay","downloadCSV","getAttribute","direction","stepBackwards","stepForwards","currentParams","onPresetChange","_this5","id","onClick","switchParamSet","onSubmit","NumSlider_NumSlider","onFormClick","btn","onReset","MailModal","textRef","errorRef","headerRef","typeError","errorTime","errorMsg","other","errMessage","successMessage","prevProps","showModal","e","goodHeader","BuildArray","post","text","lib_default","isOpen","closeModal","submitClick","onTypeSelect","name","TypeOther","rows","cols","Navbar","showNav","showAdvanced","prev","reactstrap_es","color","expand","toggleNavbar","navbar","openModal","toggle","toggleDropdown","caret","toggleErrorCorrection","MailModal_MailModal","Chart","onSimulatorData","onSimulatorReset","onSimulatorUpdate","Array","_loop","susceptible","round","Susceptible","infected","Infected","immune","Immune","dead","Dead","population","TotalPopulation","style","tooltip","firstInvalidDay","borderLeft","borderRight","title","setGraphDay","toLocaleString","renderRows","Graph","yLabel","onSimulatorUpdateGraph","prevState","values","valuesObj","row","pt","x","y","labels","largestY","getDataForAllLabels","toLowerCase","COLORS","getData","numDays","onYLabelChange","react_easy_chart_lib","width","height","margin","top","bottom","left","right","axes","axisLabels","interpolate","dataPoints","xDomainRange","yDomainRange","lineColors","map","clickHandler","onGraphClick",".label","fill",".axis","fontSize","fontFamily","App","apply","Navbar_Navbar","Inputs_Inputs","Graph_Graph","Chart_Chart","ReactDOM","render","App_App","querySelector"],"mappings":"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","file":"static/js/main.bc1443d7.chunk.js","sourcesContent":["export class Ajax{\r\n    // sends an async http request \r\n    static request(options={}){\r\n        return new Promise((resolve, reject) => {\r\n            // extract config from options object\r\n            let method = (typeof options.method === \"string\") ? options.method : \"GET\",\r\n                url = (typeof options.url === \"string\") ? options.url : window.location.origin,\r\n                headers = (typeof options.headers === \"object\" && options.headers) ? options.headers : {},\r\n                query = (typeof options.query === \"object\" && options.query) ? options.query : {},\r\n                data = (typeof options.data !== \"undefined\") ? options.data : null;\r\n\r\n            // create the request\r\n            let xhr = new XMLHttpRequest();\r\n\r\n            // attach listeners\r\n            xhr.onload = () => resolve(xhr);\r\n            xhr.onerror = err => reject(err);\r\n\r\n            // apply query string\r\n            if(query){\r\n                url += Ajax.queryString(query);\r\n            }\r\n\r\n            // open the request\r\n            xhr.open(method, url);\r\n\r\n            // apply http headers\r\n            for(let h in headers){\r\n                xhr.setRequestHeader(h, headers[h]);\r\n            }\r\n\r\n            // send the request\r\n            // send JSON if the data is not a string\r\n            if(data){\r\n                if(typeof data !== \"string\"){\r\n                    xhr.send(JSON.stringify(data));\r\n                }\r\n                else xhr.send(data);\r\n            }\r\n            else xhr.send();\r\n        });\r\n    }\r\n\r\n    // async http get request\r\n    static get(url, headers, query){\r\n        return Ajax.request({method: \"GET\", url, headers, query});\r\n    }\r\n\r\n    // async http post request\r\n    static post(url, headers, data){\r\n        return Ajax.request({method: \"POST\", url, headers, data});\r\n    }\r\n\r\n    // creates a query string from an object\r\n    static queryString(dict){\r\n        let qs = \"?\";\r\n\r\n        for(let param in dict){\r\n            qs += `${param}=${dict[param]}&`;\r\n        }\r\n\r\n        return qs.substring(0, qs.length - 1);\r\n    }\r\n}","// simple event emitter class\r\nexport class EventEmitter{\r\n    constructor(){\r\n        this._listeners = {};   // 'private' dictionary of {eventType: listenerFunction}\r\n    }\r\n\r\n    // triggers all listening functions\r\n    emit(event){\r\n        if(this.willTrigger(event.type)){\r\n            this._listeners[event.type].forEach(listener => listener(event));\r\n        }\r\n    }\r\n\r\n    // adds a listener\r\n    on(eventType, listener){\r\n        if(this.willTrigger(eventType)){\r\n            this._listeners[eventType].push(listener);\r\n        }\r\n        else{\r\n            this._listeners[eventType] = [listener];\r\n        }\r\n    }\r\n\r\n    // removes a listener\r\n    off(eventType, listener){\r\n        if(this.willTrigger(eventType)){\r\n            let listeners = this._listeners[eventType];\r\n\r\n            for(let i = 0; i < listeners.length; i++){\r\n                if(listeners[i] === listener){\r\n                    listeners.splice(i, 1);\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // checks if there are any listeners for a given type\r\n    willTrigger(eventType){\r\n        return eventType in this._listeners;\r\n    }\r\n}","// simple event object for simulation updates \r\nexport class SimulationUpdateEvent{\r\n    constructor(type, day=null){\r\n        this._type = type;\r\n        this._day = day;\r\n    }\r\n\r\n    get type(){\r\n        return this._type;\r\n    }\r\n\r\n    get day(){\r\n        return this._day;\r\n    }\r\n}","import { Ajax } from \"./Ajax\";\r\nimport { EventEmitter } from \"./EventEmitter\";\r\nimport { SimulationUpdateEvent } from \"./SimulationUpdateEvent\";\r\n\r\n// singleton for holding simulation data\r\n// event-driven to keep chart + graph updated\r\nlet Simulator = class Simulator extends EventEmitter{\r\n    constructor(){\r\n        super();\r\n\r\n        this.data = null;                   // simulation data array\r\n        this._currentDay = 0;               // 'private' current simulation day\r\n        this._firstInvalidDay = -1;         // first invalid day (-1 = no invalid days)\r\n        this._useErrCorrecting = true;      // use error correction?\r\n    }\r\n\r\n    // hits the API for data, signals progress\r\n    // query should be a dictionary of the inputs, will be converted into a query string\r\n    load(query){\r\n        return new Promise((resolve, reject) => {\r\n            // figure out endpoint\r\n            let url = window.location.href.includes(\"localhost\") ? \"http://localhost:8080/plague\" : `${window.location.origin}/plague`;\r\n            \r\n            // CORS headers (use foreign domain)\r\n            let headers = {\r\n                \"Access-Control-Allow-Origin\": window.location.origin,\r\n                \"Error-Correction\": this.isErrCorrecting\r\n            };\r\n\r\n            // ajax call with query string\r\n            // (null headers)\r\n            Ajax.get(url, headers, query)\r\n                .then(xhr => {    \r\n                    // ajax resolved (could be bad/good request, but server responded)\r\n                    if(xhr.status === 200){\r\n                        // good request - attempt to parse results json\r\n                        try{\r\n                            // parse json\r\n                            this.data = JSON.parse(xhr.response);\r\n\r\n                            // extract first invalid day\r\n                            this._firstInvalidDay = parseInt(xhr.getResponseHeader(\"First-Invalid-Day\")) || -1;\r\n                        }\r\n                        catch(err){\r\n                            // json parse error (should never happen)\r\n                            reject(err);\r\n                            this.emit(new Event(\"error\"));  // server responded with bad request signal\r\n                        }\r\n\r\n                        // done, resolve promise and emit load + data\r\n                        resolve();\r\n                        this.emit(new Event(\"load\"));   // server responded with good request signal\r\n\r\n                        this.emit(new Event(\"data\"));   // parsed data signal\r\n                    }\r\n                    else{\r\n                        // bad request\r\n                        reject(new Error(xhr.response || \"Bad request\"));\r\n                        this.emit(new Event(\"error\"));  // server responded with bad request signal\r\n                    }\r\n                })\r\n                .catch(err => {\r\n                    // ajax request died (really bad NOT a 400 error!)\r\n                    reject(err);\r\n                    this.emit(new Event(\"error\"));  // request died signal\r\n                });\r\n        });\r\n    }\r\n\r\n    // asychronously downloads a csv file using ajax\r\n    downloadCSVFile(query){\r\n        return new Promise((resolve, reject) => {\r\n            // figure out endpoint origin\r\n            let origin = window.location.origin.includes(\"localhost\") ? \"http://localhost:8080\" : window.location.origin;\r\n\r\n            // figure out endpoint using origin\r\n            let url = `${origin}/plague`;\r\n\r\n            // http request headers\r\n            let headers = {\r\n                \"Access-Control-Allow-Origin\": window.location.origin,\r\n                \"Content-Type\": \"text/csv\",\r\n                \"Error-Correction\": this.isErrCorrecting\r\n            };\r\n\r\n            // get csv file via Ajax\r\n            Ajax.get(url, headers, query)\r\n                .then(xhr => {\r\n                    // server responded\r\n                    if(xhr.status === 200){\r\n                        // good http status - download\r\n                        // xhr.response = csv text\r\n                        // convert to blob\r\n                        let csvDataBlob = new Blob([xhr.response], {type: \"octet/stream\"});\r\n\r\n                        // create a 'secret' link using the blob\r\n                        let a = document.createElement(\"a\");\r\n                        let url = window.URL.createObjectURL(csvDataBlob);\r\n\r\n                        // setup the link to download blob data\r\n                        a.setAttribute(\"download\", \"data.csv\");\r\n                        a.setAttribute(\"href\", url);\r\n\r\n                        // click the link to download the file\r\n                        a.click();\r\n                        window.URL.revokeObjectURL(url);\r\n\r\n                        // trigger any listeners\r\n                        resolve(\"File downloaded.\");\r\n                    }\r\n                    else{\r\n                        // bad http status - trigger listeners with error\r\n                        reject(new Error(xhr.response || \"Error downloading CSV file.\"));\r\n                    }\r\n                })\r\n                .catch(err => {\r\n                    // server did not responed - trigger listeners with error\r\n                    reject(new Error(err.message || \"Unable to download CSV file.\"))\r\n                });\r\n        });\r\n    }\r\n\r\n    // simulation moves to the last day\r\n    // (triggers listeners)\r\n    autoRun(){\r\n        this.currentDay = this.data.length - 1; // auto emits update\r\n    }\r\n\r\n    // steps the simulation forward one day\r\n    // (triggers listeners)\r\n    nextDay(){\r\n        if(this.currentDay < this.data.length){\r\n            this.currentDay++;  // auto emits update\r\n        }\r\n    }\r\n\r\n    // resets simulation to day 0 and clears all stored data\r\n    // (triggers listeners)\r\n    reset(){\r\n        this.data = null;\r\n        this.currentDay = 0;\r\n        this.emit(new Event(\"reset\"));\r\n    }\r\n\r\n    // updates the graph day \r\n    setGraphDay(day){\r\n        this.emit(new SimulationUpdateEvent(\"update-graph\", day));\r\n    }\r\n\r\n    // always emit update\r\n    set currentDay(day){\r\n        let maxDays = this.hasData ? (this.data.length - 1) : 0;\r\n        this._currentDay = Math.min(day, maxDays); \r\n        this.emit(new SimulationUpdateEvent(\"update\", this.currentDay));\r\n    }\r\n\r\n    set isErrCorrecting(value){\r\n        if(typeof value === \"boolean\"){\r\n            this._useErrCorrecting = value;\r\n        }\r\n        else throw new Error(\"isErrCorrecting must be set to a boolean value.\");\r\n    }\r\n\r\n    get hasData(){\r\n        return this.data !== null;\r\n    }\r\n\r\n    get currentDay(){\r\n        return this._currentDay;\r\n    }\r\n\r\n    get firstInvalidDay(){\r\n        return this._firstInvalidDay;\r\n    }\r\n\r\n    get isErrCorrecting(){\r\n        return this._useErrCorrecting;\r\n    }\r\n}\r\n\r\n// singleton\r\nexport default new Simulator();","// class for managing parameter data history using session storage\r\nconst PARAM_STORAGE_LIMIT = 100;\r\n\r\nclass ParamStorage{\r\n    constructor(){\r\n        this._numParamSets = 0;\r\n        this._lastParamSet = null;\r\n        this._currDay = 0;\r\n\r\n        window.sessionStorage.clear();\r\n    }\r\n    \r\n    // saves parameters to session storage - expects query string format (as provided by inputs.jsx)\r\n    saveParamsInputsDict(dict){\r\n        let params = {\r\n            infectionLength:    dict.infection_length,\r\n            transmissionRate:   dict.transmission_rate,\r\n            virulence:          dict.virulence,\r\n            initialPopulation:  dict.initial_population,\r\n            immunePercent:      dict.immune_percent,\r\n            initialInfected:    dict.initial_infected,\r\n            simulationLength:   dict.simulation_length,\r\n            preset:             dict.preset\r\n        };\r\n\r\n        // prevent saving multiple set same time in a row\r\n        if(this.paramsNotLastSave(params)){\r\n            window.sessionStorage.setItem(++this._numParamSets, JSON.stringify(params))\r\n            this._currDay = this.numParamSets;\r\n\r\n            // enforce storage capacity - begin deleting from the left bound\r\n            if(this.numParamSets > PARAM_STORAGE_LIMIT){\r\n                window.sessionStorage.removeItem(this.numParamSets - PARAM_STORAGE_LIMIT);\r\n            }\r\n\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // saves parameters to session storage\r\n    saveParams(infectionLength, transmissionRate, virulence, initialPopulation, immunePercent, initialInfected, simulationLength, preset){\r\n        return this.saveParamsInputsDict({\r\n            infection_length:   infectionLength,\r\n            transmission_rate:  transmissionRate,\r\n            virulence,\r\n            initial_population: initialPopulation,\r\n            immune_percent:     immunePercent,\r\n            initial_infected:   initialInfected,\r\n            simulation_length:  simulationLength,\r\n            preset\r\n        });\r\n    }\r\n\r\n    // checks if 'newParams' is content different from the last save param set\r\n    paramsNotLastSave(newParams){\r\n        if(!this._lastParamSet) return true;\r\n\r\n        for(let param in this._lastParamSet){\r\n            if(this._lastParamSet[param] !== newParams[param]){\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // gets saved parameters\r\n    getSavedParams(paramId){\r\n        let json = window.sessionStorage.getItem(paramId) || null;\r\n        return json ? JSON.parse(json) : null;\r\n    }\r\n\r\n    // moves current day one into the backwards\r\n    stepBackwards(){\r\n        if(this._currDay - 1 >= this.firstStoredDay){\r\n            this._lastParamSet = this.getSavedParams(--this._currDay);\r\n        }\r\n    }\r\n\r\n    // move sthe current day one day forwards\r\n    stepForwards(){\r\n        if(this._currDay + 1 <= this.numParamSets){\r\n            this._lastParamSet = this.getSavedParams(++this._currDay);\r\n        }\r\n    }\r\n\r\n    get firstStoredDay(){\r\n        if(this.numParamSets > PARAM_STORAGE_LIMIT){\r\n            return this.numParamSets - PARAM_STORAGE_LIMIT;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    get currentParams(){\r\n        return this.getSavedParams(this._currDay);\r\n    }\r\n\r\n    get currentDay(){\r\n        return this._currDay;\r\n    }\r\n\r\n    get numParamSets(){\r\n        return this._numParamSets;\r\n    }\r\n}\r\n\r\nexport default new ParamStorage();","import \"./NumSlider.css\";\r\nimport React from \"react\";\r\n\r\nexport class NumSlider extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.numRef = React.createRef();\r\n        this.rangeRef = React.createRef();\r\n    }\r\n\r\n    // mounted - set the default numbers\r\n    componentDidMount(){\r\n        this.numRef.current.value = this.props.init || this.props.min;\r\n        this.rangeRef.current.value = this.props.init || this.props.min;\r\n    }\r\n\r\n    // on text field input\r\n    onNumber(evt){\r\n        // set the range value to the number value\r\n        let val = parseFloat(evt.target.value);\r\n    \r\n        if(val){\r\n            // enforce min/max constraints\r\n            val = Math.min(Math.max(val, this.props.min), this.props.max); \r\n\r\n            // update inputs\r\n            this.numRef.current.value = val;\r\n            this.rangeRef.current.value = val;\r\n        }\r\n        else{\r\n            // empty input - range at min and number will be empty\r\n            this.rangeRef.current.value = this.props.min;\r\n        }\r\n    }\r\n\r\n    // on range bar move\r\n    onSlide(evt){\r\n        // set the text value to the number value\r\n        let val = evt.target.value;\r\n\r\n        // enforce min/max constraints \r\n        val = Math.min(Math.max(val, this.props.min), this.props.max);\r\n\r\n        // update number input\r\n        this.numRef.current.value = val;\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"num-slider-container\">\r\n                <div>\r\n                    <label>{this.props.label}</label>\r\n                    {this.props.showRange ? (` ${this.minText}-${this.maxText}`) : null}\r\n                </div>\r\n                <div>\r\n                    <input \r\n                        ref={this.numRef}\r\n                        onChange={this.onNumber.bind(this)}\r\n                        type=\"number\"\r\n                        min={this.props.min}\r\n                        max={this.props.max}\r\n                        step={this.props.step}\r\n                        placeholder={this.props.placeholder}\r\n                        required={this.props.required}\r\n                        disabled={this.props.disabled}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <input\r\n                        ref={this.rangeRef}\r\n                        onChange={this.onSlide.bind(this)}\r\n                        type=\"range\"\r\n                        min={this.props.min}\r\n                        max={this.props.max}\r\n                        step={this.props.step}\r\n                        disabled={this.props.disabled}\r\n                        className=\"num-slider-slider\"\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    set value(n){\r\n        this.numRef.current.value = n;\r\n        this.rangeRef.current.value = n;\r\n    }\r\n\r\n    get minText(){\r\n        return this.props.minText ? this.props.minText : this.props.min;\r\n    }\r\n\r\n    get maxText(){\r\n        return this.props.maxText ? this.props.maxText : this.props.max;\r\n    }\r\n\r\n    get value(){\r\n        return this.numRef.current.value;\r\n    }\r\n}","export const presets ={\r\n    //presets in the inputs go here\r\n    //seasonal flu\r\n   \"Seasonal Flu\":{\r\n       \"Infection Length\": 8,\r\n       \"Transmission\": 1.2,\r\n       \"Virulence\": 0.01\r\n   },\r\n   //smallpox\r\n   \"Smallpox\":{\r\n    \"Infection Length\": 14,\r\n    \"Transmission\": 2.5,\r\n    \"Virulence\": 0.25 \r\n   },\r\n   //polio\r\n   \"Polio\":{\r\n    \"Infection Length\": 18,\r\n    \"Transmission\": 1,\r\n    \"Virulence\": 0.01 \r\n   },\r\n   //measles\r\n   \"Measles\":{\r\n    \"Infection Length\": 8,\r\n    \"Transmission\": 10,\r\n    \"Virulence\": 0.01 \r\n   },\r\n   //Ebola\r\n   \"Ebola\":{\r\n    \"Infection Length\": 13,\r\n    \"Transmission\": 1.5,\r\n    \"Virulence\": 0.75 \r\n   },\r\n    //H1N1 Flu\r\n    \"H1N1 Flu\":{\r\n    \"Infection Length\": 8,\r\n    \"Transmission\": 1.6,\r\n    \"Virulence\": 0.01 \r\n    },\r\n    //H5N1 Flu\r\n   \"H5N1 Flu\":{\r\n    \"Infection Length\": 8,\r\n    \"Transmission\": 0.1,\r\n    \"Virulence\": 0.6 \r\n   },\r\n    //1918 Flu\r\n    \"1918 Flu\":{\r\n    \"Infection Length\": 8,\r\n    \"Transmission\": 2,\r\n    \"Virulence\": 0.03 \r\n    }\r\n}\r\nexport default presets;\r\n","import React from \"react\";\r\nimport Simulator from \"../Simulator\";\r\nimport ParamStorage from \"../ParamStorage\";\r\nimport { NumSlider } from \"./NumSlider\";\r\nimport preset from \"../preset\"\r\n\r\nexport class Inputs extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        // input refs\r\n        this.intialImmunityRef = React.createRef();\r\n        this.transmissionRef = React.createRef();\r\n        this.virulenceRef = React.createRef();\r\n        this.initialInfectedRef = React.createRef();\r\n        this.intialPopRef = React.createRef();\r\n        this.infectionLengthRef = React.createRef();\r\n        this.daysRef = React.createRef();\r\n        this.presetRef = React.createRef();\r\n\r\n        this.state = {\r\n            pending: false,         // no new requests while pending (disable buttons)\r\n            message: null,          // message to display (errors)\r\n            lastBtn: null,\r\n            isDisabled: false       // to disable/enable fields depending on what preset is selected\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        Simulator.on(\"load\", this.onSimulatorLoad.bind(this));\r\n        Simulator.on(\"error\", this.onSimulatorError.bind(this));\r\n\r\n        // test values\r\n        if(new URLSearchParams(window.location.search).get(\"test\") === \"true\"){\r\n            this.initialInfectedRef.current.value = 500;\r\n            this.intialImmunityRef.current.value = 0.10;\r\n            this.intialPopRef.current.value = 1000000;\r\n            this.virulenceRef.current.value = 0.25;\r\n            this.daysRef.current.value = 365;\r\n            this.infectionLengthRef.current.value = 100;\r\n            this.transmissionRef.current.value = 0.2;\r\n\r\n            ParamStorage.saveParamsInputsDict(this.getInputsDictionary());\r\n        }\r\n    }\r\n\r\n    // creates a dictionary of all the inputs and their values (names formatted for the API call) \r\n    getInputsDictionary(){\r\n        // extract data from inputs to use in query string \r\n        let immune_percent =        this.intialImmunityRef.current.value,\r\n            transmission_rate =     this.transmissionRef.current.value,\r\n            virulence =             this.virulenceRef.current.value,\r\n            initial_infected =      this.initialInfectedRef.current.value,\r\n            initial_population =    this.intialPopRef.current.value,\r\n            infection_length =      this.infectionLengthRef.current.value,\r\n            simulation_length =     this.daysRef.current.value,\r\n            preset =                this.presetRef.current.value;\r\n\r\n        // make sure infected <= population\r\n        initial_infected = Math.min(initial_infected, initial_population);\r\n\r\n        // MUST match API expectations! \r\n        return {immune_percent, transmission_rate, virulence, initial_infected, initial_population, infection_length, simulation_length, preset};\r\n    }\r\n\r\n    onSimulatorError(){\r\n        this.setState({pending: false});    // enable buttons\r\n    }\r\n\r\n    onSimulatorLoad(){\r\n        this.setState({pending: false});    // enable buttons\r\n    }\r\n\r\n    // called when then the reset button is clicked\r\n    onReset(){\r\n        // cleared stored simulation data\r\n        Simulator.reset();\r\n    }\r\n\r\n    dayByDay(){\r\n        if(!Simulator.hasData){\r\n            // disable buttons for loading time\r\n            this.setState({pending: true});\r\n\r\n            // load data then show next day\r\n            Simulator.load(this.getInputsDictionary())\r\n                .then(() => {\r\n                    this.setState({message: null}); // remove possible err message\r\n                    Simulator.nextDay();\r\n\r\n                    ParamStorage.saveParamsInputsDict(this.getInputsDictionary());  // save parameters\r\n                })\r\n                .catch(err => this.setState({message: err.message}));\r\n        }\r\n        else{\r\n            Simulator.nextDay();\r\n        }\r\n    }\r\n\r\n    autoRun(){\r\n        if(!Simulator.hasData){\r\n            // disable buttons for loading time\r\n            this.setState({pending: true});\r\n\r\n            // load data then auto run\r\n            Simulator.load(this.getInputsDictionary())\r\n                .then(() => {\r\n                    this.setState({message: null}); // remove possible err message\r\n                    Simulator.autoRun();\r\n\r\n                    ParamStorage.saveParamsInputsDict(this.getInputsDictionary());  // save parameters\r\n                })\r\n                .catch(err => this.setState({message: err.message}));\r\n        }\r\n        else{\r\n            Simulator.autoRun();\r\n        }\r\n    }\r\n\r\n    // downloads the csv file\r\n    downloadCSV(){\r\n        if(!this.state.pending){\r\n            // disable buttons\r\n            this.setState({pending: true});\r\n\r\n            Simulator.downloadCSVFile(this.getInputsDictionary())\r\n                .catch(err => {\r\n                    // something went wrong (server did not respond or bad request)\r\n                    this.setState({message: err.message});\r\n                })\r\n                .then(() => {\r\n                    // (this fires when any response happens not successful only!)\r\n                    // always enable buttons\r\n                    this.setState({pending: false})\r\n                });\r\n        }\r\n    }\r\n\r\n    // called when the form is 'submitted'\r\n    // entire purpose is to block the sending of the form\r\n    // (submit enforces 'required', 'min', 'max' constraints)\r\n    onSubmit(evt){\r\n        // no default submission (using ajax instead)\r\n        evt.preventDefault();\r\n\r\n        // problem - both autorun + next day activate this... (only way to do it with using form requires)\r\n\r\n        // day-by-day was the trigger\r\n        if(this.state.lastBtn === \"day-by-day\"){\r\n            this.dayByDay();\r\n        }\r\n\r\n        // autorun was the trigger\r\n        else if(this.state.lastBtn === \"auto-run\"){\r\n            this.autoRun();\r\n        }\r\n\r\n        // csv export was the trigger\r\n        else if(this.state.lastBtn === \"export-csv\"){\r\n            this.downloadCSV();\r\n        }\r\n        \r\n    }\r\n\r\n    // sets the last button to 'day-by-day' or 'autorun'\r\n    // kinda ugly but its because form has 2 submit buttons\r\n    onFormClick(evt){\r\n        this.setState({lastBtn: evt.target.getAttribute(\"btn\")});\r\n    }\r\n\r\n    onPresetChange(){\r\n        let value = this.presetRef.current.value;\r\n        \r\n        if(value !== \"Custom\"){\r\n            this.setState({isDisabled: true});\r\n            this.infectionLengthRef.current.value = preset[value][\"Infection Length\"];\r\n            this.transmissionRef.current.value = preset[value][\"Transmission\"];\r\n            this.virulenceRef.current.value = preset[value][\"Virulence\"]\r\n        }else{\r\n            this.setState({isDisabled: false});\r\n        }\r\n    }\r\n\r\n    // moves the parameter storage day & updates UI inputs\r\n    switchParamSet(direction){\r\n        // move the day\r\n        if(direction === \"backwards\"){\r\n            ParamStorage.stepBackwards();\r\n        }\r\n        else if(direction === \"forwards\"){\r\n            ParamStorage.stepForwards();\r\n        }\r\n        else throw new Error(\"Parameter switch direction must be 'forwards' or 'backwards'.\");\r\n\r\n        // bail if nothing already saved\r\n        let params = ParamStorage.currentParams || null;\r\n        if(!params) return; // nothing saved\r\n\r\n        // fill out UI form\r\n        this.infectionLengthRef.current.value = params.infectionLength;\r\n        this.transmissionRef.current.value = params.transmissionRate;\r\n        this.virulenceRef.current.value = params.virulence;\r\n        this.intialPopRef.current.value = params.initialPopulation;\r\n        this.intialImmunityRef.current.value = params.immunePercent;\r\n        this.initialInfectedRef.current.value = params.initialInfected;\r\n        this.daysRef.current.value = params.simulationLength;\r\n\r\n        this.presetRef.current.value = params.preset;\r\n        this.onPresetChange();\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <div id=\"inputs-header-container\" className=\"text-center\">\r\n                    <button onClick={() => this.switchParamSet(\"backwards\")}>&larr;</button>\r\n                    <h5 className=\"text-center\">Experimental Variables</h5>\r\n                    <button onClick={() => this.switchParamSet(\"forwards\")}>&rarr;</button>\r\n                </div>\r\n                <br/>\r\n                <form onSubmit={this.onSubmit.bind(this)}>\r\n                    <div className=\"row\">\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <NumSlider\r\n                                label={\"Length of Infection (Days)\"}\r\n                                showRange={true}\r\n                                min={1}\r\n                                max={365}\r\n                                step={1}\r\n                                required={true}\r\n                                ref={this.infectionLengthRef}\r\n                                disabled={this.state.isDisabled}\r\n                            />\r\n                        </div>\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <NumSlider\r\n                                label={\"Transmission Rate\"}\r\n                                showRange={true}\r\n                                min={0}\r\n                                max={20}\r\n                                step={0.01}\r\n                                required={true}\r\n                                ref={this.transmissionRef}\r\n                                disabled={this.state.isDisabled}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <NumSlider\r\n                                label={\"Virulence\"}\r\n                                showRange={true}\r\n                                min={0}\r\n                                max={1}\r\n                                step={0.001}\r\n                                required={true}\r\n                                ref={this.virulenceRef}\r\n                                disabled={this.state.isDisabled}\r\n                            />\r\n                        </div>\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <NumSlider\r\n                                label={\"Initial Population\"}\r\n                                showRange={true}\r\n                                min={1}\r\n                                max={1000000}\r\n                                step={1}\r\n                                required={true}\r\n                                ref={this.intialPopRef}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <NumSlider\r\n                                label={\"Initial Immunity Percent\"}\r\n                                showRange={true}\r\n                                min={0}\r\n                                max={1}\r\n                                step={0.01}\r\n                                required={true}\r\n                                ref={this.intialImmunityRef}\r\n                            />\r\n                        </div>\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <NumSlider\r\n                                label={\"Initial Infected\"}\r\n                                showRange={true}\r\n                                min={0}\r\n                                max={1000000}\r\n                                maxText={\"Population\"}\r\n                                step={1}\r\n                                required={true}\r\n                                ref={this.initialInfectedRef}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <NumSlider\r\n                                label={\"Simulation Length (Days)\"}\r\n                                showRange={true}\r\n                                min={1}\r\n                                max={365}\r\n                                step={1}\r\n                                required={true}\r\n                                ref={this.daysRef}\r\n                            />\r\n                        </div>\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <label>Presets:</label>\r\n                            <select ref={this.presetRef} className=\"form-control\" onChange={this.onPresetChange.bind(this)}>\r\n                                <option>Custom</option>\r\n                                <option>Seasonal Flu</option>\r\n                                <option>Smallpox</option>\r\n                                <option>Polio</option>\r\n                                <option>Measles</option>\r\n                                <option>Ebola</option>\r\n                                <option>H1N1 Flu</option>\r\n                                <option>H5N1 Flu</option>\r\n                                <option>1918 Flu</option>\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group text-center\">\r\n                        <button onClick={this.onFormClick.bind(this)} className=\"input-btn\" disabled={this.state.pending} btn=\"day-by-day\">Day-By-Day</button>&nbsp;\r\n                        <button onClick={this.onFormClick.bind(this)} className=\"input-btn\" disabled={this.state.pending} btn=\"auto-run\">Auto Run</button>&nbsp;\r\n                        <button onClick={this.onReset.bind(this)} className=\"input-btn\" disabled={this.state.pending} type=\"button\" >Reset</button>&nbsp;\r\n                        <button onClick={this.onFormClick.bind(this)} className=\"input-btn\" disabled={this.state.pending} btn=\"export-csv\">Export CSV</button>\r\n                    </div>\r\n                </form>\r\n                <div>{this.state.message}</div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport ReactModal from \"react-modal\"\r\nimport { Ajax } from \"../Ajax\";\r\n\r\nexport class MailModal extends React.Component{\r\n\r\n\tconstructor(props){\r\n        super(props);\r\n\r\n        // input refs\r\n        this.textRef = React.createRef();\r\n        this.errorRef = React.createRef();\r\n        this.headerRef = React.createRef();\r\n\r\n        this.type = null;\r\n        this.typeError = true;\r\n        this.errorTime = false;\r\n        this.errorMsg = \"\";\r\n\r\n        this.state = { \r\n\t\t\tother: false,\r\n\t\t\terrMessage:null,\r\n\t\t\tsuccessMessage:null\r\n        };\r\n\r\n        //Modal.setAppElement(this.props.app);\r\n\t}\r\n\r\n\tcomponentDidUpdate(prevProps){\r\n\t\t// clear messages when the visibility changes\r\n\t\tif(prevProps.showModal && !this.props.showModal){\r\n\t\t\tthis.setState({errMessage: null, successMessage: null});\r\n\t\t}\r\n\t}\r\n\r\n\t// on click of submit button \r\n\tsubmitClick(e){\r\n\t\tthis.setState({errMessage:null});\r\n\t\te.preventDefault();\r\n\t\tlet goodHeader = this.headerRef.current ? (this.headerRef.current.value.length > 0) : true;\r\n\t\tif(this.type != null && this.textRef.current.value != \"\" && goodHeader){\r\n\t\t\tlet message = this.BuildArray();\r\n\r\n\t\t\t// localhost = dev, else = prod\r\n\t\t\tlet origin = window.location.origin.includes(\"localhost\") ? \"http://localhost:8080\" : window.location.origin;\r\n\r\n\t\t\tAjax.post(`${origin}/mail`,null,{message})\r\n\t\t\t\t.then(xhr => {    \r\n                    // ajax resolved (could be bad/good request, but server responded)\r\n                    if(xhr.status === 200){\r\n                        // good request - attempt to parse results json\r\n                        try{\r\n\t\t\t\t\t\t\tthis.setState({successMessage:\"Submit Successful\"});\r\n                        }\r\n                        catch(err){\r\n\t\t\t\t\t\t\t// json parse error (should never happen)\r\n\t\t\t\t\t\t\tthis.setState({errMessage:JSON.parse(err)});\r\n\t\t\t\t\t\t\t// server responded with bad request signal\r\n                        }\r\n                    }\r\n                    else{\r\n\t\t\t\t\t\t// bad request\r\n\t\t\t\t\t\tthis.setState({errMessage:\"Bad Request Error\"});\r\n                    }\r\n                })\r\n                .catch(err => {\r\n                    // ajax request died (really bad NOT a 400 error!)\r\n\t\t\t\t\tthis.setState({errMessage:\"Cannot reach server\"});// request died signal\r\n                });\r\n\t\t}\r\n\t}\r\n\t\r\n\t//Build the JSON array that is sent over the Ajax request\r\n\tBuildArray(){\r\n\t\t//get the text in the the message textarea\r\n\t\tlet text = this.textRef.current.value;\r\n\t\t//\r\n        let type = \"\";\r\n\r\n        if(this.state.other){\r\n        \ttype = this.headerRef.current.value;\r\n        }else{\r\n        \ttype = this.type;\r\n        }\r\n\r\n        // MUST match API expectations! \r\n        return {type,text};\r\n    }\r\n\r\n\t// on change of radio button set type\r\n\tonTypeSelect(type){\r\n\t\t//get the type of the radio button selected\r\n\t \tthis.type = type;\r\n\r\n\t\t// check to see if other is selected\r\n\t\tthis.setState({other: this.type === \"other\"});\r\n\r\n\t \tthis.typeError = false;\r\n\t }\r\n\r\n\t //Check if other is selcted and load elements based on that\r\n \t TypeOther(){\r\n\t \tif(!this.state.other){\r\n\t\t\t // remove element of screen\r\n\t \t\treturn null;\r\n\t \t}else{\r\n\t\t\t //load element onto screen\r\n\t \t\treturn(\r\n\t \t\t\t<div>\r\n\t \t\t\t\t<label>Other: </label> <input type=\"text\" placeholder=\"Input for other\" ref={this.headerRef} required/>\r\n\t \t\t\t</div>\r\n\t \t\t);\r\n\t \t}\r\n\t }\r\n\t \r\n\trender(){\r\n\t\treturn this.props.showModal ? (\r\n\t\t\t<form>\r\n\t\t\t\t<ReactModal isOpen={this.props.showModal} >\r\n\t\t\t\t\t<div className=\"col-lg-1\">\r\n\t\t\t  \t\t\t<span className=\"nav-link\" onClick={this.props.closeModal}>&times;</span>\r\n\t\t\t  \t\t</div>\r\n\t\t\t  \t\t<div className=\"container border\">\r\n\t\t\t\t\t  <form onSubmit={this.submitClick.bind(this)}>\r\n\t\t\t\t\t\t\t<div className=\"col-lg-12 header center\">\r\n\t\t\t\t\t\t\t\t<h2 className=\"modalHeader\">Contact Us</h2>\r\n\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t<span className=\"error\">\r\n\t\t\t\t\t\t\t\t\t\t{this.state.errMessage}\r\n\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t\t<span className=\"success\">\r\n\t\t\t\t\t\t\t\t\t\t{this.state.successMessage}\r\n\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div className=\"col-lg-12 center\">\r\n\t\t\t\t\t\t\t\t<input type=\"radio\" onChange={() => this.onTypeSelect(\"Bug Report\")} name=\"types\" value=\"problem\" required/>Have a problem?\r\n\t\t\t\t\t\t\t\t&nbsp;\r\n\t\t\t\t\t\t\t\t<input type=\"radio\" onChange={() => this.onTypeSelect(\"Feature Request\")} name=\"types\" value=\"idea\" required/>Have an idea?\r\n\t\t\t\t\t\t\t\t&nbsp;\r\n\t\t\t\t\t\t\t\t<input type=\"radio\" onChange={() => this.onTypeSelect(\"other\")} name=\"types\" value=\"other\" required/>Other\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div className=\"col-lg-12 center\">\r\n\t\t\t\t\t\t\t\t{this.TypeOther()}\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div className=\"col-lg-12 center\">\r\n\t\t\t\t\t\t\t\t<textarea rows=\"4\" cols=\"100\" placeholder=\"Type message in here.\" ref={this.textRef} required></textarea>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div className=\"col-lg-12 center\">\r\n\t\t\t\t\t\t\t\t<input type=\"submit\" />\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</form>\r\n\t\t\t\t\t</div>\r\n      \t\t\t</ReactModal>\r\n\t\t\t</form>\r\n\t\t) : null;\r\n\t}\r\n}","import React from \"react\";\r\nimport { Dropdown, DropdownToggle, DropdownMenu, DropdownItem, Navbar as RNavbar, NavItem, Collapse, NavbarToggler, Nav } from \"reactstrap\";\r\nimport { MailModal } from \"./MailModal\"\r\nimport Simulator from \"../Simulator\";\r\n\r\nexport class Navbar extends React.Component{\r\n\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\r\n\t    this.state = {\r\n\t\t\tshowNav: false,\t\t\t// navbar collapse\r\n\t\t\tshowModal: false,\t\t// mail modal visibility\r\n\t\t\tshowAdvanced: false\t\t// advanced dropdown menu visibility\r\n\t    };\r\n\r\n\t}\r\n\r\n\t// close the mail modal\r\n\tcloseModal(){\r\n\t\tthis.setState({showModal: false});\r\n\t}\r\n\r\n\t// show the mail modal\r\n\topenModal(){\r\n\t\tthis.setState({showModal: true});\r\n\t}\r\n\r\n\t// toggles the navbar collapse state\r\n\ttoggleNavbar(){\r\n\t\tthis.setState(prev => ({showNav: !prev.showNav}));\r\n\t}\r\n\r\n\t// toggle advanced dropdown\r\n\ttoggleDropdown(){\r\n\t\tthis.setState(prev => ({showAdvanced: !prev.showAdvanced}));\r\n\t}\r\n\r\n\t// advanced dropdown error correction option toggle\r\n\ttoggleErrorCorrection(){\r\n\t\tSimulator.isErrCorrecting = !Simulator.isErrCorrecting;\r\n\t}\r\n\r\n\trender(){\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<RNavbar color=\"light\" expand=\"md\">\r\n\t\t\t\t\t<NavbarToggler onClick={this.toggleNavbar.bind(this)}/>\r\n\t\t\t\t\t<Collapse isOpen={this.state.showNav} navbar>\r\n\t\t\t\t\t\t<Nav navbar>\r\n\t\t\t\t\t\t\t<NavItem>\r\n\t\t\t\t\t\t\t\t<span className=\"nav-link\" onClick={this.openModal.bind(this)}>Contact Us <span className=\"sr-only\">(current)</span></span>\r\n\t\t\t\t\t\t\t</NavItem>\r\n\t\t\t\t\t\t\t<NavItem>\r\n\t\t\t\t\t\t\t\t<Dropdown isOpen={this.state.showAdvanced} toggle={this.toggleDropdown.bind(this)}>\r\n\t\t\t\t\t\t\t\t\t\t<DropdownToggle caret color=\"light\">\r\n\t\t\t\t\t\t\t\t\t\t\tAdvanced\r\n\t\t\t\t\t\t\t\t\t\t</DropdownToggle>\r\n\t\t\t\t\t\t\t\t\t\t<DropdownMenu>\r\n\t\t\t\t\t\t\t\t\t\t\t<DropdownItem onClick={this.toggleErrorCorrection.bind(this)}>\r\n\t\t\t\t\t\t\t\t\t\t\t\tToggle Error Correction (Currently {Simulator.isErrCorrecting ? \"Enabled\" : \"Disabled\"})\r\n\t\t\t\t\t\t\t\t\t\t\t</DropdownItem>\r\n\t\t\t\t\t\t\t\t\t\t</DropdownMenu>\r\n\t\t\t\t\t\t\t\t\t</Dropdown>\r\n\t\t\t\t\t\t\t</NavItem>\r\n\t\t\t\t\t\t</Nav>\r\n\t\t\t\t\t</Collapse>\r\n\t\t\t\t</RNavbar>\r\n\t\t\t\t<MailModal showModal={this.state.showModal} closeModal={this.closeModal.bind(this)} />\r\n\t      \t</div>\r\n\t\t);\r\n\t}\r\n}","import React from \"react\";\r\nimport Simulator from \"../Simulator\";\r\n\r\nexport class Chart extends React.Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\tdata: null,\t\t// simulatoion data set\r\n\t\t\tday: 0\t\t\t// current simulation day\r\n\t\t};\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\t// simulator singles data set loaded\r\n\t\tSimulator.on(\"data\", this.onSimulatorData.bind(this));\r\n\r\n\t\t// simulator signals a reset\r\n\t\tSimulator.on(\"reset\", this.onSimulatorReset.bind(this));\r\n\r\n\t\t// simulator signals a different day\r\n\t\tSimulator.on(\"update\", this.onSimulatorUpdate.bind(this));\r\n\t}\r\n\r\n\t// simulator got data - store it\r\n\tonSimulatorData(){\r\n\t\tthis.setState({data: Simulator.data});\r\n\t}\r\n\r\n\t// simulator reset - reset this component\r\n\tonSimulatorReset(){\r\n\t\tthis.setState({data: null, day: 0});\r\n\t}\r\n\r\n\t// simulator day changed - update component day\r\n\tonSimulatorUpdate(){\r\n\t\tthis.setState({day: Simulator.currentDay});\r\n\t}\r\n\r\n\t// renders table rows up to the current simulation day\r\n\trenderRows(){\r\n\t\tif(Simulator.hasData){\r\n\t\t\tlet rows = new Array(Simulator.currentDay + 1);\r\n\r\n\t\t\tfor(let i = 0; i <= Simulator.currentDay; i++){\r\n\t\t\t\t// get json for the say\r\n\t\t\t\tlet day = Simulator.data[i];\r\n\r\n\t\t\t\t// extract data\r\n\t\t\t\tlet susceptible = Math.round(day.Susceptible),\r\n\t\t\t\t\tinfected = Math.round(day.Infected),\r\n\t\t\t\t\timmune = Math.round(day.Immune),\r\n\t\t\t\t\tdead = Math.round(day.Dead),\r\n\t\t\t\t\tpopulation = Math.round(day.TotalPopulation);\r\n\r\n\t\t\t\t// first invalid day?\r\n\t\t\t\tlet style = null, tooltip = null;\r\n\r\n\t\t\t\tif(Simulator.firstInvalidDay > -1){\r\n\t\t\t\t\tif(i === Simulator.firstInvalidDay){\r\n\t\t\t\t\t\t// this row is first invalid day\r\n\t\t\t\t\t\tstyle = {\r\n\t\t\t\t\t\t\tborderLeft: \"5px solid red\",\r\n\t\t\t\t\t\t\tborderRight: \"5px solid red\"\r\n\t\t\t\t\t\t};\r\n\t\r\n\t\t\t\t\t\ttooltip = `Data correction begins at day ${i}.`;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if(i > Simulator.firstInvalidDay){\r\n\t\t\t\t\t\t// subsequent invalid days\r\n\t\t\t\t\t\tstyle = {\r\n\t\t\t\t\t\t\tborderLeft: \"1px solid red\",\r\n\t\t\t\t\t\t\tborderRight: \"1px solid red\"\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// create table row\r\n\t\t\t\t// (toLocalString adds the ',' as the number grows in thousands)\r\n\t\t\t\trows[i] = (\r\n\t\t\t\t\t<tr key={i} style={style} title={tooltip}>\r\n\t\t\t\t\t\t<td onClick={()=>Simulator.setGraphDay(i)}>{i}</td>\r\n\t\t\t\t\t\t<td>{susceptible.toLocaleString()}</td>\r\n\t\t\t\t\t\t<td>{infected.toLocaleString()}</td>\r\n\t\t\t\t\t\t<td>{immune.toLocaleString()}</td>\r\n\t\t\t\t\t\t<td>{dead.toLocaleString()}</td>\r\n\t\t\t\t\t\t<td>{population.toLocaleString()}</td>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\treturn rows;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n\r\n\trender(){\r\n\t\treturn this.state.data !== null ? (\r\n\t\t\t<div>\r\n\t\t\t\t<table className=\"table table-striped overflow-table\">\r\n\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t<th>Day</th>\r\n\t\t\t\t\t\t\t<th>Susceptible</th>\r\n\t\t\t\t\t\t\t<th>Infected</th>\r\n\t\t\t\t\t\t\t<th>Immune</th>\r\n\t\t\t\t\t\t\t<th>Dead</th>\r\n\t\t\t\t\t\t\t<th>Total Population</th>\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t</thead>\r\n\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t{this.renderRows()}\r\n\t\t\t\t\t</tbody>\r\n\t\t\t\t</table>\r\n\t\t\t\t<div className=\"text-center\">\r\n\t\t\t\t\t{Simulator.firstInvalidDay > -1 ? `* Error correction begins on day ${Simulator.firstInvalidDay} *` : null}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t) : null;\r\n\t}\r\n}","import React from \"react\";\r\nimport Simulator from \"../Simulator\";\r\nimport { LineChart } from \"react-easy-chart\"\r\n\r\nexport class Graph extends React.Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\t\r\n\t    this.state = {\r\n\t\t\tdata: \t\t\tnull,\t\t\t// graph data\r\n\t\t\tday: \t\t\t0,\t\t\t\t// current simulation day\r\n\t\t\tyLabel: \t\t\"Infected\",\t\t// y-axis value\r\n\t\t\ttooltip:\t\tnull\r\n\t    };\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\t// when the simulator signals it has received data\r\n\t\tSimulator.on(\"data\", this.onSimulatorData.bind(this));\r\n\r\n\t\t// when the simulator signals a reset\r\n\t\tSimulator.on(\"reset\", this.onSimulatorReset.bind(this));\r\n\r\n\t\t// when the simulator changes the day\r\n\t\tSimulator.on(\"update\", this.onSimulatorUpdate.bind(this));\r\n\r\n\t\t// when the simulator changes the graph\r\n\t\tSimulator.on(\"update-graph\", this.onSimulatorUpdateGraph.bind(this));\r\n\t}\r\n\r\n\tcomponentDidUpdate(prevProps, prevState){\r\n\t\tif(prevState.yLabel !== this.state.yLabel){\r\n\t\t\tthis.setState({tooltip: null});\r\n\t\t}\r\n\t}\r\n\r\n\t// simulator has data - convert to d3 format and store it\r\n\tonSimulatorData(){\r\n\t\t// update\r\n\t\tthis.setState({data: Simulator.data});\r\n\t}\r\n\r\n\t// simulator reset - reset this component\r\n\tonSimulatorReset(){\r\n\t\tthis.setState({data: null, day: 0});\r\n\t}\r\n\r\n\t// simulator update - update to the current day\r\n\tonSimulatorUpdate(){\r\n\t\tthis.setState({day: Simulator.currentDay});\r\n\t}\r\n\r\n\t// simulator update - graph change\r\n\tonSimulatorUpdateGraph(evt){\r\n\t\t// day change\r\n\t\tif(typeof evt.day === \"number\"){\r\n\t\t\tthis.setState({day: evt.day});\r\n\t\t}\r\n\t}\r\n\r\n\t// when the graph y axis drop down is changed\r\n\tonYLabelChange(evt){\r\n\t\tthis.setState({yLabel: evt.target.value})\r\n\t}\r\n\r\n\t// gets the data values (multiple lines) up to do the current\r\n\tgetDataForAllLabels(){\r\n\t\tlet values = [];\t\t// holds the correctly formatted values\r\n\t\tlet valuesObj = {};\t\t// helps to sort by label ('Infected', 'Susceptible', etc)\r\n\r\n\t\t// iterate over each day...\r\n\t\tfor(let i = 0; i <= this.state.day; i++){\r\n\t\t\t// day json, example: {'Infected': 100, 'Susceptible': 5, etc}\r\n\t\t\tlet row = this.state.data[i]; \r\n\r\n\t\t\t// for each label... (row[label] is the y value for the y label (ex: how many infected))\r\n\t\t\tfor(let label in row){\r\n\t\t\t\tif(label === \"TotalPopulation\") continue;\r\n\r\n\t\t\t\tlet y = parseFloat(row[label]);\r\n\r\n\t\t\t\tlet pt = {x: i, y};\r\n\r\n\t\t\t\tif(label in valuesObj){\r\n\t\t\t\t\tvaluesObj[label].push(pt);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tvaluesObj[label] = [pt];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// labels IN ORDER\r\n\t\tlet labels = [];\r\n\r\n\t\t// convert the dictionary into the correctly formatted array\r\n\t\tfor(let key in valuesObj){\r\n\t\t\tvalues.push(valuesObj[key]);\r\n\t\t\tlabels.push(key);\r\n\t\t}\r\n\r\n\t\t// allData is used by render method to determine multiline\r\n\t\treturn {values, labels, largestY: this.state.data[0].TotalPopulation};\r\n\t}\r\n\r\n\t// gets the data values up to the current day (single line)\r\n\tgetData(){\r\n\t\t// make sure there is data\r\n\t\tif(!this.state.data || this.state.day < 1){\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\t// All = multiline, this function is for one line\r\n\t\tif(this.state.yLabel === \"All\"){\r\n\t\t\treturn this.getDataForAllLabels();\r\n\t\t}\r\n\r\n\t\tlet largestY = 0;\r\n\r\n\t\tlet values = [];\r\n\r\n\t\t// iterate... find largest Y and populate values with {x, y} format\r\n\t\tfor(let i = 0; i <= this.state.day; i++){\r\n\t\t\tlet y = parseFloat(this.state.data[i][this.state.yLabel]);\r\n\r\n\t\t\tlargestY = Math.max(largestY, y);\r\n\r\n\t\t\tvalues.push({x: i, y});\r\n\t\t}\r\n\r\n\t\treturn {values: [values], label: this.state.yLabel, largestY};\r\n\t}\r\n\r\n\tonGraphClick(data, evt){\r\n\t\tif(this.state.yLabel !== \"All\"){\r\n\t\t\tlet {x, y} = data;\r\n\r\n\t\t\tthis.setState({tooltip: `${Math.round(y)} people ${this.state.yLabel.toLowerCase()} on day ${x}.`});\r\n\t\t}\r\n\t}\r\n\r\n\trender(){\r\n\t\t// graph size constants\r\n\t\tconst WIDTH = \t\t540,\r\n\t\t\tHEIGHT = \t\t475,\r\n\t\t\tMARGIN_TOP = \t10,\r\n\t\t\tMARGIN_BOTTOM =\t50,\r\n\t\t\tMARGIN_LEFT = \t80,\r\n\t\t\tMARGIN_RIGHT = \t10;\r\n\r\n\t\t// graph line colors\r\n\t\tconst COLORS = {\r\n\t\t\t\"Infected\": \t\"green\",\r\n\t\t\t\"Susceptible\": \t\"red\",\r\n\t\t\t\"Immune\": \t\t\"steelblue\",\r\n\t\t\t\"Dead\": \t\t\"gray\"\r\n\t\t};\r\n\r\n\t\tlet data = this.getData();\r\n\t\tif(data){\r\n\t\t\tlet numDays = data.values[0].length - 1; // day zero = initial params\r\n\t\t\t\r\n\t\t\treturn (\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<h5>Simulated {this.state.yLabel}</h5>\r\n\t\t\t\t\t<div className=\"GraphDropdown\" onChange={this.onYLabelChange.bind(this)}>\r\n\t\t\t\t\t\t<select className=\"form-control\">\r\n\t\t\t\t\t\t\t<option>Infected</option>\r\n\t\t\t\t\t\t\t<option>Susceptible</option>\r\n\t\t\t\t\t\t\t<option>Immune</option>\r\n\t\t\t\t\t\t\t<option>Dead</option>\r\n\t\t\t\t\t\t\t<option>All</option>\r\n\t\t\t\t\t\t</select>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<LineChart\r\n\t\t\t\t\t\t\tdata={data.values}\r\n\t\t\t\t\t\t\twidth={WIDTH}\r\n\t\t\t\t\t\t\theight={HEIGHT}\r\n\t\t\t\t\t\t\tmargin={{\r\n\t\t\t\t\t\t\t\ttop: MARGIN_TOP, bottom: MARGIN_BOTTOM,\r\n\t\t\t\t\t\t\t\tleft: MARGIN_LEFT, right: MARGIN_RIGHT\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\taxes\r\n\t\t\t\t\t\t\taxisLabels={{x: \"Days Elapsed\", y: (this.state.yLabel === \"All\" ? \"People\" : `People ${this.state.yLabel}`)}}\r\n\t\t\t\t\t\t\tinterpolate={\"cardinal\"}\r\n\t\t\t\t\t\t\tdataPoints={numDays < 50 && this.state.yLabel !== \"All\"}\r\n\t\t\t\t\t\t\txDomainRange={[0, numDays]}\r\n\t\t\t\t\t\t\tyDomainRange={[0, data.largestY]}\r\n\t\t\t\t\t\t\tlineColors={data.values.length !== 1 ? data.labels.map(label => COLORS[label]) : [COLORS[data.label]]}\r\n\t\t\t\t\t\t\tclickHandler={this.onGraphClick.bind(this)}\r\n\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\".label\": {fill: \"black\"},\r\n\t\t\t\t\t\t\t\t\".axis\": {fontSize: \"0.75em\", fontFamily: \"arial\"}\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"text-center\">\r\n\t\t\t\t\t\t{this.state.tooltip}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n}","import \"../lib/bootstrap.min.css\";\r\nimport \"./App.css\";\r\nimport React from \"react\";\r\nimport { Inputs } from \"./Inputs\";\r\nimport { Navbar } from \"./Navbar\";\r\nimport { Chart } from \"./Chart\";\r\nimport { Graph } from \"./Graph\";\r\n\r\nexport class App extends React.Component{\r\n    render(){\r\n        return (\r\n            <div>\r\n                <Navbar/>\r\n                <br/>\r\n                <span className=\"Version\">V0.2</span>\r\n                <main className=\"container card card-body bg-light\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-lg-6\">\r\n                            <Inputs/>\r\n                        </div>\r\n                        <div className=\"col-lg-6 graph\">\r\n                            <Graph/>\r\n                        </div>\r\n                    </div>\r\n                    <br/>\r\n                    <div>\r\n                        <Chart/>\r\n                    </div>\r\n                </main>\r\n                <footer className=\"container text-center\">\r\n                    <hr/>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-lg-6\">\r\n                            Juall | Rosenblum | Pojero | Erry \r\n                        </div>\r\n                        <div className=\"col-lg-6\">\r\n                            <a href=\"https://opensource.org/licenses/MIT\" target=\"_blank\">MIT License</a>\r\n                        </div>\r\n                    </div>\r\n                </footer>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { App } from \"./components/App\";\r\n\r\nReactDOM.render(<App/>, document.querySelector(\"#root\"));"],"sourceRoot":""}