{"version":3,"sources":["Ajax.js","EventEmitter.js","Simulator.js","ParamStorage.js","components/NumSlider.jsx","preset.js","GraphData.js","components/Inputs.jsx","components/MailModal.jsx","components/Navbar.jsx","components/Table.jsx","components/GraphRange.jsx","components/TrendLine.jsx","components/Graph.jsx","components/App.jsx","index.js"],"names":["Ajax","Object","classCallCheck","this","createClass","key","value","options","arguments","length","undefined","Promise","resolve","reject","method","url","window","location","origin","headers","query","data","xhr","XMLHttpRequest","h","onload","onerror","err","queryString","open","setRequestHeader","send","JSON","stringify","request","dict","qs","param","concat","substring","EventEmitter","_listeners","event","willTrigger","type","forEach","listener","eventType","push","listeners","i","splice","src_Simulator","Simulator","_this","possibleConstructorReturn","getPrototypeOf","call","_firstInvalidDay","_useErrCorrecting","_this2","href","includes","Access-Control-Allow-Origin","Error-Correction","isErrCorrecting","get","then","status","parse","response","parseInt","getResponseHeader","emit","Event","Error","catch","_this3","Content-Type","csvDataBlob","Blob","a","document","createElement","URL","createObjectURL","setAttribute","Date","now","click","revokeObjectURL","console","log","message","src_ParamStorage","ParamStorage","_numParamSets","_lastParamSet","_currDay","sessionStorage","clear","params","convertToTitleCase","paramsNotLastSave","setItem","numParamSets","removeItem","infectionLength","transmissionRate","virulence","initialPopulation","immunePercent","initialInfected","simulationLength","preset","saveParamsInputsDict","infection_length","transmission_rate","initial_population","immune_percent","initial_infected","simulation_length","newParams","paramId","json","getItem","firstStoredDay","getSavedParams","NumSlider","_React$Component","props","numRef","React","createRef","rangeRef","inherits","current","init","min","evt","val","parseFloat","target","Math","max","react_default","className","label","showRange","minText","maxText","ref","onChange","onNumber","bind","step","placeholder","required","disabled","onSlide","set","n","Component","presets","Seasonal Flu","Infection Length","Transmission","Virulence","Smallpox","Polio","Measles","Ebola","H1N1 Flu","H5N1 Flu","1918 Flu","src_GraphData","GraphData","_startDay","_endDay","Number","MAX_SAFE_INTEGER","_trendLineY","extractTrendLine","URLSearchParams","search","trendLineY","keysDict","simData","labeledPoints","largestY","start","startDay","end","endDay","day","y","pt","x","Array","fill","map","index","values","keys","labels","filter","INPUT_RANGES","Inputs","intialImmunityRef","transmissionRef","virulenceRef","initialInfectedRef","intialPopRef","infectionLengthRef","daysRef","presetRef","exportUrlRef","state","pending","isDisabled","exportModal","exportOption","exportDropdown","on","onSimulatorLoad","onSimulatorError","extractQueryStringParams","useTestValues","getInputsDictionary","healthy","setState","reset","downloadCSVFile","hasData","currParams","runSimulation","load","preventDefault","prev","direction","stepBackwards","stepForwards","currentParams","onPresetChange","elem","select","execCommand","reactstrap_es","color","onClick","downloadCSV","defaultValue","getExportURL","readOnly","copyLinkText","_this4","id","switchParamSet","onSubmit","NumSlider_NumSlider","onReset","toggleExportModal","isOpen","toggle","toggleExportDropdown","caret","renderExportOptBody","MailModal","textRef","errorRef","headerRef","typeError","errorTime","errorMsg","other","errMessage","successMessage","prevProps","showModal","e","goodHeader","BuildArray","post","text","lib_default","closeModal","submitClick","onTypeSelect","name","TypeOther","Navbar","showNav","showAdvanced","light","expand","toggleNavbar","navbar","selected","openModal","toggleDropdown","toggleErrorCorrection","MailModal_MailModal","Table","visible","style","firstInvalidDay","borderLeft","borderRight","rows","dayData","susceptible","round","Susceptible","infected","Infected","immune","Immune","dead","Dead","population","TotalPopulation","getStyleForDay","toLocaleString","renderRows","GraphRange","lowerRef","upperRef","lowValue","low","high","selectedMax","highValue","selectedMin","onChangeLow","onChangeHigh","TrendLine","WIDTH","COLORS","Graph","graphContainerRef","tooltip","containerWidth","graphLabels","toggleLabel","forceUpdate","addEventListener","onResize","prevState","yLabel","nextLabels","assign","element","getBoundingClientRect","width","borders","borderBottom","container","svgElement","querySelector","canvas","ctx","getContext","getAttribute","height","svgXml","XMLSerializer","serializeToString","blob","svgUrl","svgImage","imageSmoothingEnabled","imageSmoothingQuality","drawImage","globalCompositeOperation","fillStyle","fillRect","jpg","toDataURL","getData","dayCount","join","renderLabelButtons","react_easy_chart_lib","margin","top","bottom","left","right","axes","axisLabels","dataPoints","xDomainRange","yDomainRange","lineColors","clickHandler","onGraphClick",".label",".axis","fontSize","fontFamily","TrendLine_TrendLine","GraphRange_GraphRange","App","apply","Navbar_Navbar","lg","Inputs_Inputs","Graph_Graph","Table_Table","ReactDOM","render","App_App"],"mappings":"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","file":"static/js/main.0dae7b2f.chunk.js","sourcesContent":["export class Ajax{\r\n    // sends an async http request \r\n    static request(options={}){\r\n        return new Promise((resolve, reject) => {\r\n            // extract config from options object\r\n            let method = (typeof options.method === \"string\") ? options.method : \"GET\",\r\n                url = (typeof options.url === \"string\") ? options.url : window.location.origin,\r\n                headers = (typeof options.headers === \"object\" && options.headers) ? options.headers : {},\r\n                query = (typeof options.query === \"object\" && options.query) ? options.query : {},\r\n                data = (typeof options.data !== \"undefined\") ? options.data : null;\r\n\r\n            // create the request\r\n            let xhr = new XMLHttpRequest();\r\n\r\n            // attach listeners\r\n            xhr.onload = () => resolve(xhr);\r\n            xhr.onerror = err => reject(err);\r\n\r\n            // apply query string\r\n            if(query){\r\n                url += Ajax.queryString(query);\r\n            }\r\n\r\n            // open the request\r\n            xhr.open(method, url);\r\n\r\n            // apply http headers\r\n            for(let h in headers){\r\n                xhr.setRequestHeader(h, headers[h]);\r\n            }\r\n\r\n            // send the request\r\n            // send JSON if the data is not a string\r\n            if(data){\r\n                if(typeof data !== \"string\"){\r\n                    xhr.send(JSON.stringify(data));\r\n                }\r\n                else xhr.send(data);\r\n            }\r\n            else xhr.send();\r\n        });\r\n    }\r\n\r\n    // async http get request\r\n    static get(url, headers, query){\r\n        return Ajax.request({method: \"GET\", url, headers, query});\r\n    }\r\n\r\n    // async http post request\r\n    static post(url, headers, data){\r\n        return Ajax.request({method: \"POST\", url, headers, data});\r\n    }\r\n\r\n    // creates a query string from an object\r\n    static queryString(dict){\r\n        let qs = \"?\";\r\n\r\n        for(let param in dict){\r\n            qs += `${param}=${dict[param]}&`;\r\n        }\r\n\r\n        return qs.substring(0, qs.length - 1);\r\n    }\r\n}","// simple event emitter class\r\nexport class EventEmitter{\r\n    constructor(){\r\n        this._listeners = {};   // 'private' dictionary of {eventType: listenerFunction}\r\n    }\r\n\r\n    // triggers all listening functions\r\n    emit(event){\r\n        if(this.willTrigger(event.type)){\r\n            this._listeners[event.type].forEach(listener => listener(event));\r\n        }\r\n    }\r\n\r\n    // adds a listener\r\n    on(eventType, listener){\r\n        if(this.willTrigger(eventType)){\r\n            this._listeners[eventType].push(listener);\r\n        }\r\n        else{\r\n            this._listeners[eventType] = [listener];\r\n        }\r\n    }\r\n\r\n    // removes a listener\r\n    off(eventType, listener){\r\n        if(this.willTrigger(eventType)){\r\n            let listeners = this._listeners[eventType];\r\n\r\n            for(let i = 0; i < listeners.length; i++){\r\n                if(listeners[i] === listener){\r\n                    listeners.splice(i, 1);\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // checks if there are any listeners for a given type\r\n    willTrigger(eventType){\r\n        return eventType in this._listeners;\r\n    }\r\n}","import { Ajax } from \"./Ajax\";\r\nimport { EventEmitter } from \"./EventEmitter\";\r\n\r\n// singleton for holding simulation data\r\n// event-driven to keep chart + graph updated\r\nclass Simulator extends EventEmitter{\r\n    constructor(){\r\n        super();\r\n\r\n        this.data = null;                   // simulation data array\r\n        this._firstInvalidDay = -1;         // first invalid day (-1 = no invalid days)\r\n        this._useErrCorrecting = true;      // use error correction?\r\n    }\r\n\r\n    // hits the API for data, signals progress\r\n    // query should be a dictionary of the inputs, will be converted into a query string\r\n    load(query){\r\n        return new Promise((resolve, reject) => {\r\n            // figure out endpoint\r\n            let url = window.location.href.includes(\"localhost\") ? \"http://localhost:8080/plague\" : `${window.location.origin}/plague`;\r\n            \r\n            // CORS headers (use foreign domain)\r\n            let headers = {\r\n                \"Access-Control-Allow-Origin\": window.location.origin,\r\n                \"Error-Correction\": this.isErrCorrecting\r\n            };\r\n\r\n            // ajax call with query string\r\n            // (null headers)\r\n            Ajax.get(url, headers, query)\r\n                .then(xhr => {    \r\n                    // ajax resolved (could be bad/good request, but server responded)\r\n                    if(xhr.status === 200){\r\n                        // good request - attempt to parse results json\r\n                        try{\r\n                            // parse json\r\n                            this.data = JSON.parse(xhr.response);\r\n\r\n                            // extract first invalid day\r\n                            this._firstInvalidDay = parseInt(xhr.getResponseHeader(\"First-Invalid-Day\")) || -1;\r\n                        }\r\n                        catch(err){\r\n                            // json parse error (should never happen)\r\n                            reject(err);\r\n                            this.emit(new Event(\"error\"));  // server responded with bad request signal\r\n                        }\r\n\r\n                        // done, resolve promise and emit load + data\r\n                        resolve();\r\n                        this.emit(new Event(\"load\"));   // server responded with good request signal\r\n\r\n                        this.emit(new Event(\"data\"));   // parsed data signal\r\n                    }\r\n                    else{\r\n                        // bad request\r\n                        reject(new Error(xhr.response || \"Bad request\"));\r\n                        this.emit(new Event(\"error\"));  // server responded with bad request signal\r\n                    }\r\n                })\r\n                .catch(err => {\r\n                    // ajax request died (really bad NOT a 400 error!)\r\n                    reject(err);\r\n                    this.emit(new Event(\"error\"));  // request died signal\r\n                });\r\n        });\r\n    }\r\n\r\n    // asychronously downloads a csv file using ajax\r\n    downloadCSVFile(query){\r\n        return new Promise((resolve, reject) => {\r\n            // figure out endpoint origin\r\n            let origin = window.location.origin.includes(\"localhost\") ? \"http://localhost:8080\" : window.location.origin;\r\n\r\n            // figure out endpoint using origin\r\n            let url = `${origin}/plague`;\r\n\r\n            // http request headers\r\n            let headers = {\r\n                \"Access-Control-Allow-Origin\": window.location.origin,\r\n                \"Content-Type\": \"text/csv\",\r\n                \"Error-Correction\": this.isErrCorrecting\r\n            };\r\n\r\n            // get csv file via Ajax\r\n            Ajax.get(url, headers, query)\r\n                .then(xhr => {\r\n                    // server responded\r\n                    if(xhr.status === 200){\r\n                        // good http status - download\r\n                        // xhr.response = csv text\r\n                        // convert to blob\r\n                        let csvDataBlob = new Blob([xhr.response], {type: \"octet/stream\"});\r\n\r\n                        // create a 'secret' link using the blob\r\n                        let a = document.createElement(\"a\");\r\n                        let url = window.URL.createObjectURL(csvDataBlob);\r\n                        \r\n                        // setup the link to download blob data\r\n                        a.setAttribute(\"download\", `data_${Date.now()}.csv`);\r\n                        a.setAttribute(\"href\", url);\r\n\r\n                        // click the link to download the file\r\n                        a.click();\r\n                        window.URL.revokeObjectURL(url);\r\n\r\n                        // trigger any listeners\r\n                        resolve(\"File downloaded.\");\r\n                    }\r\n                    else{\r\n                        // bad http status - trigger listeners with error\r\n                        console.log(xhr.response);\r\n                        reject(new Error(\"Error downloading CSV file.\"));\r\n                    }\r\n                })\r\n                .catch(err => {\r\n                    // server did not responed - trigger listeners with error\r\n                    console.log(err.message);\r\n                    reject(new Error(\"Unable to download CSV file.\"))\r\n                });\r\n        });\r\n    }\r\n\r\n    // resets simulation to day 0 and clears all stored data\r\n    // (triggers listeners)\r\n    reset(){\r\n        this.data = null;\r\n        this.emit(new Event(\"reset\"));\r\n    }\r\n\r\n    set isErrCorrecting(value){\r\n        if(typeof value === \"boolean\"){\r\n            this._useErrCorrecting = value;\r\n        }\r\n        else throw new Error(\"isErrCorrecting must be set to a boolean value.\");\r\n    }\r\n\r\n    get hasData(){\r\n        return this.data !== null;\r\n    }\r\n\r\n    get firstInvalidDay(){\r\n        return this._firstInvalidDay;\r\n    }\r\n\r\n    get isErrCorrecting(){\r\n        return this._useErrCorrecting;\r\n    }\r\n}\r\n\r\n// singleton\r\nexport default new Simulator();","// class for managing parameter data history using session storage\r\nconst PARAM_STORAGE_LIMIT = 100;\r\n\r\nclass ParamStorage{\r\n    constructor(){\r\n        this._numParamSets = 0;\r\n        this._lastParamSet = null;\r\n        this._currDay = 0;\r\n\r\n        window.sessionStorage.clear();\r\n    }\r\n    \r\n    // saves parameters to session storage - expects query string format (as provided by inputs.jsx)\r\n    saveParamsInputsDict(dict){\r\n        let params = this.convertToTitleCase(dict);\r\n\r\n        // prevent saving multiple set same time in a row\r\n        if(this.paramsNotLastSave(params)){\r\n            window.sessionStorage.setItem(++this._numParamSets, JSON.stringify(params))\r\n            this._currDay = this.numParamSets;\r\n            this._lastParamSet = params;\r\n\r\n            // enforce storage capacity - begin deleting from the left bound\r\n            if(this.numParamSets > PARAM_STORAGE_LIMIT){\r\n                window.sessionStorage.removeItem(this.numParamSets - PARAM_STORAGE_LIMIT);\r\n            }\r\n\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // saves parameters to session storage\r\n    saveParams(infectionLength, transmissionRate, virulence, initialPopulation, immunePercent, initialInfected, simulationLength, preset){\r\n        return this.saveParamsInputsDict({\r\n            infection_length:   infectionLength,\r\n            transmission_rate:  transmissionRate,\r\n            virulence,\r\n            initial_population: initialPopulation,\r\n            immune_percent:     immunePercent,\r\n            initial_infected:   initialInfected,\r\n            simulation_length:  simulationLength,\r\n            preset\r\n        });\r\n    }\r\n\r\n    // converts underscore format dict to title case (ex: initial_population to InitialPopulation)\r\n    convertToTitleCase(dict){\r\n        return {\r\n            infectionLength:    dict.infection_length,\r\n            transmissionRate:   dict.transmission_rate,\r\n            virulence:          dict.virulence,\r\n            initialPopulation:  dict.initial_population,\r\n            immunePercent:      dict.immune_percent,\r\n            initialInfected:    dict.initial_infected,\r\n            simulationLength:   dict.simulation_length,\r\n            preset:             dict.preset\r\n        };\r\n    }\r\n\r\n    // checks if 'newParams' is content different from the last save param set\r\n    paramsNotLastSave(newParams){\r\n        if(!this._lastParamSet) return true;\r\n\r\n        for(let param in this._lastParamSet){\r\n            if(this._lastParamSet[param] !== newParams[param]){\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // gets saved parameters\r\n    getSavedParams(paramId){\r\n        let json = window.sessionStorage.getItem(paramId) || null;\r\n        return json ? JSON.parse(json) : null;\r\n    }\r\n\r\n    // moves current day one into the backwards\r\n    stepBackwards(){\r\n        if(this._currDay - 1 >= this.firstStoredDay){\r\n            --this._currDay;\r\n            //this._lastParamSet = this.getSavedParams(--this._currDay);\r\n        }\r\n    }\r\n\r\n    // move sthe current day one day forwards\r\n    stepForwards(){\r\n        if(this._currDay + 1 <= this.numParamSets){\r\n            ++this._currDay;\r\n            //this._lastParamSet = this.getSavedParams(++this._currDay);\r\n        }\r\n    }\r\n\r\n    get firstStoredDay(){\r\n        if(this.numParamSets > PARAM_STORAGE_LIMIT){\r\n            return this.numParamSets - PARAM_STORAGE_LIMIT;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    get currentParams(){\r\n        return this.getSavedParams(this._currDay);\r\n    }\r\n\r\n    get currentDay(){\r\n        return this._currDay;\r\n    }\r\n\r\n    get numParamSets(){\r\n        return this._numParamSets;\r\n    }\r\n}\r\n\r\nexport default new ParamStorage();","import \"./NumSlider.css\";\r\nimport React from \"react\";\r\n\r\nexport class NumSlider extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.numRef = React.createRef();\r\n        this.rangeRef = React.createRef();\r\n    }\r\n\r\n    // mounted - set the default numbers\r\n    componentDidMount(){\r\n        this.numRef.current.value = this.props.init || this.props.min;\r\n        this.rangeRef.current.value = this.props.init || this.props.min;\r\n    }\r\n\r\n    // on text field input\r\n    onNumber(evt){\r\n        // set the range value to the number value\r\n        let val = parseFloat(evt.target.value);\r\n    \r\n        if(val){\r\n            // enforce min/max constraints\r\n            val = Math.min(Math.max(val, this.props.min), this.props.max); \r\n\r\n            // update inputs\r\n            this.numRef.current.value = val;\r\n            this.rangeRef.current.value = val;\r\n        }\r\n        else{\r\n            // empty input - range at min and number will be empty\r\n            this.rangeRef.current.value = this.props.min;\r\n        }\r\n    }\r\n\r\n    // on range bar move\r\n    onSlide(evt){\r\n        // set the text value to the number value\r\n        let val = evt.target.value;\r\n\r\n        // enforce min/max constraints \r\n        val = Math.min(Math.max(val, this.props.min), this.props.max);\r\n\r\n        // update number input\r\n        this.numRef.current.value = val;\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"num-slider-container\">\r\n                <div>\r\n                    <label>{this.props.label}</label>\r\n                    {this.props.showRange ? (` ${this.minText}-${this.maxText}`) : null}\r\n                </div>\r\n                <div>\r\n                    <input \r\n                        ref={this.numRef}\r\n                        onChange={this.onNumber.bind(this)}\r\n                        type=\"number\"\r\n                        min={this.props.min}\r\n                        max={this.props.max}\r\n                        step={this.props.step}\r\n                        placeholder={this.props.placeholder}\r\n                        required={this.props.required}\r\n                        disabled={this.props.disabled}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <input\r\n                        ref={this.rangeRef}\r\n                        onChange={this.onSlide.bind(this)}\r\n                        type=\"range\"\r\n                        min={this.props.min}\r\n                        max={this.props.max}\r\n                        step={this.props.step}\r\n                        disabled={this.props.disabled}\r\n                        className=\"num-slider-slider\"\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    set value(n){\r\n        // must be in range\r\n        n = Math.max(this.props.min, n);\r\n        n = Math.min(n, this.props.max);\r\n\r\n        // update elements \r\n        this.numRef.current.value = n;\r\n        this.rangeRef.current.value = n;\r\n    }\r\n\r\n    get minText(){\r\n        return this.props.minText ? this.props.minText : this.props.min;\r\n    }\r\n\r\n    get maxText(){\r\n        return this.props.maxText ? this.props.maxText : this.props.max;\r\n    }\r\n\r\n    get value(){\r\n        return this.numRef.current.value;\r\n    }\r\n}","export const presets ={\r\n    //presets in the inputs go here\r\n    //seasonal flu\r\n   \"Seasonal Flu\":{\r\n       \"Infection Length\": 8,\r\n       \"Transmission\": 1.2,\r\n       \"Virulence\": 0.01\r\n   },\r\n   //smallpox\r\n   \"Smallpox\":{\r\n    \"Infection Length\": 14,\r\n    \"Transmission\": 2.5,\r\n    \"Virulence\": 0.25 \r\n   },\r\n   //polio\r\n   \"Polio\":{\r\n    \"Infection Length\": 18,\r\n    \"Transmission\": 1,\r\n    \"Virulence\": 0.01 \r\n   },\r\n   //measles\r\n   \"Measles\":{\r\n    \"Infection Length\": 8,\r\n    \"Transmission\": 10,\r\n    \"Virulence\": 0.01 \r\n   },\r\n   //Ebola\r\n   \"Ebola\":{\r\n    \"Infection Length\": 13,\r\n    \"Transmission\": 1.5,\r\n    \"Virulence\": 0.75 \r\n   },\r\n    //H1N1 Flu\r\n    \"H1N1 Flu\":{\r\n    \"Infection Length\": 8,\r\n    \"Transmission\": 1.6,\r\n    \"Virulence\": 0.01 \r\n    },\r\n    //H5N1 Flu\r\n   \"H5N1 Flu\":{\r\n    \"Infection Length\": 8,\r\n    \"Transmission\": 0.1,\r\n    \"Virulence\": 0.6 \r\n   },\r\n    //1918 Flu\r\n    \"1918 Flu\":{\r\n    \"Infection Length\": 8,\r\n    \"Transmission\": 2,\r\n    \"Virulence\": 0.03 \r\n    }\r\n}\r\nexport default presets;\r\n","import Simulator from \"./Simulator\";\r\nimport { EventEmitter } from './EventEmitter';\r\n\r\nclass GraphData extends EventEmitter{\r\n    constructor(){\r\n        super();\r\n\r\n        this._startDay = -1;\r\n        this._endDay = Number.MAX_SAFE_INTEGER;\r\n        this._trendLineY = 0;\r\n\r\n        this.extractTrendLine();\r\n    }\r\n\r\n    // extracts trend line from query strings\r\n    extractTrendLine(){\r\n        // query strings\r\n        let qs = new URLSearchParams(window.location.search);\r\n        \r\n        // get trend line as float (default 0)\r\n\t\tlet trendLineY = parseFloat(qs.get(\"trend_line\")) || 0;\r\n        this._trendLineY = trendLineY;\r\n    }\r\n\r\n    getData(keysDict){\r\n        let simData = Simulator.data;   // simulation data array\r\n        let labeledPoints = {};         // stores the points array in a dictionary (key=label)\r\n        let largestY = 0;               // largest y in data set\r\n\r\n        if(simData){\r\n            // start & end indeces \r\n            let start = this.startDay > -1 ? this.startDay : 0;\r\n            let end = this.endDay < simData.length ? this.endDay : (simData.length - 1);\r\n\r\n            for(let i = start; i <= end; i++){\r\n                let day = simData[i];\r\n\r\n                // label is 'Infected', 'Susceptible', etc (whatever is provided)\r\n                for(let label in keysDict){\r\n                    if(keysDict[label] !== true){\r\n                        continue;\r\n                    }\r\n\r\n                    // get y value (x is always the day/index)\r\n                    let y = parseFloat(day[label]);\r\n\r\n                    // create x, y point\r\n                    let pt = {x: i, y};\r\n\r\n                    // store the point to its associated label\r\n                    if(label in labeledPoints){\r\n                        labeledPoints[label].push(pt);\r\n                    }\r\n                    else{\r\n                        labeledPoints[label] = [pt];\r\n                    }\r\n\r\n                    // update largest Y\r\n                    largestY = Math.max(largestY, y);\r\n                }\r\n            }\r\n\r\n            // optional trend line points\r\n            if(this.trendLineY > 0){\r\n                // creates an array of [{x, y},...] where x is the day and y is the trend line Y\r\n                labeledPoints[\"TrendLine\"] = new Array(end - start).fill(null).map((val, index) => ({x: index + start, y: this.trendLineY}));\r\n            }\r\n        }\r\n\r\n        // convert sorted dictionary into an array\r\n        let values = [];\r\n        Object.keys(labeledPoints).forEach(key => values.push(labeledPoints[key]));\r\n\r\n        // gets all the labels that are in the dictionary and true (in order)\r\n        let labels = Object.keys(keysDict).filter(key => keysDict[key] === true);\r\n\r\n        return {values, largestY, labels};\r\n    }\r\n\r\n    // sets the start/end days\r\n    // (better to use this than setting start & end days individually due to 1 update)\r\n    setDaysRange(start, end){\r\n        this._startDay = start;\r\n        this._endDay = end;\r\n        this.emit(new Event(\"update\"));\r\n    }\r\n\r\n    set startDay(value){\r\n        this._startDay = value;\r\n        this.emit(new Event(\"update\"));\r\n    }\r\n\r\n    set endDay(value){\r\n        this._endDay = value;\r\n        this.emit(new Event(\"update\"));\r\n    }\r\n\r\n    set trendLineY(value){\r\n        this._trendLineY = value;\r\n        this.emit(new Event(\"update\"));\r\n    }\r\n\r\n    get startDay(){\r\n        return Math.max(0, this._startDay);\r\n    }\r\n\r\n    get endDay(){\r\n        return Math.min(this._endDay, Simulator.data ? Simulator.data.length : 0);\r\n    }\r\n\r\n    get trendLineY(){\r\n        return this._trendLineY;\r\n    }\r\n}\r\n\r\nexport default new GraphData();","import React from \"react\";\r\nimport { Row, Col, Form, FormGroup, Modal, ModalBody, ModalHeader, Dropdown, DropdownItem, DropdownMenu, DropdownToggle, Button } from \"reactstrap\";\r\nimport Simulator from \"../Simulator\";\r\nimport ParamStorage from \"../ParamStorage\";\r\nimport { NumSlider } from \"./NumSlider\";\r\nimport preset from \"../preset\"\r\nimport GraphData from \"../GraphData\";\r\n\r\n// input range constraints (min, max, step)\r\nexport const INPUT_RANGES = {\r\n    INFECTION_LENGTH:   [1, 365, 1],\r\n    TRANSMISSION_RATE:  [0, 20, 0.01],\r\n    VIRULENCE:          [0, 1, 0.001],\r\n    INITIAL_POPULATION: [1, 1000000, 1],\r\n    IMMUNE_PERCENT:     [0, 1, 0.01],\r\n    INITIAL_INFECTED:   [0, 1000000, 1],\r\n    SIMULATION_LENGTH:  [1, 365, 1]\r\n};\r\n\r\nexport class Inputs extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        // input refs\r\n        this.intialImmunityRef = React.createRef();\r\n        this.transmissionRef = React.createRef();\r\n        this.virulenceRef = React.createRef();\r\n        this.initialInfectedRef = React.createRef();\r\n        this.intialPopRef = React.createRef();\r\n        this.infectionLengthRef = React.createRef();\r\n        this.daysRef = React.createRef();\r\n        this.presetRef = React.createRef();\r\n\r\n        // export refs\r\n        this.exportUrlRef = React.createRef();\r\n\r\n        this.state = {\r\n            pending: false,         // no new requests while pending (disable buttons)\r\n            message: null,          // message to display (errors)\r\n            isDisabled: false,      // to disable/enable fields depending on what preset is selected\r\n            exportModal: false,     // export options modal visibility\r\n            exportOption: null,\r\n            exportDropdown: false\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        Simulator.on(\"load\", this.onSimulatorLoad.bind(this));\r\n        Simulator.on(\"error\", this.onSimulatorError.bind(this));\r\n\r\n        // query string params?\r\n        this.extractQueryStringParams();\r\n\r\n        // test values?\r\n        if(new URLSearchParams(window.location.search).get(\"test\") === \"true\"){\r\n            this.useTestValues();\r\n        }\r\n    }\r\n    \r\n    // extracts optional query string parameters from the query string\r\n    extractQueryStringParams(){\r\n        // get query string data\r\n        let qs = new URLSearchParams(window.location.search);\r\n\r\n        // extract values from query string - set to the number value or default to min\r\n        // (setting value to below min will result in min)\r\n        this.initialInfectedRef.current.value = parseInt(qs.get(\"initial_infected\")) || -1;\r\n        this.intialImmunityRef.current.value =  parseFloat(qs.get(\"immune_percent\")) || -1;\r\n        this.intialPopRef.current.value =       parseInt(qs.get(\"initial_population\")) || -1;\r\n        this.virulenceRef.current.value =       parseFloat(qs.get(\"virulence\")) || -1;\r\n        this.daysRef.current.value =            parseInt(qs.get(\"simulation_length\")) || -1;\r\n        this.infectionLengthRef.current.value = parseInt(qs.get(\"infection_length\")) || -1;\r\n        this.transmissionRef.current.value =    parseFloat(qs.get(\"transmission_rate\")) || -1;\r\n    }\r\n\r\n    // changes the input parameters to predefined test values\r\n    useTestValues(){\r\n        // set values\r\n        this.initialInfectedRef.current.value = 500;\r\n        this.intialImmunityRef.current.value = 0.10;\r\n        this.intialPopRef.current.value = 1000000;\r\n        this.virulenceRef.current.value = 0.25;\r\n        this.daysRef.current.value = 365;\r\n        this.infectionLengthRef.current.value = 100;\r\n        this.transmissionRef.current.value = 0.2;\r\n\r\n        // force save\r\n        ParamStorage.saveParamsInputsDict(this.getInputsDictionary());\r\n    }\r\n\r\n    // creates a dictionary of all the inputs and their values (names formatted for the API call) \r\n    getInputsDictionary(){\r\n        // extract data from inputs to use in query string \r\n        let immune_percent =        this.intialImmunityRef.current.value,\r\n            transmission_rate =     this.transmissionRef.current.value,\r\n            virulence =             this.virulenceRef.current.value,\r\n            initial_infected =      this.initialInfectedRef.current.value,\r\n            initial_population =    this.intialPopRef.current.value,\r\n            infection_length =      this.infectionLengthRef.current.value,\r\n            simulation_length =     this.daysRef.current.value,\r\n            preset =                this.presetRef.current.value;\r\n\r\n        // make sure infected <= population\r\n        initial_infected = Math.min(initial_infected, initial_population);\r\n\r\n        // make sure immune percent is <= healthy population\r\n        let healthy = (initial_population - initial_infected) / initial_population;\r\n        immune_percent = Math.min(immune_percent, healthy);\r\n\r\n        // MUST match API expectations! \r\n        return {immune_percent, transmission_rate, virulence, initial_infected, initial_population, infection_length, simulation_length, preset};\r\n    }\r\n\r\n    onSimulatorError(){\r\n        this.setState({pending: false});    // enable buttons\r\n    }\r\n\r\n    onSimulatorLoad(){\r\n        this.setState({pending: false});    // enable buttons\r\n    }\r\n\r\n    // called when then the reset button is clicked\r\n    onReset(){\r\n        // cleared stored simulation data\r\n        Simulator.reset();\r\n    }\r\n\r\n    // downloads the csv file\r\n    downloadCSV(){\r\n        if(!this.state.pending){\r\n            // disable buttons\r\n            this.setState({pending: true});\r\n\r\n            Simulator.downloadCSVFile(this.getInputsDictionary())\r\n                .catch(err => {\r\n                    // something went wrong (server did not respond or bad request)\r\n                    this.setState({message: err.message});\r\n                })\r\n                .then(() => {\r\n                    // (this fires when any response happens not successful only!)\r\n                    // always enable buttons\r\n                    this.setState({pending: false})\r\n                });\r\n        }\r\n    }\r\n\r\n    runSimulation(){\r\n        // no simulation data - load it (first simulation or reset happened)\r\n        if(!Simulator.hasData){\r\n            // disable buttons for loading time\r\n            this.setState({pending: true});\r\n\r\n            // load data then auto run\r\n            Simulator.load(this.getInputsDictionary())\r\n                .then(() => {\r\n                    this.setState({message: null}); // remove possible err message\r\n\r\n                    ParamStorage.saveParamsInputsDict(this.getInputsDictionary());  // save parameters\r\n                })\r\n                .catch(err => this.setState({message: err.message}));\r\n        }\r\n        else{\r\n            // verify current parameters are not the same as the ones already run\r\n            // (prevents reloading data that we already have!)\r\n            let currParams = ParamStorage.convertToTitleCase(this.getInputsDictionary());\r\n\r\n            if(ParamStorage.paramsNotLastSave(currParams)){\r\n                // parameters are different than last time\r\n                // run new simulation\r\n                Simulator.reset();      // triggers clearing graph/table and clears data\r\n                this.runSimulation();   // runs again, but sim will have no data\r\n            }\r\n        }\r\n    }\r\n\r\n    // called when the form is 'submitted'\r\n    // entire purpose is to block the sending of the form\r\n    // (submit enforces 'required', 'min', 'max' constraints)\r\n    onSubmit(evt){\r\n        // no default submission (using ajax instead)\r\n        evt.preventDefault();\r\n\r\n        this.runSimulation();\r\n    }\r\n\r\n    onPresetChange(){\r\n        let value = this.presetRef.current.value;\r\n        \r\n        if(value !== \"Custom\"){\r\n            this.setState({isDisabled: true});\r\n            this.infectionLengthRef.current.value = preset[value][\"Infection Length\"];\r\n            this.transmissionRef.current.value = preset[value][\"Transmission\"];\r\n            this.virulenceRef.current.value = preset[value][\"Virulence\"]\r\n        }else{\r\n            this.setState({isDisabled: false});\r\n        }\r\n    }\r\n\r\n    toggleExportModal(){\r\n        this.setState(prev => ({exportModal: !prev.exportModal}));\r\n    }\r\n\r\n    toggleExportDropdown(){\r\n        this.setState(prev => ({exportDropdown: !prev.exportDropdown}));\r\n    }\r\n\r\n    // moves the parameter storage day & updates UI inputs\r\n    switchParamSet(direction){\r\n        // move the day\r\n        if(direction === \"backwards\"){\r\n            ParamStorage.stepBackwards();\r\n        }\r\n        else if(direction === \"forwards\"){\r\n            ParamStorage.stepForwards();\r\n        }\r\n        else throw new Error(\"Parameter switch direction must be 'forwards' or 'backwards'.\");\r\n\r\n        // bail if nothing already saved\r\n        let params = ParamStorage.currentParams || null;\r\n        if(!params) return; // nothing saved\r\n\r\n        // fill out UI form\r\n        this.infectionLengthRef.current.value = params.infectionLength;\r\n        this.transmissionRef.current.value = params.transmissionRate;\r\n        this.virulenceRef.current.value = params.virulence;\r\n        this.intialPopRef.current.value = params.initialPopulation;\r\n        this.intialImmunityRef.current.value = params.immunePercent;\r\n        this.initialInfectedRef.current.value = params.initialInfected;\r\n        this.daysRef.current.value = params.simulationLength;\r\n\r\n        this.presetRef.current.value = params.preset;\r\n        this.onPresetChange();\r\n    }\r\n\r\n    getExportURL(){\r\n        let dict = this.getInputsDictionary();\r\n\r\n        let url = `${window.location.origin}?`;\r\n\r\n        for(let param in dict){\r\n            url += `${param}=${dict[param]}&`;\r\n        }\r\n\r\n        url += `trend_line=${GraphData.trendLineY}`;\r\n\r\n        return url;\r\n    }\r\n\r\n    copyLinkText(){\r\n        let elem = this.exportUrlRef.current;\r\n        if(elem){\r\n            elem.select();\r\n            document.execCommand(\"copy\");\r\n        }\r\n    }\r\n\r\n    renderExportOptBody(){\r\n        if(this.state.exportOption === \"csv\"){\r\n            return (\r\n                <div>\r\n                    <div>\r\n                        Exports a comma separated value (.csv) file containing the results displayed in the table.\r\n                        This file is easily accesible in Excel. \r\n                    </div>\r\n                    <br/>\r\n                    <div>\r\n                        <Button color=\"fade\" onClick={this.downloadCSV.bind(this)}>Download CSV</Button>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        else if(this.state.exportOption === \"sim-link\"){\r\n            return (\r\n                <div>\r\n                    <div>\r\n                        Exports a URL for this application with preset values that can be shared.\r\n                    </div>\r\n                    <br/>\r\n                    <div>\r\n                        <textarea ref={this.exportUrlRef} className=\"modal-url-text\" defaultValue={this.getExportURL()} readOnly>\r\n                        </textarea>\r\n                    </div>\r\n                    <br/>\r\n                    <div>\r\n                        <Button color=\"fade\" onClick={this.copyLinkText.bind(this)}>Copy Link</Button>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        return (\r\n            <div>\r\n                Please select an export option.\r\n            </div>\r\n        )\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <div id=\"inputs-header-container\" className=\"text-center\">\r\n                    <button onClick={() => this.switchParamSet(\"backwards\")}>&larr;</button>\r\n                    <h5 className=\"text-center\">Experimental Variables</h5>\r\n                    <button onClick={() => this.switchParamSet(\"forwards\")}>&rarr;</button>\r\n                </div>\r\n                <br/>\r\n                <form onSubmit={this.onSubmit.bind(this)}>\r\n                    <div className=\"row\">\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <NumSlider\r\n                                label={\"Length of Infection (Days)\"}\r\n                                showRange={true}\r\n                                min={INPUT_RANGES.INFECTION_LENGTH[0]}\r\n                                max={INPUT_RANGES.INFECTION_LENGTH[1]}\r\n                                step={INPUT_RANGES.INFECTION_LENGTH[2]}\r\n                                required={true}\r\n                                ref={this.infectionLengthRef}\r\n                                disabled={this.state.isDisabled}\r\n                            />\r\n                        </div>\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <NumSlider\r\n                                label={\"Transmission Rate\"}\r\n                                showRange={true}\r\n                                min={INPUT_RANGES.TRANSMISSION_RATE[0]}\r\n                                max={INPUT_RANGES.TRANSMISSION_RATE[1]}\r\n                                step={INPUT_RANGES.TRANSMISSION_RATE[2]}\r\n                                required={true}\r\n                                ref={this.transmissionRef}\r\n                                disabled={this.state.isDisabled}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <NumSlider\r\n                                label={\"Virulence\"}\r\n                                showRange={true}\r\n                                min={INPUT_RANGES.VIRULENCE[0]}\r\n                                max={INPUT_RANGES.VIRULENCE[1]}\r\n                                step={INPUT_RANGES.VIRULENCE[2]}\r\n                                required={true}\r\n                                ref={this.virulenceRef}\r\n                                disabled={this.state.isDisabled}\r\n                            />\r\n                        </div>\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <NumSlider\r\n                                label={\"Initial Population\"}\r\n                                showRange={true}\r\n                                min={INPUT_RANGES.INITIAL_POPULATION[0]}\r\n                                max={INPUT_RANGES.INITIAL_POPULATION[1]}\r\n                                step={INPUT_RANGES.INITIAL_POPULATION[2]}\r\n                                required={true}\r\n                                ref={this.intialPopRef}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <NumSlider\r\n                                label={\"Initial Immunity Percent\"}\r\n                                showRange={true}\r\n                                min={INPUT_RANGES.IMMUNE_PERCENT[0]}\r\n                                max={INPUT_RANGES.IMMUNE_PERCENT[1]}\r\n                                step={INPUT_RANGES.IMMUNE_PERCENT[2]}\r\n                                required={true}\r\n                                ref={this.intialImmunityRef}\r\n                            />\r\n                        </div>\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <NumSlider\r\n                                label={\"Initial Infected\"}\r\n                                showRange={true}\r\n                                min={INPUT_RANGES.INITIAL_INFECTED[0]}\r\n                                max={INPUT_RANGES.INITIAL_INFECTED[1]}\r\n                                step={INPUT_RANGES.INITIAL_INFECTED[2]}\r\n                                maxText={\"Population\"}\r\n                                required={true}\r\n                                ref={this.initialInfectedRef}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <NumSlider\r\n                                label={\"Simulation Length (Days)\"}\r\n                                showRange={true}\r\n                                min={INPUT_RANGES.SIMULATION_LENGTH[0]}\r\n                                max={INPUT_RANGES.SIMULATION_LENGTH[1]}\r\n                                step={INPUT_RANGES.SIMULATION_LENGTH[2]}\r\n                                required={true}\r\n                                ref={this.daysRef}\r\n                            />\r\n                        </div>\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <label>Presets:</label>\r\n                            <select ref={this.presetRef} className=\"form-control\" onChange={this.onPresetChange.bind(this)}>\r\n                                <option>Custom</option>\r\n                                <option>Seasonal Flu</option>\r\n                                <option>Smallpox</option>\r\n                                <option>Polio</option>\r\n                                <option>Measles</option>\r\n                                <option>Ebola</option>\r\n                                <option>H1N1 Flu</option>\r\n                                <option>H5N1 Flu</option>\r\n                                <option>1918 Flu</option>\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group text-center\">\r\n                        <button className=\"input-btn\" disabled={this.state.pending}>Run</button>&nbsp;\r\n                        <button onClick={this.onReset.bind(this)} className=\"input-btn\" disabled={this.state.pending} type=\"button\" >Reset</button>&nbsp;\r\n                        <button onClick={this.toggleExportModal.bind(this)} className=\"input-btn\" disabled={this.state.pending} type=\"button\" >Exports</button>\r\n                    </div>\r\n                </form>\r\n                <div>{this.state.message}</div>\r\n                <Modal isOpen={this.state.exportModal}>\r\n                    <ModalHeader toggle={this.toggleExportModal.bind(this)}>\r\n                        <Dropdown isOpen={this.state.exportDropdown} toggle={this.toggleExportDropdown.bind(this)}>\r\n                            <DropdownToggle color=\"fade\" caret>\r\n                                Export Options\r\n                            </DropdownToggle>\r\n                            <DropdownMenu>\r\n                                <DropdownItem onClick={() => this.setState({exportOption: \"csv\"})}>\r\n                                    Table CSV\r\n                                </DropdownItem>\r\n                                <DropdownItem onClick={() => this.setState({exportOption: \"sim-link\"})}>\r\n                                    Simulation Link\r\n                                </DropdownItem>\r\n                            </DropdownMenu>\r\n                        </Dropdown>\r\n                    </ModalHeader>\r\n                    <ModalBody>\r\n                        <div>\r\n                            {this.renderExportOptBody()}\r\n                        </div>\r\n                    </ModalBody>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport ReactModal from \"react-modal\"\r\nimport { Ajax } from \"../Ajax\";\r\n\r\nexport class MailModal extends React.Component{\r\n\r\n\tconstructor(props){\r\n        super(props);\r\n\r\n        // input refs\r\n        this.textRef = React.createRef();\r\n        this.errorRef = React.createRef();\r\n        this.headerRef = React.createRef();\r\n\r\n        this.type = null;\r\n        this.typeError = true;\r\n        this.errorTime = false;\r\n        this.errorMsg = \"\";\r\n\r\n        this.state = { \r\n\t\t\tother: false,\r\n\t\t\terrMessage:null,\r\n\t\t\tsuccessMessage:null,\r\n\t\t\tdisabled: false\r\n        };\r\n\r\n        //Modal.setAppElement(this.props.app);\r\n\t}\r\n\r\n\tcomponentDidUpdate(prevProps){\r\n\t\t// clear messages when the visibility changes\r\n\t\tif(prevProps.showModal && !this.props.showModal){\r\n\t\t\tthis.setState({errMessage: null, successMessage: null});\r\n\t\t}\r\n\t}\r\n\r\n\t// on click of submit button \r\n\tsubmitClick(e){\r\n\t\tthis.setState({errMessage:null});\r\n\t\te.preventDefault();\r\n\t\tlet goodHeader = this.headerRef.current ? (this.headerRef.current.value.length > 0) : true;\r\n\t\tif(this.type != null && this.textRef.current.value != \"\" && goodHeader){\r\n\t\t\tlet message = this.BuildArray();\r\n\r\n\t\t\t// localhost = dev, else = prod\r\n\t\t\tlet origin = window.location.origin.includes(\"localhost\") ? \"http://localhost:8080\" : window.location.origin;\r\n\r\n\t\t\t// sending message, disable send button\r\n\t\t\tthis.setState({successMessage: \"Sending...\", errMessage: null, disabled: true});\r\n\r\n\t\t\tAjax.post(`${origin}/mail`, null, message)\r\n\t\t\t\t.then(xhr => {  \r\n                    // ajax resolved (could be bad/good request, but server responded)\r\n                    if(xhr.status === 200){\r\n\t\t\t\t\t\t// good request - attempt to parse results json\r\n\t\t\t\t\t\tthis.setState({successMessage:\"Submit Successful\", errMessage: null, disabled: false});\r\n                    }\r\n                    else{\r\n\t\t\t\t\t\t// bad request\r\n\t\t\t\t\t\tthis.setState({errMessage:\"Bad Request Error\", successMessage: null, disabled: false});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\t// clear inputs\r\n\t\t\t\t\tif(this.headerRef.current){\r\n\t\t\t\t\t\tthis.headerRef.current.value = \"\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.textRef.current.value = \"\";\r\n                })\r\n                .catch(err => {\r\n                    // ajax request died (really bad NOT a 400 error!)\r\n\t\t\t\t\tthis.setState({errMessage:\"Cannot reach server\", disabled: false});// request died signal\r\n                });\r\n\t\t}\r\n\t}\r\n\t\r\n\t//Build the JSON array that is sent over the Ajax request\r\n\tBuildArray(){\r\n\t\t//get the text in the the message textarea\r\n\t\tlet text = this.textRef.current.value;\r\n\t\t//\r\n        let type = \"\";\r\n\r\n        if(this.state.other){\r\n        \ttype = this.headerRef.current.value;\r\n        }else{\r\n        \ttype = this.type;\r\n        }\r\n\r\n        // MUST match API expectations! \r\n        return {type,text};\r\n    }\r\n\r\n\t// on change of radio button set type\r\n\tonTypeSelect(type){\r\n\t\t//get the type of the radio button selected\r\n\t \tthis.type = type;\r\n\r\n\t\t// check to see if other is selected\r\n\t\tthis.setState({other: this.type === \"other\"});\r\n\r\n\t \tthis.typeError = false;\r\n\t }\r\n\r\n\t //Check if other is selcted and load elements based on that\r\n \t TypeOther(){\r\n\t \tif(!this.state.other){\r\n\t\t\t // remove element of screen\r\n\t \t\treturn null;\r\n\t \t}else{\r\n\t\t\t //load element onto screen\r\n\t \t\treturn(\r\n\t \t\t\t<div>\r\n\t \t\t\t\t<label>Other: </label> <input type=\"text\" placeholder=\"Input for other\" ref={this.headerRef} required/>\r\n\t \t\t\t</div>\r\n\t \t\t);\r\n\t \t}\r\n\t }\r\n\t \r\n\trender(){\r\n\t\treturn this.props.showModal ? (\r\n\t\t\t<div>\r\n\t\t\t\t<ReactModal isOpen={this.props.showModal} >\r\n\t\t\t\t\t<div className=\"col-lg-1\">\r\n\t\t\t  \t\t\t<span className=\"pointer\" onClick={this.props.closeModal}>&times;</span>\r\n\t\t\t  \t\t</div>\r\n\t\t\t  \t\t<div className=\"container border\">\r\n\t\t\t\t\t  <form onSubmit={this.submitClick.bind(this)}>\r\n\t\t\t\t\t  \t\t<div>\r\n\t\t\t\t\t\t\t\t<div className=\"header center\">\r\n\t\t\t\t\t\t\t\t\t<h2 className=\"modalHeader\">Contact Us</h2>\r\n\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t<span className=\"error\">\r\n\t\t\t\t\t\t\t\t\t\t{this.state.errMessage}\r\n\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t\t<span className=\"success\">\r\n\t\t\t\t\t\t\t\t\t\t{this.state.successMessage}\r\n\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div className=\"form-group center\">\r\n\t\t\t\t\t\t\t\t\t<input type=\"radio\" onChange={() => this.onTypeSelect(\"Bug Report\")} name=\"types\" value=\"problem\" required/>Have a problem?\r\n\t\t\t\t\t\t\t\t\t&nbsp;\r\n\t\t\t\t\t\t\t\t\t<input type=\"radio\" onChange={() => this.onTypeSelect(\"Feature Request\")} name=\"types\" value=\"idea\" required/>Have an idea?\r\n\t\t\t\t\t\t\t\t\t&nbsp;\r\n\t\t\t\t\t\t\t\t\t<input type=\"radio\" onChange={() => this.onTypeSelect(\"other\")} name=\"types\" value=\"other\" required/>Other\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div className=\"form-group center\">\r\n\t\t\t\t\t\t\t\t\t{this.TypeOther()}\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div className=\"form-group center\">\r\n\t\t\t\t\t\t\t\t\t<textarea className=\"modal-text-area\" placeholder=\"Type message in here.\" ref={this.textRef} required></textarea>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div className=\"form-group center\">\r\n\t\t\t\t\t\t\t\t\t<input className=\"input-btn\" type=\"submit\" disabled={this.state.disabled} />\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</form>\r\n\t\t\t\t\t</div>\r\n      \t\t\t</ReactModal>\r\n\t\t\t</div>\r\n\t\t) : null;\r\n\t}\r\n}","import React from \"react\";\r\nimport { Dropdown, DropdownToggle, DropdownMenu, DropdownItem, Navbar as RNavbar, NavItem, Collapse, NavbarToggler, Nav, NavLink } from \"reactstrap\";\r\nimport { MailModal } from \"./MailModal\"\r\nimport Simulator from \"../Simulator\";\r\n\r\nexport class Navbar extends React.Component{\r\n\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\r\n\t    this.state = {\r\n\t\t\tshowNav: false,\t\t\t// navbar collapse\r\n\t\t\tshowModal: false,\t\t// mail modal visibility\r\n\t\t\tshowAdvanced: false\t\t// advanced dropdown menu visibility\r\n\t    };\r\n\r\n\t}\r\n\r\n\t// close the mail modal\r\n\tcloseModal(){\r\n\t\tthis.setState({showModal: false});\r\n\t}\r\n\r\n\t// show the mail modal\r\n\topenModal(){\r\n\t\tthis.setState({showModal: true});\r\n\t}\r\n\r\n\t// toggles the navbar collapse state\r\n\ttoggleNavbar(){\r\n\t\tthis.setState(prev => ({showNav: !prev.showNav}));\r\n\t}\r\n\r\n\t// toggle advanced dropdown\r\n\ttoggleDropdown(){\r\n\t\tthis.setState(prev => ({showAdvanced: !prev.showAdvanced}));\r\n\t}\r\n\r\n\t// advanced dropdown error correction option toggle\r\n\ttoggleErrorCorrection(){\r\n\t\tSimulator.isErrCorrecting = !Simulator.isErrCorrecting;\r\n\t}\r\n\r\n\trender(){\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<RNavbar color=\"light\" light expand=\"md\">\r\n\t\t\t\t\t<NavbarToggler color=\"dark\" onClick={this.toggleNavbar.bind(this)}/>\r\n\t\t\t\t\t<Collapse isOpen={this.state.showNav} navbar>\r\n\t\t\t\t\t\t<Nav navbar>\r\n\t\t\t\t\t\t\t<NavItem>\r\n\t\t\t\t\t\t\t\t<NavLink  className=\"pointer\" selected onClick={this.openModal.bind(this)}>Contact Us</NavLink>\r\n\t\t\t\t\t\t\t</NavItem>\r\n\t\t\t\t\t\t\t<NavItem>\r\n\t\t\t\t\t\t\t\t<Dropdown isOpen={this.state.showAdvanced} toggle={this.toggleDropdown.bind(this)}>\r\n\t\t\t\t\t\t\t\t\t\t<DropdownToggle caret color=\"light\">\r\n\t\t\t\t\t\t\t\t\t\t\tAdvanced\r\n\t\t\t\t\t\t\t\t\t\t</DropdownToggle>\r\n\t\t\t\t\t\t\t\t\t\t<DropdownMenu>\r\n\t\t\t\t\t\t\t\t\t\t\t<DropdownItem onClick={this.toggleErrorCorrection.bind(this)}>\r\n\t\t\t\t\t\t\t\t\t\t\t\tToggle Error Correction (Currently {Simulator.isErrCorrecting ? \"Enabled\" : \"Disabled\"})\r\n\t\t\t\t\t\t\t\t\t\t\t</DropdownItem>\r\n\t\t\t\t\t\t\t\t\t\t</DropdownMenu>\r\n\t\t\t\t\t\t\t\t\t</Dropdown>\r\n\t\t\t\t\t\t\t</NavItem>\r\n\t\t\t\t\t\t</Nav>\r\n\t\t\t\t\t</Collapse>\r\n\t\t\t\t</RNavbar>\r\n\t\t\t\t<MailModal showModal={this.state.showModal} closeModal={this.closeModal.bind(this)} />\r\n\t      \t</div>\r\n\t\t);\r\n\t}\r\n}","import React from \"react\";\r\nimport Simulator from \"../Simulator\";\r\n\r\nexport class Table extends React.Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\tvisible: false\t//true/false if simulator data to render\r\n\t\t};\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\t// simulator singles data set loaded - render data\r\n\t\tSimulator.on(\"data\", () => this.setState({visible: true}));\r\n\r\n\t\t// simulator signals a reset - nothing to render\r\n\t\tSimulator.on(\"reset\", () => this.setState({visible: false}));\r\n\t}\r\n\r\n\r\n\tgetStyleForDay(index){\r\n\t\tlet style = null;\r\n\r\n\t\tif(Simulator.firstInvalidDay > -1){\r\n\t\t\tif(index === Simulator.firstInvalidDay){\r\n\t\t\t\t// this row is first invalid day\r\n\t\t\t\tstyle = {\r\n\t\t\t\t\tborderLeft: \"5px solid red\",\r\n\t\t\t\t\tborderRight: \"5px solid red\"\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\telse if(index > Simulator.firstInvalidDay){\r\n\t\t\t\t// subsequent invalid days\r\n\t\t\t\tstyle = {\r\n\t\t\t\t\tborderLeft: \"1px solid red\",\r\n\t\t\t\t\tborderRight: \"1px solid red\"\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t}\t\t\r\n\r\n\t\treturn style;\r\n\t}\r\n\r\n\t// renders table rows up to the current simulation day\r\n\trenderRows(){\r\n\t\tlet data = Simulator.data;\r\n\r\n\t\tif(data){\r\n\t\t\tlet rows = new Array(data.length + 1);\r\n\r\n\t\t\tdata.forEach((dayData, index) => {\r\n\t\t\t\t// extract data\r\n\t\t\t\tlet susceptible = \tMath.round(dayData.Susceptible),\r\n\t\t\t\t\tinfected = \t\tMath.round(dayData.Infected),\r\n\t\t\t\t\timmune = \t\tMath.round(dayData.Immune),\r\n\t\t\t\t\tdead = \t\t\tMath.round(dayData.Dead),\r\n\t\t\t\t\tpopulation = \tMath.round(dayData.TotalPopulation);\r\n\r\n\t\t\t\t// get the style (for data correction)\r\n\t\t\t\tlet style = this.getStyleForDay(index);\r\n\r\n\t\t\t\t// create table row\r\n\t\t\t\t// (toLocalString adds the ',' as the number grows in thousands)\r\n\t\t\t\trows[index] = (\r\n\t\t\t\t\t<tr key={index} style={style}>\r\n\t\t\t\t\t\t<td>{index}</td>\r\n\t\t\t\t\t\t<td>{susceptible.toLocaleString()}</td>\r\n\t\t\t\t\t\t<td>{infected.toLocaleString()}</td>\r\n\t\t\t\t\t\t<td>{immune.toLocaleString()}</td>\r\n\t\t\t\t\t\t<td>{dead.toLocaleString()}</td>\r\n\t\t\t\t\t\t<td>{population.toLocaleString()}</td>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t);\r\n\t\t\t});\r\n\r\n\t\t\treturn rows;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n\r\n\trender(){\r\n\t\treturn this.state.visible ? (\r\n\t\t\t<div>\r\n\t\t\t\t<table className=\"table table-striped overflow-table\">\r\n\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t<th>Day</th>\r\n\t\t\t\t\t\t\t<th>Susceptible</th>\r\n\t\t\t\t\t\t\t<th>Infected</th>\r\n\t\t\t\t\t\t\t<th>Immune</th>\r\n\t\t\t\t\t\t\t<th>Dead</th>\r\n\t\t\t\t\t\t\t<th>Total Population</th>\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t</thead>\r\n\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t{this.renderRows()}\r\n\t\t\t\t\t</tbody>\r\n\t\t\t\t</table>\r\n\t\t\t\t<div className=\"text-center\">\r\n\t\t\t\t\t{Simulator.firstInvalidDay > -1 ? `* Error correction begins on day ${Simulator.firstInvalidDay} *` : null}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t) : null;\r\n\t}\r\n}","import \"./GraphRange.css\"\r\nimport React from \"react\";\r\nimport GraphData from \"../GraphData\";\r\n\r\nexport class GraphRange extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.lowerRef = React.createRef();\r\n        this.upperRef = React.createRef();\r\n    }\r\n\r\n    onChangeLow(){\r\n        let lowValue = this.lowerRef.current.value,\r\n            low = parseInt(lowValue);\r\n\r\n        if(lowValue.length){\r\n            let high = this.selectedMax || this.props.max;\r\n\r\n            low = Math.max(this.props.min, low);\r\n            low = Math.min(low, high - 1);\r\n\r\n            this.lowerRef.current.value = low;\r\n\r\n            GraphData.startDay = low;\r\n        }\r\n    }\r\n\r\n    onChangeHigh(){\r\n        let highValue = this.upperRef.current.value,\r\n            high = parseInt(highValue);\r\n\r\n        if(highValue.length){\r\n            let low = this.selectedMin || this.props.min;\r\n\r\n            high = Math.max(low + 1, high);\r\n            high = Math.min(high, this.props.max);\r\n\r\n            this.upperRef.current.value = high;\r\n\r\n            GraphData.endDay = high;\r\n        }\r\n    }\r\n\r\n    onSubmit(evt){\r\n        evt.preventDefault();\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"graph-range-container\">\r\n                <form onSubmit={this.onSubmit.bind(this)}>\r\n                    <input\r\n                        ref={this.lowerRef}\r\n                        min={this.props.min}\r\n                        max={this.props.max}\r\n                        step={1}\r\n                        defaultValue={this.props.min}\r\n                        placeholder=\"Start\"\r\n                        type=\"number\"\r\n                        required\r\n                        onChange={this.onChangeLow.bind(this)}\r\n                    />&nbsp;\r\n                    <input\r\n                        ref={this.upperRef}\r\n                        min={this.props.min}\r\n                        max={this.props.max}\r\n                        step={1}\r\n                        defaultValue={this.props.max}\r\n                        placeholder=\"End\"\r\n                        type=\"number\"\r\n                        required\r\n                        onChange={this.onChangeHigh.bind(this)}\r\n                    />\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    get selectedMin(){\r\n        return parseFloat(this.lowerRef.current.value) || this.props.min;\r\n    }\r\n\r\n    get selectedMax(){\r\n        return parseFloat(this.upperRef.current.value) || this.props.max;\r\n    }\r\n}","import \"./TrendLine.css\";\r\nimport React from \"react\";\r\nimport GraphData from \"../GraphData\";\r\n\r\nexport class TrendLine extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.rangeRef = React.createRef();\r\n        this.numRef = React.createRef();\r\n    }\r\n\r\n    onSlide(){\r\n        let val = this.rangeRef.current.value;\r\n        GraphData.trendLineY = parseInt(val);\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"trend-line-container\">\r\n                <input\r\n                    className=\"trend-slider\"\r\n                    ref={this.rangeRef}\r\n                    type=\"range\"\r\n                    min={this.props.min || 0}\r\n                    max={this.props.max}\r\n                    step={100}\r\n                    defaultValue={this.props.defaultValue || 0}\r\n                    onChange={this.onSlide.bind(this)}\r\n                />\r\n                <div className=\"trend-line-text\">\r\n                    Trend Line\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    get value(){\r\n        return this.rangeRef.current.value;\r\n    }\r\n}","import React from \"react\";\r\nimport { LineChart } from \"react-easy-chart\"\r\nimport Simulator from \"../Simulator\";\r\nimport GraphData from \"../GraphData\";\r\nimport { GraphRange } from \"./GraphRange\";\r\nimport { TrendLine } from \"./TrendLine\";\r\n\r\n// graph size constants\r\nconst WIDTH = \t\t540,\r\n\tHEIGHT = \t\t475,\r\n\tMARGIN_TOP = \t10,\r\n\tMARGIN_BOTTOM =\t50,\r\n\tMARGIN_LEFT = \t80,\r\n\tMARGIN_RIGHT = \t10;\r\n\r\n// graph line colors\r\nconst COLORS = {\r\n\t\"Infected\": \t\"green\",\r\n\t\"Susceptible\": \t\"red\",\r\n\t\"Immune\": \t\t\"steelblue\",\r\n\t\"Dead\": \t\t\"gray\",\r\n\t\"TrendLine\":\t\"black\"\r\n};\r\n\r\nexport class Graph extends React.Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\r\n\t\tthis.graphContainerRef = React.createRef();\r\n\t\t\r\n\t    this.state = {\r\n\t\t\tvisible: false,\t\t\t\t\t\t// true/false if simulator data to render\r\n\t\t\ttooltip: null,\t\t\t\t\t\t// text to display\r\n\t\t\tcontainerWidth: WIDTH,\t\t\t\t// line graph parent width\r\n\t\t\tgraphLabels: {}\t\t\t\t\t\t// selected graph labels (Infected, Susceptible, etc)\r\n\t    };\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\t// auto select infected\r\n\t\tthis.toggleLabel(\"Infected\");\r\n\r\n\t\t// simulator singles data set loaded - render data\r\n\t\tSimulator.on(\"data\", () => this.setState({visible: true}));\r\n\r\n\t\t// simulator reset - nothing to render\r\n\t\tSimulator.on(\"reset\", () => this.setState({visible: false}));\r\n\r\n\t\t// graph update\r\n\t\tGraphData.on(\"update\", () => this.forceUpdate());\r\n\r\n\t\t// when the window size changes - resize the graph if neccessary\r\n\t\twindow.addEventListener(\"resize\", this.onResize.bind(this));\r\n\t\tthis.onResize();\r\n\t}\r\n\r\n\tcomponentDidUpdate(prevProps, prevState){\r\n\t\tif(prevState.yLabel !== this.state.yLabel){\r\n\t\t\tthis.setState({tooltip: null});\r\n\t\t}\r\n\t}\r\n\t\r\n\t// when a label ('Infected', 'Susceptible', etc) is clicked...\r\n\ttoggleLabel(label){\r\n\t\t// copy labels dictionary\r\n\t\tlet nextLabels = Object.assign({}, this.state.graphLabels);\r\n\r\n\t\t// toggle parameter label\r\n\t\tif(label in nextLabels){\r\n\t\t\tnextLabels[label] = !nextLabels[label];\r\n\t\t}\r\n\t\telse{\r\n\t\t\tnextLabels[label] = true;\r\n\t\t}\r\n\r\n\t\t// update state\r\n\t\tthis.setState({graphLabels: nextLabels});\r\n\t}\r\n\r\n\t// when a point on the graph is clicked...\r\n\tonGraphClick(data, evt){\r\n\t\tlet {x, y} = data;\r\n\t\tthis.setState({tooltip: `${Math.round(y)} people on day ${x}.`});\r\n\t}\r\n\r\n    onResize(){\r\n        // updates the state to reflect the maximum size allowed for the graph\r\n        let element = this.graphContainerRef.current;\r\n\t\tif(element){\r\n\t\t\tthis.setState({containerWidth: element.getBoundingClientRect().width});\r\n\t\t}\r\n    }\r\n\r\n\t// renders a simple HTML key for the graph line/colors\r\n\trenderLabelButtons(){\r\n\t\tlet labels = this.state.graphLabels;\r\n\r\n\t\t// border style for button (null = no change)\r\n\t\tlet borders = [\r\n\t\t\t(labels.Infected === true) ? `2px solid ${COLORS.Infected}` : null,\r\n\t\t\t(labels.Susceptible === true) ? `2px solid ${COLORS.Susceptible}` : null,\r\n\t\t\t(labels.Immune === true) ? `2px solid ${COLORS.Immune}` : null,\r\n\t\t\t(labels.Dead === true) ? `2px solid ${COLORS.Dead}` : null\r\n\t\t];\r\n\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<button style={{color: COLORS[\"Infected\"], borderBottom: borders[0]}} onClick={() => this.toggleLabel(\"Infected\")} className=\"pointer graph-button\">Infected</button>\r\n\t\t\t\t<button style={{color: COLORS[\"Susceptible\"], borderBottom: borders[1]}} onClick={() => this.toggleLabel(\"Susceptible\")} className=\"pointer graph-button\">Susceptible</button>\r\n\t\t\t\t<button style={{color: COLORS[\"Immune\"], borderBottom: borders[2]}} onClick={() => this.toggleLabel(\"Immune\") }className=\"pointer graph-button\">Immune</button>\r\n\t\t\t\t<button style={{color: COLORS[\"Dead\"], borderBottom: borders[3]}} onClick={() => this.toggleLabel(\"Dead\")} className=\"pointer graph-button\">Dead</button>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\r\n\t// exports the current svg graph to a jpg file \r\n\tdownloadJPG(){\r\n\t\tlet container = this.graphContainerRef.current;\r\n\t\tif(container){\r\n\t\t\t// get svg element\r\n\t\t\tlet svgElement = container.querySelector(\"svg\");\r\n\r\n\t\t\t// create canvas\r\n\t\t\tlet canvas = document.createElement(\"canvas\");\r\n\t\t\tlet ctx = canvas.getContext(\"2d\");\r\n\r\n\t\t\t// resize canvas to svg\r\n\t\t\tcanvas.width = svgElement.getAttribute(\"width\");\r\n\t\t\tcanvas.height = svgElement.getAttribute(\"height\");\r\n\r\n\t\t\t// convert svg element to xml \r\n\t\t\tlet svgXml = new XMLSerializer().serializeToString(svgElement);\r\n\r\n\t\t\t// create a data url from the svg+xml\r\n\t\t\tlet blob = new Blob([svgXml], {type: \"image/svg+xml\"});\r\n\t\t\tlet svgUrl = window.URL.createObjectURL(blob);\r\n\r\n\t\t\t// create an image to hold the svg data url \r\n\t\t\tlet svgImage = document.createElement(\"img\");\r\n\r\n\t\t\t// when the svgxml image loads...\r\n\t\t\tsvgImage.onload = () => {\r\n\t\t\t\t// draw svg+xml onto canvas\r\n\t\t\t\tctx.imageSmoothingEnabled = true;\r\n\t\t\t\tctx.imageSmoothingQuality = \"high\";\r\n\t\t\t\tctx.drawImage(svgImage, 0, 0);\r\n\r\n\t\t\t\t// remove black background for white \r\n\t\t\t\tctx.globalCompositeOperation = \"destination-over\";\r\n\t\t\t\tctx.fillStyle = \"white\";\r\n\t\t\t\tctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n\t\t\t\t// get jpg data\r\n\t\t\t\tlet jpg = document.createElement(\"img\");\r\n\t\t\t\tjpg.onload = () => {\r\n\t\t\t\t\t// jpg is rasterized svg\r\n\t\t\t\t\t// (implement download here)\r\n\t\t\t\t\t//document.body.appendChild(jpg);\r\n\t\t\t\t\twindow.URL.revokeObjectURL(svgUrl);\r\n\t\t\t\t}\r\n\t\t\t\tjpg.setAttribute(\"src\", canvas.toDataURL(\"image/jpeg\"));\r\n\t\t\t};\r\n\r\n\t\t\t// load the svgxml data\r\n\t\t\tsvgImage.setAttribute(\"src\", svgUrl);\r\n\t\t}\r\n\t}\r\n\r\n\trender(){\r\n\t\tif(this.state.visible){\r\n\t\t\tlet data = GraphData.getData(this.state.graphLabels);\r\n\t\t\tlet dayCount = data.values.length ? data.values[0].length : 0;\r\n\t\t\tlet width = Math.min(this.state.containerWidth, WIDTH);\r\n\r\n\t\t\treturn (\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<h5>{data.labels.join(\" + \") || \"(Nothing Selected)\"}</h5>\r\n\t\t\t\t\t{this.renderLabelButtons()}\r\n\t\t\t\t\t<div ref={this.graphContainerRef}>\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<LineChart\r\n\t\t\t\t\t\t\t\tdata={data.values}\r\n\t\t\t\t\t\t\t\twidth={width}\r\n\t\t\t\t\t\t\t\theight={HEIGHT}\r\n\t\t\t\t\t\t\t\tmargin={{\r\n\t\t\t\t\t\t\t\t\ttop: MARGIN_TOP, bottom: MARGIN_BOTTOM,\r\n\t\t\t\t\t\t\t\t\tleft: MARGIN_LEFT, right: MARGIN_RIGHT\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\taxes\r\n\t\t\t\t\t\t\t\taxisLabels={{x: \"Days Elapsed\", y: \"People\"}}\r\n\t\t\t\t\t\t\t\tdataPoints={dayCount < 0} // enable this later\r\n\t\t\t\t\t\t\t\txDomainRange={[GraphData.startDay, GraphData.endDay]}\r\n\t\t\t\t\t\t\t\tyDomainRange={[0, data.largestY]}\r\n\t\t\t\t\t\t\t\tlineColors={data.labels.map(label => COLORS[label])}\r\n\t\t\t\t\t\t\t\tclickHandler={this.onGraphClick.bind(this)}\r\n\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\t\".label\": {fill: \"black\"},\r\n\t\t\t\t\t\t\t\t\t\".axis\": {fontSize: \"0.75em\", fontFamily: \"arial\"}\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t<TrendLine max={data.largestY}/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<GraphRange\r\n\t\t\t\t\t\t\tmin={0}\r\n\t\t\t\t\t\t\tmax={Simulator.data.length - 1 || 0}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"text-center\">\r\n\t\t\t\t\t\t{this.state.tooltip}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t\treturn <div ref={this.graphContainerRef}></div> // required for resize to work! \r\n\t}\r\n} ","import \"../lib/bootstrap.min.css\";\r\nimport \"./App.css\";\r\nimport React from \"react\";\r\nimport { Container, Row, Col, Card, CardBody } from \"reactstrap\";\r\nimport { Inputs } from \"./Inputs\";\r\nimport { Navbar } from \"./Navbar\";\r\nimport { Table } from \"./Table\";\r\nimport { Graph } from \"./Graph\";\r\n\r\nexport class App extends React.Component{\r\n    render(){\r\n        return (\r\n            <div>\r\n                <Navbar/>\r\n                <br/>\r\n                <span className=\"Version\">V0.2</span>\r\n                <main>\r\n                    <Container>\r\n                        <Card color=\"light\">\r\n                            <CardBody>\r\n                                <Row className=\"text-center\">\r\n                                    <Col lg={6}>\r\n                                        <Inputs/>\r\n                                    </Col>\r\n                                    <Col lg={6}>\r\n                                        <Graph/>\r\n                                    </Col>\r\n                                </Row>\r\n                                <br/>\r\n                                <div>\r\n                                    <Table/>\r\n                                </div>\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Container>\r\n                </main>\r\n                <footer>\r\n                    <Container className=\"text-center\">\r\n                        <hr/>\r\n                        <Row>\r\n                            <Col lg={6}>\r\n                                Juall | Rosenblum | Pojero | Erry \r\n                            </Col>\r\n                            <Col lg={6}>\r\n                                <a href=\"https://opensource.org/licenses/MIT\" target=\"_blank\">MIT License</a>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </footer>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { App } from \"./components/App\";\r\n\r\nReactDOM.render(<App/>, document.querySelector(\"#root\"));"],"sourceRoot":""}