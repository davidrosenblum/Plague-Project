{"version":3,"sources":["Ajax.js","EventEmitter.js","SimulationUpdateEvent.js","Simulator.js","components/NumSlider.jsx","components/Inputs.jsx","components/Modal.jsx","components/Navbar.jsx","components/Chart.jsx","components/Graph.jsx","components/App.jsx","index.js"],"names":["Ajax","Object","classCallCheck","this","createClass","key","value","options","arguments","length","undefined","Promise","resolve","reject","method","url","window","location","origin","headers","query","data","xhr","XMLHttpRequest","h","onload","onerror","err","queryString","open","setRequestHeader","send","JSON","stringify","request","dict","qs","param","concat","substring","EventEmitter","_listeners","event","willTrigger","type","forEach","listener","eventType","push","listeners","i","splice","SimulationUpdateEvent","day","_type","_day","get","src_Simulator","_EventEmitter","Simulator","_this","possibleConstructorReturn","getPrototypeOf","call","_currentDay","inherits","_this2","href","includes","Access-Control-Allow-Origin","then","status","parse","response","emit","Event","Error","catch","currentDay","set","maxDays","hasData","Math","min","NumSlider","_React$Component","props","numRef","React","createRef","rangeRef","current","init","evt","val","target","max","react_default","a","createElement","className","label","showRange","minText","maxText","ref","onChange","onNumber","bind","step","placeholder","required","disabled","onSlide","n","Component","Inputs","intialImmunityRef","transmissionRef","virulenceRef","initialInfectedRef","intialPopRef","infectionLengthRef","daysRef","state","pending","message","lastBtn","isDisabled","on","onSimulatorLoad","onSimulatorError","URLSearchParams","search","immune_percent","transmission_rate","virulence","initial_infected","initial_population","infection_length","simulation_length","setState","reset","nextDay","load","getInputsDictionary","_this3","autoRun","createCSVDownloadURL","link","document","setAttribute","click","preventDefault","dayByDay","downloadCSV","getAttribute","onSubmit","NumSlider_NumSlider","onPresetChange","onClick","onFormClick","btn","onReset","Modal","textRef","errorRef","headerRef","typeError","errorTime","errorMsg","other","errMessage","e","console","log","BuildArray","post","textError","text","lib_default","isOpen","showModal","closeModal","submitClick","t","onTypeSelect","name","TypeOther","rows","cols","Navbar","id","openModal","Modal_Modal","Chart","onSimulatorData","onSimulatorReset","onSimulatorUpdate","Array","_loop","susceptible","round","Susceptible","infected","Infected","immune","Immune","dead","Dead","population","TotalPopulation","setGraphDay","renderRows","Graph","yLabel","onSimulatorUpdateGraph","largestY","values","map","row","index","y","parseFloat","x","slice","getData","onYLabelChange","react_d3_components_lib","axes","width","height","margin","top","bottom","left","right","xAxis","yAxis","App","Navbar_Navbar","Inputs_Inputs","Graph_Graph","Chart_Chart","ReactDOM","render","App_App","querySelector"],"mappings":"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","file":"static/js/main.2f893729.chunk.js","sourcesContent":["export class Ajax{\n    // sends an async http request \n    static request(options={}){\n        return new Promise((resolve, reject) => {\n            // extract config from options object\n            let method = (typeof options.method === \"string\") ? options.method : \"GET\",\n                url = (typeof options.url === \"string\") ? options.url : window.location.origin,\n                headers = (typeof options.headers === \"object\" && options.headers) ? options.headers : {},\n                query = (typeof options.query === \"object\" && options.query) ? options.query : {},\n                data = (typeof options.data !== \"undefined\") ? options.data : null;\n\n            // create the request\n            let xhr = new XMLHttpRequest();\n\n            // attach listeners\n            xhr.onload = () => resolve(xhr);\n            xhr.onerror = err => reject(err);\n\n            // apply query string\n            if(query){\n                url += Ajax.queryString(query);\n            }\n\n            // open the request\n            xhr.open(method, url);\n\n            // apply http headers\n            for(let h in headers){\n                xhr.setRequestHeader(h, headers[h]);\n            }\n\n            // send the request\n            // send JSON if the data is not a string\n            if(data){\n                if(typeof data !== \"string\"){\n                    xhr.send(JSON.stringify(data));\n                }\n                else xhr.send(data);\n            }\n            else xhr.send();\n        });\n    }\n\n    // async http get request\n    static get(url, headers, query){\n        return Ajax.request({method: \"GET\", url, headers, query});\n    }\n\n    // async http post request\n    static post(url, headers, data){\n        return Ajax.request({method: \"POST\", url, headers, data});\n    }\n\n    // creates a query string from an object\n    static queryString(dict){\n        let qs = \"?\";\n\n        for(let param in dict){\n            qs += `${param}=${dict[param]}&`;\n        }\n\n        return qs.substring(0, qs.length - 1);\n    }\n}","// simple event emitter class\nexport class EventEmitter{\n    constructor(){\n        this._listeners = {};   // 'private' dictionary of {eventType: listenerFunction}\n    }\n\n    // triggers all listening functions\n    emit(event){\n        if(this.willTrigger(event.type)){\n            this._listeners[event.type].forEach(listener => listener(event));\n        }\n    }\n\n    // adds a listener\n    on(eventType, listener){\n        if(this.willTrigger(eventType)){\n            this._listeners[eventType].push(listener);\n        }\n        else{\n            this._listeners[eventType] = [listener];\n        }\n    }\n\n    // removes a listener\n    off(eventType, listener){\n        if(this.willTrigger(eventType)){\n            let listeners = this._listeners[eventType];\n\n            for(let i = 0; i < listeners.length; i++){\n                if(listeners[i] === listener){\n                    listeners.splice(i, 1);\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    // checks if there are any listeners for a given type\n    willTrigger(eventType){\n        return eventType in this._listeners;\n    }\n}","// simple event object for simulation updates \nexport class SimulationUpdateEvent{\n    constructor(type, day=null){\n        this._type = type;\n        this._day = day;\n    }\n\n    get type(){\n        return this._type;\n    }\n\n    get day(){\n        return this._day;\n    }\n}","import { Ajax } from \"./Ajax\";\nimport { EventEmitter } from \"./EventEmitter\";\nimport { SimulationUpdateEvent } from \"./SimulationUpdateEvent\";\n\n// singleton for holding simulation data\n// event-driven to keep chart + graph updated\nlet Simulator = class Simulator extends EventEmitter{\n    constructor(){\n        super();\n\n        this.data = null;       // simulation data array\n        this._currentDay = 0;    // 'private' current simulation day\n    }\n\n    // hits the API for data, signals progress\n    // query should be a dictionary of the inputs, will be converted into a query string\n    load(query){\n        return new Promise((resolve, reject) => {\n            // figure out endpoint\n            let url = window.location.href.includes(\"localhost\") ? \"http://localhost:8080/plague\" : `${window.location.origin}/plague`;\n            \n            // CORS headers (use foreign domain)\n            let headers = {\n                \"Access-Control-Allow-Origin\": window.location.origin\n            };\n\n            // ajax call with query string\n            // (null headers)\n            Ajax.get(url, headers, query)\n                .then(xhr => {    \n                    // ajax resolved (could be bad/good request, but server responded)\n                    if(xhr.status === 200){\n                        // good request - attempt to parse results json\n                        try{\n                            // parse json\n                            this.data = JSON.parse(xhr.response);\n                        }\n                        catch(err){\n                            // json parse error (should never happen)\n                            reject(err);\n                            this.emit(new Event(\"error\"));  // server responded with bad request signal\n                        }\n\n                        // done, resolve promise and emit load + data\n                        resolve();\n                        this.emit(new Event(\"load\"));   // server responded with good request signal\n\n                        this.emit(new Event(\"data\"));   // parsed data signal\n                    }\n                    else{\n                        // bad request\n                        reject(new Error(xhr.response || \"Bad request\"));\n                        this.emit(new Event(\"error\"));  // server responded with bad request signal\n                    }\n                })\n                .catch(err => {\n                    // ajax request died (really bad NOT a 400 error!)\n                    reject(err);\n                    this.emit(new Event(\"error\"));  // request died signal\n                });\n        });\n    }\n\n    // async download\n    downloadCSV(query){\n        let url = window.location.href.includes(\"localhost\") ? `http://localhost:8080/plague/csv` : `${window.location.origin}/plague/csv`;\n        return Ajax.get(url, null, query);\n    }\n\n    // csv download url\n    createCSVDownloadURL(query){\n        let qs = Ajax.queryString(query);\n        return window.location.href.includes(\"localhost\") ? `http://localhost:8080/plague/csv${qs}` : `${window.location.origin}/plague/csv${qs}`;\n    }\n\n    // simulation moves to the last day\n    // (triggers listeners)\n    autoRun(){\n        this.currentDay = this.data.length - 1; // auto emits update\n    }\n\n    // steps the simulation forward one day\n    // (triggers listeners)\n    nextDay(){\n        if(this.currentDay < this.data.length){\n            this.currentDay++;  // auto emits update\n        }\n    }\n\n    // resets simulation to day 0 and clears all stored data\n    // (triggers listeners)\n    reset(){\n        this.data = null;\n        this.currentDay = 0;\n        this.emit(new Event(\"reset\"));\n    }\n\n    // updates the graph day \n    setGraphDay(day){\n        this.emit(new SimulationUpdateEvent(\"update-graph\", day));\n    }\n\n    // always emit update\n    set currentDay(day){\n        let maxDays = this.hasData ? (this.data.length - 1) : 0;\n        this._currentDay = Math.min(day, maxDays); \n        this.emit(new SimulationUpdateEvent(\"update\", this.currentDay));\n    }\n\n    get hasData(){\n        return this.data !== null;\n    }\n\n    get currentDay(){\n        return this._currentDay;\n    }\n}\n\n// singleton\nexport default new Simulator();","import \"./NumSlider.css\";\nimport React from \"react\";\n\nexport class NumSlider extends React.Component{\n    constructor(props){\n        super(props);\n\n        this.numRef = React.createRef();\n        this.rangeRef = React.createRef();\n    }\n\n    // mounted - set the default numbers\n    componentDidMount(){\n        this.numRef.current.value = this.props.init || this.props.min;\n        this.rangeRef.current.value = this.props.init || this.props.min;\n    }\n\n    // on text field input\n    onNumber(evt){\n        // set the range value to the number value\n        let val = evt.target.value;\n    \n        if(val.length){\n            // enforce min/max constraints\n            val = Math.min(Math.max(val, this.props.min), this.props.max); \n\n            // update inputs\n            this.numRef.current.value = val;\n            this.rangeRef.current.value = val;\n        }\n        else{\n            // empty input - range at min and number will be empty\n            this.rangeRef.current.value = this.props.min;\n        }\n    }\n\n    // on range bar move\n    onSlide(evt){\n        // set the text value to the number value\n        let val = evt.target.value;\n\n        // enforce min/max constraints \n        val = Math.min(Math.max(val, this.props.min), this.props.max);\n\n        // update number input\n        this.numRef.current.value = val;\n    }\n\n    render(){\n        return (\n            <div className=\"num-slider-container\">\n                <div>\n                    <label>{this.props.label}</label>\n                    {this.props.showRange ? (` ${this.minText}-${this.maxText}`) : null}\n                </div>\n                <div>\n                    <input \n                        ref={this.numRef}\n                        onChange={this.onNumber.bind(this)}\n                        type=\"number\"\n                        min={this.props.min}\n                        max={this.props.max}\n                        step={this.props.step}\n                        placeholder={this.props.placeholder}\n                        required={this.props.required}\n                        disabled={this.props.disabled}\n                    />\n                </div>\n                <div>\n                    <input\n                        ref={this.rangeRef}\n                        onChange={this.onSlide.bind(this)}\n                        type=\"range\"\n                        min={this.props.min}\n                        max={this.props.max}\n                        step={this.props.step}\n                        disabled={this.props.disabled}\n                        className=\"num-slider-slider\"\n                    />\n                </div>\n            </div>\n        );\n    }\n\n    set value(n){\n        this.numRef.current.value = n;\n        this.rangeRef.current.value = n;\n    }\n\n    get minText(){\n        return this.props.minText ? this.props.minText : this.props.min;\n    }\n\n    get maxText(){\n        return this.props.maxText ? this.props.maxText : this.props.max;\n    }\n\n    get value(){\n        return this.numRef.current.value;\n    }\n}","import React from \"react\";\nimport Simulator from \"../Simulator\";\nimport { NumSlider } from \"./NumSlider\";\n\nexport class Inputs extends React.Component{\n    constructor(props){\n        super(props);\n\n        // input refs\n        this.intialImmunityRef = React.createRef();\n        this.transmissionRef = React.createRef();\n        this.virulenceRef = React.createRef();\n        this.initialInfectedRef = React.createRef();\n        this.intialPopRef = React.createRef();\n        this.infectionLengthRef = React.createRef();\n        this.daysRef = React.createRef();\n\n        this.state = {\n            pending: false,         // no new requests while pending (disable buttons)\n            message: null,          // message to display (errors)\n            lastBtn: null,\n            isDisabled: false       // to disable/enable fields depending on what preset is selected\n        };\n    }\n\n    componentDidMount(){\n        Simulator.on(\"load\", this.onSimulatorLoad.bind(this));\n        Simulator.on(\"error\", this.onSimulatorError.bind(this));\n\n        // test values\n        if(new URLSearchParams(window.location.search).get(\"test\") === \"true\"){\n            this.initialInfectedRef.current.value = 500;\n            this.intialImmunityRef.current.value = 0.10;\n            this.intialPopRef.current.value = 1000000;\n            this.virulenceRef.current.value = 0.25;\n            this.daysRef.current.value = 365;\n            this.infectionLengthRef.current.value = 100;\n            this.transmissionRef.current.value = 0.2;\n        }\n    }\n\n    // creates a dictionary of all the inputs and their values (names formatted for the API call) \n    getInputsDictionary(){\n        // extract data from inputs to use in query string \n        let immune_percent =        this.intialImmunityRef.current.value,\n            transmission_rate =     this.transmissionRef.current.value,\n            virulence =             this.virulenceRef.current.value,\n            initial_infected =      this.initialInfectedRef.current.value,\n            initial_population =    this.intialPopRef.current.value,\n            infection_length =      this.infectionLengthRef.current.value,\n            simulation_length =     this.daysRef.current.value;\n\n        // make sure infected <= population\n        initial_infected = Math.min(initial_infected, initial_population);\n\n        // MUST match API expectations! \n        return {immune_percent, transmission_rate, virulence, initial_infected, initial_population, infection_length, simulation_length};\n    }\n\n    onSimulatorError(){\n        this.setState({pending: false});    // enable buttons\n    }\n\n    onSimulatorLoad(){\n        this.setState({pending: false});    // enable buttons\n    }\n\n    // called when then the reset button is clicked\n    onReset(){\n        // cleared stored simulation data\n        Simulator.reset();\n    }\n\n    dayByDay(){\n        if(!Simulator.hasData){\n            // disable buttons for loading time\n            this.setState({pending: true});\n\n            // load data then show next day\n            Simulator.load(this.getInputsDictionary())\n                .then(() => {\n                    this.setState({message: null}); // remove possible err message\n                    Simulator.nextDay();\n                })\n                .catch(err => this.setState({message: err.message}));\n        }\n        else{\n            Simulator.nextDay();\n        }\n    }\n\n    autoRun(){\n        if(!Simulator.hasData){\n            // disable buttons for loading time\n            this.setState({pending: true});\n\n            // load data then auto run\n            Simulator.load(this.getInputsDictionary())\n                .then(() => {\n                    this.setState({message: null}); // remove possible err message\n                    Simulator.autoRun();\n                })\n                .catch(err => this.setState({message: err.message}));\n        }\n        else{\n            Simulator.autoRun();\n        }\n    }\n\n    // downloads the csv file\n    downloadCSV(){\n        if(!this.state.pending){\n            // create download link (never rendered)\n            let url = Simulator.createCSVDownloadURL(this.getInputsDictionary());\n\n            // create a link tag\n            let link = document.createElement(\"a\");\n            link.setAttribute(\"href\", url);\n            link.setAttribute(\"target\", \"_blank\");\n            link.setAttribute(\"download\", \"download\");\n\n            // click the tag\n            link.click();\n            link = null;\n\n            /*\n            //this.setState({pending: true});     // disable buttons\n\n            // async csv download request\n            Simulator.downloadCSV(this.getInputsDictionary())\n                .catch(err => this.setState({message: err.message}))    // error\n                .then(() => this.setState({pending: false}));           // enable buttons after fulfilled/rejected\n            */\n        }\n    }\n\n    // called when the form is 'submitted'\n    // entire purpose is to block the sending of the form\n    // (submit enforces 'required', 'min', 'max' constraints)\n    onSubmit(evt){\n        // no default submission (using ajax instead)\n        evt.preventDefault();\n\n        // problem - both autorun + next day activate this... (only way to do it with using form requires)\n\n        // day-by-day was the trigger\n        if(this.state.lastBtn === \"day-by-day\"){\n            this.dayByDay();\n        }\n\n        // autorun was the trigger\n        else if(this.state.lastBtn === \"auto-run\"){\n            this.autoRun();\n        }\n\n        // csv export was the trigger\n        else if(this.state.lastBtn === \"export-csv\"){\n            this.downloadCSV();\n        }\n        \n    }\n\n    // sets the last button to 'day-by-day' or 'autorun'\n    // kinda ugly but its because form has 2 submit buttons\n    onFormClick(evt){\n        this.setState({lastBtn: evt.target.getAttribute(\"btn\")});\n    }\n\n    onPresetChange(evt){\n        if(evt.target.value != \"Custom\"){\n            this.setState({isDisabled:true});\n        }else{\n            this.setState({isDisabled:false});\n        }\n    }\n\n    render(){\n        return (\n            <div>\n                <h5 className=\"text-center\">Experimental Variables</h5>\n                <form onSubmit={this.onSubmit.bind(this)}>\n                    <div className=\"row\">\n                        <div className=\"form-group col-lg-6\">\n                            <NumSlider\n                                label={\"Length of Infection (Days)\"}\n                                showRange={true}\n                                min={1}\n                                max={365}\n                                step={1}\n                                required={true}\n                                ref={this.infectionLengthRef}\n                                disabled={this.state.isDisabled}\n                            />\n                        </div>\n                        <div className=\"form-group col-lg-6\">\n                            <NumSlider\n                                label={\"Transmission Rate\"}\n                                showRange={true}\n                                min={0}\n                                max={20}\n                                step={0.01}\n                                required={true}\n                                ref={this.transmissionRef}\n                                disabled={this.state.isDisabled}\n                            />\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"form-group col-lg-6\">\n                            <NumSlider\n                                label={\"Virulence\"}\n                                showRange={true}\n                                min={0}\n                                max={1}\n                                step={0.001}\n                                required={true}\n                                ref={this.virulenceRef}\n                                disabled={this.state.isDisabled}\n                            />\n                        </div>\n                        <div className=\"form-group col-lg-6\">\n                            <NumSlider\n                                label={\"Initial Population\"}\n                                showRange={true}\n                                min={1}\n                                max={1000000}\n                                step={1}\n                                required={true}\n                                ref={this.intialPopRef}\n                            />\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"form-group col-lg-6\">\n                            <NumSlider\n                                label={\"Initial Immunity Percent\"}\n                                showRange={true}\n                                min={0}\n                                max={1}\n                                step={0.01}\n                                required={true}\n                                ref={this.intialImmunityRef}\n                            />\n                        </div>\n                        <div className=\"form-group col-lg-6\">\n                            <NumSlider\n                                label={\"Initial Infected\"}\n                                showRange={true}\n                                min={0}\n                                max={1000000}\n                                maxText={\"Population\"}\n                                step={1}\n                                required={true}\n                                ref={this.initialInfectedRef}\n                            />\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"form-group col-lg-6\">\n                            <NumSlider\n                                label={\"Simulation Length (Days)\"}\n                                showRange={true}\n                                min={1}\n                                max={365}\n                                step={1}\n                                required={true}\n                                ref={this.daysRef}\n                            />\n                        </div>\n                        <div className=\"form-group col-lg-6\">\n                            <label>Presets:</label>\n                            <select className=\"form-control\" onChange={this.onPresetChange.bind(this)}>\n                                <option value=\"Custom\">Custom</option>\n                                <option value=\"Not Custom\">Not Custom</option>\n                            </select>\n                        </div>\n                    </div>\n                    <div className=\"form-group text-center\">\n                        <button onClick={this.onFormClick.bind(this)} className=\"input-btn\" disabled={this.state.pending} btn=\"day-by-day\">Day-By-Day</button>&nbsp;\n                        <button onClick={this.onFormClick.bind(this)} className=\"input-btn\" disabled={this.state.pending} btn=\"auto-run\">Auto Run</button>&nbsp;\n                        <button onClick={this.onReset.bind(this)} className=\"input-btn\" disabled={this.state.pending} type=\"button\" >Reset</button>&nbsp;\n                        <button onClick={this.onFormClick.bind(this)} className=\"input-btn\" disabled={this.state.pending} btn=\"export-csv\">Export CSV</button>\n                    </div>\n                </form>\n                <div>{this.state.message}</div>\n            </div>\n        );\n    }\n}","import React from \"react\";\nimport ReactModal from \"react-modal\"\nimport { Ajax } from \"../Ajax\";\n\nexport class Modal extends React.Component{\n\n\tconstructor(props){\n        super(props);\n\n        // input refs\n        this.textRef = React.createRef();\n        this.errorRef = React.createRef();\n        this.headerRef = React.createRef();\n\n        this.type = null;\n        this.typeError = true;\n        this.errorTime = false;\n        this.errorMsg = \"\";\n\n        this.state = { \n\t\t\tother: false,\n\t\t\terrMessage:null\n        };\n\n        //Modal.setAppElement(el);\n\n    }\n\n\t// on click of submit button \n\tsubmitClick(e){\n\t\te.preventDefault();\n\t\tif(this.type != null && this.textRef.current.value != \"\"){\n\t\t\tconsole.log(this.textRef.current.value);\n\t\t\tlet message = this.BuildArray();\n\t\t\tAjax.post(`${window.location.origin}/mail`,null,{message})\n\t\t\t\t.then(xhr => {    \n                    // ajax resolved (could be bad/good request, but server responded)\n                    if(xhr.status === 200){\n                        // good request - attempt to parse results json\n                        try{\n                            console.log(\"Text Received\");\n                        }\n                        catch(err){\n                            // json parse error (should never happen)\n\t\t\t\t\t\t\tconsole.log(JSON.parse(err)); // server responded with bad request signal\n                        }\n                    }\n                    else{\n                        // bad request\n                        console.log(\"Bad Request Error\");  // server responded with bad request signal\n                    }\n                })\n                .catch(err => {\n                    // ajax request died (really bad NOT a 400 error!)\n                    console.log(\"Really bad Error\");// request died signal\n                });\n\t\t}else{\n\t\t\t\n\t\t\tlet textError = this.textRef.current.value;\n\n\t\t\tif(this.typeError == true && textError == \"\"){\n\t\t\t\tthis.errorMsg = \"No Header Selected|No Text Entered\";\n\t\t\t}else if(this.typeError == true){\n\t\t\t\tthis.errorMsg = \"No Header Selected\";\n\t\t\t}else if(textError == \"\"){\n\t\t\t\tthis.errorMsg = \"No Text Entered\";\n\t\t\t}\n\n\t\t\tif(this.errorMsg != \"\"){\n\t\t\t\tthis.setState({errMessage:this.errorMsg})\n\t\t\t}\n\n\t\t\t// console.log(\"Error Time: \"+this.errorTime);\n\t\t\t\t\n\t\t}\n\t}\n\n\tBuildArray(){\n        let text = this.textRef.current.value;\n        let type = \"\";\n\n        if(this.state.other){\n        \ttype = this.headerRef.current.value;\n        }else{\n        \ttype = this.type;\n        }\n\n        // MUST match API expectations! \n        return {type,text};\n    }\n\n\t// on change of radio button set type\n\tonTypeSelect(type){\n\t \tthis.type = type;\n\n\t \tif(this.type == \"other\"){\n\t \t\tthis.setState({other: true});\n\t \t}else{\n\t \t\tthis.setState({other: false});\n\t \t}\n\n\t \tthis.typeError = false;\n\t }\n\n \t TypeOther(){\n\t \tif(!this.state.other){\n\t \t\treturn null;\n\t \t}else{\n\t \t\treturn(\n\t \t\t\t<div>\n\t \t\t\t\t<label>Other: </label> <input type=\"text\" placeholder=\"Input for other\" ref={this.headerRef}/>\n\t \t\t\t</div>\n\t \t\t);\n\t \t}\n\t }\n\t \n\trender(){\n\t\treturn (\n\t\t\t<form>\n\t\t\t\t<ReactModal isOpen={this.props.showModal} >\n\t\t\t\t\t<div className=\"col-lg-1\">\n\t\t\t  \t\t\t<span className=\"nav-link\" onClick={this.props.closeModal}>&times;</span>\n\t\t\t  \t\t</div>\n\t\t\t  \t\t<div className=\"container border\">\n\t\t\t\t\t  <form onSubmit={this.submitClick.bind(this)}>\n\t\t\t\t\t\t\t<div className=\"col-lg-12 header center\">\n\t\t\t\t\t\t\t\t<h2 className=\"modalHeader\">Contact Us</h2>\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t<span className=\"error\">\n\t\t\t\t\t\t\t\t\t\t{this.state.errMessage}\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"col-lg-12 center\">\n\t\t\t\t\t\t\t\t<input type=\"radio\" onChange={(t) => this.onTypeSelect(\"Bug Report\")} name=\"types\" value=\"problem\"/>Have a problem?\n\t\t\t\t\t\t\t\t&nbsp;\n\t\t\t\t\t\t\t\t<input type=\"radio\" onChange={(t) => this.onTypeSelect(\"Feature Request\")} name=\"types\" value=\"idea\"/>Have an idea?\n\t\t\t\t\t\t\t\t&nbsp;\n\t\t\t\t\t\t\t\t<input type=\"radio\" onChange={(t) => this.onTypeSelect(\"other\")} name=\"types\" value=\"other\"/>Other\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"col-lg-12 center\">\n\t\t\t\t\t\t\t\t{this.TypeOther()}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"col-lg-12 center\">\n\t\t\t\t\t\t\t\t<textarea rows=\"4\" cols=\"100\" placeholder=\"Type message in here.\" ref={this.textRef}></textarea>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"col-lg-12 center\">\n\t\t\t\t\t\t\t\t<input type=\"submit\" />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</form>\n\t\t\t\t\t</div>\n      \t\t\t</ReactModal>\n\t\t\t</form>\n\t\t);\n\t}\n}","import React from \"react\";\nimport { Modal } from \"./Modal\"\n\nexport class Navbar extends React.Component{\n\n\tconstructor(props){\n\t\tsuper(props);\n\n\t    this.state = {\n\t    \tshowModal: false,\n\t    \tcloseModal:false\n\t    };\n\n\t}\n\n\tcloseModal(){\n\t\tthis.setState({showModal:false});\n\t}\n\n\topenModal(){\n\t\tthis.setState({showModal:true});\n\t}\n\n\trender(){\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n\t\t\t\t\t<div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n\t\t\t\t\t\t<ul className=\"navbar-nav mr-auto\">\n\t\t  \t\t\t\t\t<li className=\"nav-item active\">\n\t\t    \t\t\t\t\t<span className=\"nav-link\" onClick={this.openModal.bind(this)}>Contact Us <span className=\"sr-only\">(current)</span></span>\n\t\t  \t\t\t\t\t</li>\n\t\t  \t\t\t\t</ul>\n\t\t  \t\t\t</div>\n\t      \t\t</nav>\n\t      \t\t<Modal showModal={this.state.showModal} closeModal={this.closeModal.bind(this)} />\n\t      \t</div>\n\t\t);\n\t}\n}","import React from \"react\";\nimport Simulator from \"../Simulator\";\n\nexport class Chart extends React.Component{\n\tconstructor(props){\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tdata: null,\t\t// simulatoion data set\n\t\t\tday: 0\t\t\t// current simulation day\n\t\t};\n\t}\n\n\tcomponentDidMount(){\n\t\t// simulator singles data set loaded\n\t\tSimulator.on(\"data\", this.onSimulatorData.bind(this));\n\n\t\t// simulator signals a reset\n\t\tSimulator.on(\"reset\", this.onSimulatorReset.bind(this));\n\n\t\t// simulator signals a different day\n\t\tSimulator.on(\"update\", this.onSimulatorUpdate.bind(this));\n\t}\n\n\t// simulator got data - store it\n\tonSimulatorData(){\n\t\tthis.setState({data: Simulator.data});\n\t}\n\n\t// simulator reset - reset this component\n\tonSimulatorReset(){\n\t\tthis.setState({data: null, day: 0});\n\t}\n\n\t// simulator day changed - update component day\n\tonSimulatorUpdate(){\n\t\tthis.setState({day: Simulator.currentDay});\n\t}\n\n\t// renders table rows up to the current simulation day\n\trenderRows(){\n\t\tif(Simulator.hasData){\n\t\t\tlet rows = new Array(Simulator.currentDay + 1);\n\n\t\t\tfor(let i = 0; i <= Simulator.currentDay; i++){\n\t\t\t\tlet day = Simulator.data[i];\n\n\t\t\t\tlet susceptible = Math.round(day.Susceptible),\n\t\t\t\t\tinfected = Math.round(day.Infected),\n\t\t\t\t\timmune = Math.round(day.Immune),\n\t\t\t\t\tdead = Math.round(day.Dead),\n\t\t\t\t\tpopulation = Math.round(day.TotalPopulation);\n\n\t\t\t\trows[i] = (\n\t\t\t\t\t<tr key={i}>\n\t\t\t\t\t\t<td onClick={()=>Simulator.setGraphDay(i)}>{i}</td>\n\t\t\t\t\t\t<td>{susceptible}</td>\n\t\t\t\t\t\t<td>{infected}</td>\n\t\t\t\t\t\t<td>{immune}</td>\n\t\t\t\t\t\t<td>{dead}</td>\n\t\t\t\t\t\t<td>{population}</td>\n\t\t\t\t\t</tr>\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn rows;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\trender(){\n\t\treturn this.state.data !== null ? (\n\t\t\t<div>\n\t\t\t\t<table className=\"table table-striped overflow-table\">\n\t\t\t\t\t<thead>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<th>Day</th>\n\t\t\t\t\t\t\t<th>Susceptible</th>\n\t\t\t\t\t\t\t<th>Infected</th>\n\t\t\t\t\t\t\t<th>Immune</th>\n\t\t\t\t\t\t\t<th>Dead</th>\n\t\t\t\t\t\t\t<th>Total Population</th>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</thead>\n\t\t\t\t\t<tbody>\n\t\t\t\t\t\t{this.renderRows()}\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t</div>\n\t\t) : null;\n\t}\n}","import React from \"react\";\nimport Simulator from \"../Simulator\";\nimport { LineChart } from \"react-d3-components\";\n\nexport class Graph extends React.Component{\n\tconstructor(props){\n\t\tsuper(props);\n\t\t\n\t    this.state = {\n\t\t\tdata: null,\t\t\t// graph data\n\t\t\tday: 0,\t\t\t\t// current simulation day\n\t\t\tyLabel: \"Infected\"\t// y-axis value\n\t    };\n\t}\n\n\tcomponentDidMount(){\n\t\t// when the simulator signals it has received data\n\t\tSimulator.on(\"data\", this.onSimulatorData.bind(this));\n\n\t\t// when the simulator signals a reset\n\t\tSimulator.on(\"reset\", this.onSimulatorReset.bind(this));\n\n\t\t// when the simulator changes the day\n\t\tSimulator.on(\"update\", this.onSimulatorUpdate.bind(this));\n\n\t\t// when the simulator changes the graph\n\t\tSimulator.on(\"update-graph\", this.onSimulatorUpdateGraph.bind(this));\n\t}\n\n\t// simulator has data - convert to d3 format and store it\n\tonSimulatorData(){\n\t\t// update\n\t\tthis.setState({data: Simulator.data});\n\t}\n\n\t// simulator reset - reset this component\n\tonSimulatorReset(){\n\t\tthis.setState({data: null, day: 0});\n\t}\n\n\t// simulator update - update to the current day\n\tonSimulatorUpdate(){\n\t\tthis.setState({day: Simulator.currentDay});\n\t}\n\n\t// simulator update - graph change\n\tonSimulatorUpdateGraph(evt){\n\t\t// day change\n\t\tif(typeof evt.day === \"number\"){\n\t\t\tthis.setState({day: evt.day});\n\t\t}\n\t}\n\n\t// when the graph y axis drop down is changed\n\tonYLabelChange(evt){\n\t\tthis.setState({yLabel: evt.target.value})\n\t}\n\n\t// gets the data values up to the current day\n\tgetData(){\n\t\tif(!this.state.data || this.state.day < 1){\n\t\t\treturn null;\n\t\t}\n\n\t\tlet largestY = 0;\n\n\t\tlet data = this.state.data.map((row, index) => {\n\t\t\tlet y = parseFloat(row[this.state.yLabel]);\n\n\t\t\tlargestY = Math.max(largestY, y);\n\n\t\t\treturn {\n\t\t\t\tx: index,\n\t\t\t\ty\n\t\t\t};\n\t\t});\n\n\t\t// d3 wants {values:[...]}\n\t\tlet values = data.slice(0, this.state.day + 1);\n\t\treturn {values, largestY};\n\t}\n\n\trender(){\n\t\tlet data = this.getData();\n\t\tif(data){\n\n\t\t\t/*\n\t\t\t\tdata.largestY for biggest Y value! \n\t\t\t*/\n\n\t\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t\t<h5></h5>\n\t\t\t\t\t<div className=\"GraphDropdown\" onChange={this.onYLabelChange.bind(this)}>\n\t\t\t\t\t\t<select className=\"form-control\">\n\t\t\t\t\t\t\t<option value=\"Infected\">Infected</option>\n\t\t\t\t\t\t\t<option value=\"Susceptible\">Susceptible</option>\n\t\t\t\t\t\t\t<option value=\"Immune\">Immune</option>\n\t\t\t\t\t\t\t<option value=\"Dead\">Dead</option>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<LineChart\n\t\t\t\t\t\t\tdata={data}\n\t\t\t\t\t\t\taxes\n\t\t\t\t\t\t\twidth={540}\n\t\t\t\t\t\t\theight={525}\n\t\t\t\t\t\t\tmargin={{top: 10, bottom: 50, left: 80, right: 10}}\n\t\t\t\t\t\t\txAxis={{label: \"Day\"}}\n\t\t\t\t\t\t\tyAxis={{label: this.state.yLabel}}\n\t\t\t\t\t\t\t//tooltipHtml={(x, y) => `Day ${x} - ${y} ${this.state.yLabel}`}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t\treturn null;\n\t}\n}","import \"../lib/bootstrap.min.css\";\nimport \"./App.css\";\nimport React from \"react\";\nimport { Inputs } from \"./Inputs\";\nimport { Navbar } from \"./Navbar\";\nimport { Chart } from \"./Chart\";\nimport { Graph } from \"./Graph\";\n\nexport class App extends React.Component{\n    constructor(props){\n        super(props);\n\n        this.state = {\n            rows: null\n        };\n    }\n\n    render(){\n        return (\n            <div>\n                <Navbar/>\n                <br/>\n                <span className=\"Version\">V0.1</span>\n                <main className=\"container card card-body bg-light\">\n                    <div className=\"row\">\n                        <div className=\"col-lg-6\">\n                            <Inputs/>\n                        </div>\n                        <div className=\"col-lg-6 graph\">\n                            <Graph rows={this.state.rows}/>\n                        </div>\n                    </div>\n                    <div className=\"col-lg-12\">\n                        <Chart/>\n                    </div>\n                </main>\n            </div>\n        );\n    }\n}","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./components/App\";\n\nReactDOM.render(<App/>, document.querySelector(\"#root\"));"],"sourceRoot":""}