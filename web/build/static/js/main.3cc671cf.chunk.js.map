{"version":3,"sources":["Ajax.js","EventEmitter.js","SimulationUpdateEvent.js","Simulator.js","components/NumSlider.jsx","components/Inputs.jsx","components/Modal.jsx","components/Navbar.jsx","components/Chart.jsx","components/Graph.jsx","components/App.jsx","index.js"],"names":["Ajax","Object","classCallCheck","this","createClass","key","value","options","arguments","length","undefined","Promise","resolve","reject","method","url","window","location","origin","headers","query","data","xhr","XMLHttpRequest","h","onload","onerror","err","queryString","open","setRequestHeader","send","JSON","stringify","request","dict","qs","param","concat","substring","EventEmitter","_listeners","event","willTrigger","type","forEach","listener","eventType","push","listeners","i","splice","SimulationUpdateEvent","day","_type","_day","get","src_Simulator","_EventEmitter","Simulator","_this","possibleConstructorReturn","getPrototypeOf","call","_currentDay","inherits","_this2","href","includes","Access-Control-Allow-Origin","Access-Control-Allow-Headers","then","status","parse","response","emit","Event","Error","catch","currentDay","set","NumSlider","_React$Component","props","numRef","React","createRef","rangeRef","current","init","min","evt","val","target","Math","max","react_default","a","createElement","className","label","showRange","minText","maxText","ref","onChange","onNumber","bind","step","placeholder","required","onSlide","Component","Inputs","intialImmunityRef","virilityRef","fatalityRef","initialInfectedRef","intialPopRef","infectionLengthRef","daysRef","state","pending","message","lastBtn","on","onSimulatorLoad","onSimulatorError","immune_percent","virility","fatal_percent","initial_infected","initial_population","infection_length","simulation_length","setState","reset","hasData","nextDay","load","getInputsDictionary","_this3","autoRun","createCSVDownloadURL","link","document","setAttribute","click","preventDefault","dayByDay","downloadCSV","getAttribute","onSubmit","NumSlider_NumSlider","onClick","onFormClick","disabled","btn","onReset","Modal","apply","lib_default","isOpen","showModal","closeModal","rows","cols","Navbar","id","openModal","Modal_Modal","Chart","onSimulatorData","onSimulatorReset","onSimulatorUpdate","Array","_loop","susceptible","floor","infected","immune","dead","population","total_population","dayIndex","setGraphDay","renderRows","Graph","onSimulatorUpdateGraph","map","row","index","x","y","values","slice","react_d3_components_lib","getData","axes","width","height","margin","top","bottom","left","right","xAxis","yAxis","App","Navbar_Navbar","Inputs_Inputs","Graph_Graph","Chart_Chart","ReactDOM","render","App_App","querySelector"],"mappings":"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","file":"static/js/main.3cc671cf.chunk.js","sourcesContent":["export class Ajax{\r\n    // sends an async http request \r\n    static request(options={}){\r\n        return new Promise((resolve, reject) => {\r\n            // extract config from options object\r\n            let method = (typeof options.method === \"string\") ? options.method : \"GET\",\r\n                url = (typeof options.url === \"string\") ? options.url : window.location.origin,\r\n                headers = (typeof options.headers === \"object\" && options.headers) ? options.headers : {},\r\n                query = (typeof options.query === \"object\" && options.query) ? options.query : {},\r\n                data = (typeof options.data !== \"undefined\") ? options.data : null;\r\n\r\n            // create the request\r\n            let xhr = new XMLHttpRequest();\r\n\r\n            // attach listeners\r\n            xhr.onload = () => resolve(xhr);\r\n            xhr.onerror = err => reject(err);\r\n\r\n            // apply query string\r\n            if(query){\r\n                url += Ajax.queryString(query);\r\n            }\r\n\r\n            // open the request\r\n            xhr.open(method, url);\r\n\r\n            // apply http headers\r\n            for(let h in headers){\r\n                xhr.setRequestHeader(h, headers[h]);\r\n            }\r\n\r\n            // send the request\r\n            // send JSON if the data is not a string\r\n            if(data){\r\n                if(typeof data !== \"string\"){\r\n                    xhr.send(JSON.stringify(data));\r\n                }\r\n                else xhr.send(data);\r\n            }\r\n            else xhr.send();\r\n        });\r\n    }\r\n\r\n    // async http get request\r\n    static get(url, headers, query){\r\n        return Ajax.request({method: \"GET\", url, headers, query});\r\n    }\r\n\r\n    // async http post request\r\n    static post(url, headers, data){\r\n        return Ajax.request({method: \"POST\", url, headers, data});\r\n    }\r\n\r\n    // creates a query string from an object\r\n    static queryString(dict){\r\n        let qs = \"?\";\r\n\r\n        for(let param in dict){\r\n            qs += `${param}=${dict[param]}&`;\r\n        }\r\n\r\n        return qs.substring(0, qs.length - 1);\r\n    }\r\n}","// simple event emitter class\r\nexport class EventEmitter{\r\n    constructor(){\r\n        this._listeners = {};   // 'private' dictionary of {eventType: listenerFunction}\r\n    }\r\n\r\n    // triggers all listening functions\r\n    emit(event){\r\n        if(this.willTrigger(event.type)){\r\n            this._listeners[event.type].forEach(listener => listener(event));\r\n        }\r\n    }\r\n\r\n    // adds a listener\r\n    on(eventType, listener){\r\n        if(this.willTrigger(eventType)){\r\n            this._listeners[eventType].push(listener);\r\n        }\r\n        else{\r\n            this._listeners[eventType] = [listener];\r\n        }\r\n    }\r\n\r\n    // removes a listener\r\n    off(eventType, listener){\r\n        if(this.willTrigger(eventType)){\r\n            let listeners = this._listeners[eventType];\r\n\r\n            for(let i = 0; i < listeners.length; i++){\r\n                if(listeners[i] === listener){\r\n                    listeners.splice(i, 1);\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // checks if there are any listeners for a given type\r\n    willTrigger(eventType){\r\n        return eventType in this._listeners;\r\n    }\r\n}","// simple event object for simulation updates \r\nexport class SimulationUpdateEvent{\r\n    constructor(type, day=null){\r\n        this._type = type;\r\n        this._day = day;\r\n    }\r\n\r\n    get type(){\r\n        return this._type;\r\n    }\r\n\r\n    get day(){\r\n        return this._day;\r\n    }\r\n}","import { Ajax } from \"./Ajax\";\r\nimport { EventEmitter } from \"./EventEmitter\";\r\nimport { SimulationUpdateEvent } from \"./SimulationUpdateEvent\";\r\n\r\n// singleton for holding simulation data\r\n// event-driven to keep chart + graph updated\r\nlet Simulator = class Simulator extends EventEmitter{\r\n    constructor(){\r\n        super();\r\n\r\n        this.data = null;       // simulation data array\r\n        this._currentDay = 0;    // 'private' current simulation day\r\n    }\r\n\r\n    // hits the API for data, signals progress\r\n    // query should be a dictionary of the inputs, will be converted into a query string\r\n    load(query){\r\n        return new Promise((resolve, reject) => {\r\n            // figure out endpoint\r\n            let url = window.location.href.includes(\"localhost\") ? \"http://localhost:8080/plague\" : `${window.location.origin}/plague`;\r\n            \r\n            // CORS headers (use foreign domain)\r\n            let headers = {\r\n                \"Access-Control-Allow-Origin\": window.location.origin,\r\n                \"Access-Control-Allow-Headers\": \"Access-Control-Allow-Origin\"\r\n            };\r\n\r\n            // ajax call with query string\r\n            // (null headers)\r\n            Ajax.get(url, headers, query)\r\n                .then(xhr => {    \r\n                    // ajax resolved (could be bad/good request, but server responded)\r\n                    if(xhr.status === 200){\r\n                        // good request - attempt to parse results json\r\n                        try{\r\n                            // parse json\r\n                            this.data = JSON.parse(xhr.response);\r\n                        }\r\n                        catch(err){\r\n                            // json parse error (should never happen)\r\n                            reject(err);\r\n                            this.emit(new Event(\"error\"));  // server responded with bad request signal\r\n                        }\r\n\r\n                        // done, resolve promise and emit load + data\r\n                        resolve();\r\n                        this.emit(new Event(\"load\"));   // server responded with good request signal\r\n\r\n                        this.emit(new Event(\"data\"));   // parsed data signal\r\n                    }\r\n                    else{\r\n                        // bad request\r\n                        reject(new Error(xhr.response || \"Bad request\"));\r\n                        this.emit(new Event(\"error\"));  // server responded with bad request signal\r\n                    }\r\n                })\r\n                .catch(err => {\r\n                    // ajax request died (really bad NOT a 400 error!)\r\n                    reject(err);\r\n                    this.emit(new Event(\"error\"));  // request died signal\r\n                });\r\n        });\r\n    }\r\n\r\n    // async download\r\n    downloadCSV(query){\r\n        let url = window.location.href.includes(\"localhost\") ? `http://localhost:8080/plague/csv` : `${window.location.origin}/plague/csv`;\r\n        return Ajax.get(url, null, query);\r\n    }\r\n\r\n    // csv download url\r\n    createCSVDownloadURL(query){\r\n        let qs = Ajax.queryString(query);\r\n        return window.location.href.includes(\"localhost\") ? `http://localhost:8080/plague/csv${qs}` : `${window.location.origin}/plague/csv${qs}`;\r\n    }\r\n\r\n    // simulation moves to the last day\r\n    // (triggers listeners)\r\n    autoRun(){\r\n        this.currentDay = this.data.length - 1; // auto emits update\r\n    }\r\n\r\n    // steps the simulation forward one day\r\n    // (triggers listeners)\r\n    nextDay(){\r\n        if(this.currentDay < this.data.length){\r\n            this.currentDay++;  // auto emits update\r\n        }\r\n    }\r\n\r\n    // resets simulation to day 0 and clears all stored data\r\n    // (triggers listeners)\r\n    reset(){\r\n        this.data = null;\r\n        this.currentDay = 0;\r\n        this.emit(new Event(\"reset\"));\r\n    }\r\n\r\n    // updates the graph day \r\n    setGraphDay(day){\r\n        this.emit(new SimulationUpdateEvent(\"update-graph\", day));\r\n    }\r\n\r\n    // always emit update\r\n    set currentDay(day){\r\n        this._currentDay = day; \r\n        this.emit(new SimulationUpdateEvent(\"update\", this.currentDay));\r\n    }\r\n\r\n    get hasData(){\r\n        return this.data !== null;\r\n    }\r\n\r\n    get currentDay(){\r\n        return this._currentDay;\r\n    }\r\n}\r\n\r\n// singleton\r\nexport default new Simulator();","import \"./NumSlider.css\";\r\nimport React from \"react\";\r\n\r\nexport class NumSlider extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.numRef = React.createRef();\r\n        this.rangeRef = React.createRef();\r\n    }\r\n\r\n    // mounted - set the default numbers\r\n    componentDidMount(){\r\n        this.numRef.current.value = this.props.init || this.props.min;\r\n        this.rangeRef.current.value = this.props.init || this.props.min;\r\n    }\r\n\r\n    // on text field input\r\n    onNumber(evt){\r\n        // set the range value to the number value\r\n        let val = evt.target.value;\r\n    \r\n        // enforce min/max constraints\r\n        val = Math.min(Math.max(val, this.props.min), this.props.max); \r\n\r\n        // update inputs (update both incase bad number entered)\r\n        this.rangeRef.current.value = val;\r\n        this.numRef.current.value = val;\r\n    }\r\n\r\n    // on range bar move\r\n    onSlide(evt){\r\n        // set the text value to the number value\r\n        let val = evt.target.value;\r\n\r\n        // enforce min/max constraints \r\n        val = Math.min(Math.max(val, this.props.min), this.props.max);\r\n\r\n        // update number input\r\n        this.numRef.current.value = val;\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"num-slider-container\">\r\n                <div>\r\n                    <label>{this.props.label}</label>\r\n                    {this.props.showRange ? (` ${this.minText}-${this.maxText}`) : null}\r\n                </div>\r\n                <div>\r\n                    <input \r\n                        ref={this.numRef}\r\n                        onChange={this.onNumber.bind(this)}\r\n                        type=\"number\"\r\n                        min={this.props.min}\r\n                        max={this.props.max}\r\n                        step={this.props.step}\r\n                        placeholder={this.props.placeholder}\r\n                        required={this.props.required}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <input\r\n                        ref={this.rangeRef}\r\n                        onChange={this.onSlide.bind(this)}\r\n                        type=\"range\"\r\n                        min={this.props.min}\r\n                        max={this.props.max}\r\n                        step={this.props.step}\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    get minText(){\r\n        return this.props.minText ? this.props.minText : this.props.min;\r\n    }\r\n\r\n    get maxText(){\r\n        return this.props.maxText ? this.props.maxText : this.props.max;\r\n    }\r\n\r\n    get value(){\r\n        return this.numRef.current.value;\r\n    }\r\n}","import React from \"react\";\r\nimport Simulator from \"../Simulator\";\r\nimport { NumSlider } from \"./NumSlider\";\r\n\r\nexport class Inputs extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        // input refs\r\n        this.intialImmunityRef = React.createRef();\r\n        this.virilityRef = React.createRef();\r\n        this.fatalityRef = React.createRef();\r\n        this.initialInfectedRef = React.createRef();\r\n        this.intialPopRef = React.createRef();\r\n        this.infectionLengthRef = React.createRef();\r\n        this.daysRef = React.createRef();\r\n\r\n        this.state = {\r\n            pending: false,         // no new requests while pending (disable buttons)\r\n            message: null,          // message to display (errors)\r\n            lastBtn: null\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        Simulator.on(\"load\", this.onSimulatorLoad.bind(this));\r\n        Simulator.on(\"error\", this.onSimulatorError.bind(this));\r\n    }\r\n\r\n    // creates a dictionary of all the inputs and their values (names formatted for the API call) \r\n    getInputsDictionary(){\r\n        // extract data from inputs to use in query string \r\n        let immune_percent = this.intialImmunityRef.current.value,\r\n            virility = this.virilityRef.current.value,\r\n            fatal_percent = this.fatalityRef.current.value,\r\n            initial_infected = this.initialInfectedRef.current.value,\r\n            initial_population = this.intialPopRef.current.value,\r\n            infection_length = this.infectionLengthRef.current.value,\r\n            simulation_length = this.daysRef.current.value;\r\n\r\n        // make sure infected <= population\r\n        initial_infected = Math.min(initial_infected, initial_population);\r\n\r\n        // MUST match API expectations! \r\n        return {immune_percent, virility, fatal_percent, initial_infected, initial_population, infection_length, simulation_length};\r\n    }\r\n\r\n    onSimulatorError(){\r\n        this.setState({pending: false});    // enable buttons\r\n    }\r\n\r\n    onSimulatorLoad(){\r\n        this.setState({pending: false});    // enable buttons\r\n    }\r\n\r\n    // called when then the reset button is clicked\r\n    onReset(){\r\n        // cleared stored simulation data\r\n        Simulator.reset();\r\n    }\r\n\r\n    dayByDay(){\r\n        if(!Simulator.hasData){\r\n            // disable buttons for loading time\r\n            this.setState({pending: true});\r\n\r\n            // load data then show next day\r\n            Simulator.load(this.getInputsDictionary())\r\n                .then(() => {\r\n                    this.setState({message: null}); // remove possible err message\r\n                    Simulator.nextDay();\r\n                })\r\n                .catch(err => this.setState({message: err.message}));\r\n        }\r\n        else{\r\n            Simulator.nextDay();\r\n        }\r\n    }\r\n\r\n    autoRun(){\r\n        if(!Simulator.hasData){\r\n            // disable buttons for loading time\r\n            this.setState({pending: true});\r\n\r\n            // load data then auto run\r\n            Simulator.load(this.getInputsDictionary())\r\n                .then(() => {\r\n                    this.setState({message: null}); // remove possible err message\r\n                    Simulator.autoRun();\r\n                })\r\n                .catch(err => this.setState({message: err.message}));\r\n        }\r\n        else{\r\n            Simulator.autoRun();\r\n        }\r\n    }\r\n\r\n    // downloads the csv file\r\n    downloadCSV(){\r\n        if(!this.state.pending){\r\n            // create download link (never rendered)\r\n            let url = Simulator.createCSVDownloadURL(this.getInputsDictionary());\r\n\r\n            // create a link tag\r\n            let link = document.createElement(\"a\");\r\n            link.setAttribute(\"href\", url);\r\n            link.setAttribute(\"target\", \"_blank\");\r\n            link.setAttribute(\"download\", \"download\");\r\n\r\n            // click the tag\r\n            link.click();\r\n            link = null;\r\n\r\n            /*\r\n            //this.setState({pending: true});     // disable buttons\r\n\r\n            // async csv download request\r\n            Simulator.downloadCSV(this.getInputsDictionary())\r\n                .catch(err => this.setState({message: err.message}))    // error\r\n                .then(() => this.setState({pending: false}));           // enable buttons after fulfilled/rejected\r\n            */\r\n        }\r\n    }\r\n\r\n    // called when the form is 'submitted'\r\n    // entire purpose is to block the sending of the form\r\n    // (submit enforces 'required', 'min', 'max' constraints)\r\n    onSubmit(evt){\r\n        // no default submission (using ajax instead)\r\n        evt.preventDefault();\r\n\r\n        // problem - both autorun + next day activate this... (only way to do it with using form requires)\r\n\r\n        // day-by-day was the trigger\r\n        if(this.state.lastBtn === \"day-by-day\"){\r\n            this.dayByDay();\r\n        }\r\n\r\n        // autorun was the trigger\r\n        else if(this.state.lastBtn === \"auto-run\"){\r\n            this.autoRun();\r\n        }\r\n\r\n        // csv export was the trigger\r\n        else if(this.state.lastBtn === \"export-csv\"){\r\n            this.downloadCSV();\r\n        }\r\n        \r\n    }\r\n\r\n    // sets the last button to 'day-by-day' or 'autorun'\r\n    // kinda ugly but its because form has 2 submit buttons\r\n    onFormClick(evt){\r\n        this.setState({lastBtn: evt.target.getAttribute(\"btn\")});\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <h5 className=\"text-center\">Experimental Variables</h5>\r\n                <form onSubmit={this.onSubmit.bind(this)}>\r\n                    <div className=\"row\">\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <NumSlider\r\n                                label={\"Length of Infection (Days)\"}\r\n                                showRange={true}\r\n                                min={1}\r\n                                max={365}\r\n                                step={1}\r\n                                required={true}\r\n                                ref={this.infectionLengthRef}\r\n                            />\r\n                        </div>\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <NumSlider\r\n                                label={\"Virility\"}\r\n                                showRange={true}\r\n                                min={0}\r\n                                max={20}\r\n                                step={0.01}\r\n                                required={true}\r\n                                ref={this.virilityRef}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <NumSlider\r\n                                label={\"Fatality Percent\"}\r\n                                showRange={true}\r\n                                min={0}\r\n                                max={1}\r\n                                step={0.001}\r\n                                required={true}\r\n                                ref={this.fatalityRef}\r\n                            />\r\n                        </div>\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <NumSlider\r\n                                label={\"Initial Population\"}\r\n                                showRange={true}\r\n                                min={1}\r\n                                max={1000000}\r\n                                step={1}\r\n                                required={true}\r\n                                ref={this.intialPopRef}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <NumSlider\r\n                                label={\"Initial Immunity Percent\"}\r\n                                showRange={true}\r\n                                min={0}\r\n                                max={1}\r\n                                step={0.01}\r\n                                required={true}\r\n                                ref={this.intialImmunityRef}\r\n                            />\r\n                        </div>\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <NumSlider\r\n                                label={\"Initial Infected\"}\r\n                                showRange={true}\r\n                                min={0}\r\n                                max={1000000}\r\n                                maxText={\"Population\"}\r\n                                step={1}\r\n                                required={true}\r\n                                ref={this.initialInfectedRef}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"form-group col-lg-6\">\r\n                            <NumSlider\r\n                                label={\"Simulation Length (Days)\"}\r\n                                showRange={true}\r\n                                min={1}\r\n                                max={365}\r\n                                step={1}\r\n                                required={true}\r\n                                ref={this.daysRef}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group text-center\">\r\n                        <button onClick={this.onFormClick.bind(this)} className=\"input-btn\" disabled={this.state.pending} btn=\"day-by-day\">Day-By-Day</button>&nbsp;\r\n                        <button onClick={this.onFormClick.bind(this)} className=\"input-btn\" disabled={this.state.pending} btn=\"auto-run\">Auto Run</button>&nbsp;\r\n                        <button onClick={this.onReset.bind(this)} className=\"input-btn\" disabled={this.state.pending} type=\"button\" >Reset</button>&nbsp;\r\n                        <button onClick={this.onFormClick.bind(this)} className=\"input-btn\" disabled={this.state.pending} btn=\"export-csv\">Export CSV</button>\r\n                    </div>\r\n                </form>\r\n                <div>{this.state.message}</div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport ReactModal from \"react-modal\"\r\n\r\nexport class Modal extends React.Component{\r\n\r\n\tonClick(){\r\n\r\n\t}\r\n\r\n\trender(){\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<ReactModal isOpen={this.props.showModal} >\r\n      \t\t\t\t<span className=\"close\" onClick={this.props.closeModal}>&times;</span>\r\n      \t\t\t\t\t<h2 className=\"modalHeader\">Report Bug or Request New Feature</h2>\r\n      \t\t\t\t\t<table className=\"reportsTable\">\r\n      \t\t\t\t\t\t<tr>\r\n\t      \t\t\t\t\t\t<td className=\"bugReport\">\r\n\t      \t\t\t\t\t\t\t<h5>Report Bug:</h5>\r\n\t\t\t      \t\t\t\t\t<textarea rows=\"4\" cols=\"100\">\r\n\t\t\t      \t\t\t\t\t\tReport Bug Here\r\n\t\t\t      \t\t\t\t\t</textarea>\r\n\t\t\t      \t\t\t\t\t<br/>\r\n\t\t\t      \t\t\t\t\t<button onClick={this.onClick.bind(this)}>Submit</button>\r\n\t\t      \t\t\t\t\t</td>\r\n\t\t      \t\t\t\t\t<td className=\"featureRequest\">\r\n\t\t      \t\t\t\t\t\t<h5>Request Feature:</h5>\r\n\t\t\t      \t\t\t\t\t<textarea rows=\"4\" cols=\"100\">\r\n\t\t\t      \t\t\t\t\t\t Request Feature Here\r\n\t\t\t      \t\t\t\t\t</textarea>\r\n\t\t\t      \t\t\t\t\t<br/>\r\n\t\t\t      \t\t\t\t\t<button onClick={this.onClick.bind(this)}>Submit</button>\r\n\t\t      \t\t\t\t\t</td>\r\n\t      \t\t\t\t\t</tr>\r\n      \t\t\t\t\t</table>\r\n      \t\t\t</ReactModal>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n","import React from \"react\";\r\nimport { Modal } from \"./Modal\"\r\n\r\nexport class Navbar extends React.Component{\r\n\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\r\n\t    this.state = {\r\n\t    \tshowModal: false,\r\n\t    \tcloseModal:false\r\n\t    };\r\n\r\n\t}\r\n\r\n\tcloseModal(){\r\n\t\tthis.setState({showModal:false});\r\n\t}\r\n\r\n\topenModal(){\r\n\t\tthis.setState({showModal:true});\r\n\t}\r\n\r\n\trender(){\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n\t\t\t\t\t<div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n\t\t\t\t\t\t<ul className=\"navbar-nav mr-auto\">\r\n\t\t  \t\t\t\t\t<li className=\"nav-item active\">\r\n\t\t    \t\t\t\t\t<span className=\"nav-link\" onClick={this.openModal.bind(this)}>Report Bug <span className=\"sr-only\">(current)</span></span>\r\n\t\t  \t\t\t\t\t</li>\r\n\t\t  \t\t\t\t</ul>\r\n\t\t  \t\t\t</div>\r\n\t      \t\t</nav>\r\n\t      \t\t<Modal showModal={this.state.showModal} closeModal={this.closeModal.bind(this)} />\r\n\t      \t</div>\r\n\t\t);\r\n\t}\r\n}","import React from \"react\";\r\nimport Simulator from \"../Simulator\";\r\n\r\nexport class Chart extends React.Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\tdata: null,\t\t// simulatoion data set\r\n\t\t\tday: 0\t\t\t// current simulation day\r\n\t\t};\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\t// simulator singles data set loaded\r\n\t\tSimulator.on(\"data\", this.onSimulatorData.bind(this));\r\n\r\n\t\t// simulator signals a reset\r\n\t\tSimulator.on(\"reset\", this.onSimulatorReset.bind(this));\r\n\r\n\t\t// simulator signals a different day\r\n\t\tSimulator.on(\"update\", this.onSimulatorUpdate.bind(this));\r\n\t}\r\n\r\n\t// simulator got data - store it\r\n\tonSimulatorData(){\r\n\t\tthis.setState({data: Simulator.data});\r\n\t}\r\n\r\n\t// simulator reset - reset this component\r\n\tonSimulatorReset(){\r\n\t\tthis.setState({data: null, day: 0});\r\n\t}\r\n\r\n\t// simulator day changed - update component day\r\n\tonSimulatorUpdate(){\r\n\t\tthis.setState({day: Simulator.currentDay});\r\n\t}\r\n\r\n\t// renders table rows up to the current simulation day\r\n\trenderRows(){\r\n\t\tif(Simulator.hasData){\r\n\t\t\tlet rows = new Array(Simulator.currentDay + 1);\r\n\r\n\t\t\tfor(let i = 0, day; i < Simulator.currentDay; i++){\r\n\t\t\t\tday = Simulator.data[i];\r\n\r\n\t\t\t\tlet susceptible = Math.floor(day.susceptible),\r\n\t\t\t\t\tinfected = Math.floor(day.infected),\r\n\t\t\t\t\timmune = Math.floor(day.immune),\r\n\t\t\t\t\tdead = Math.floor(day.dead),\r\n\t\t\t\t\tpopulation = Math.floor(day.total_population);\r\n\r\n\t\t\t\tlet dayIndex = i + 1; // current day is index + 1\r\n\r\n\t\t\t\trows[i] = (\r\n\t\t\t\t\t<tr key={dayIndex} onClick={()=>Simulator.setGraphDay(dayIndex)}>\r\n\t\t\t\t\t\t<td>{dayIndex}</td>\r\n\t\t\t\t\t\t<td>{susceptible}</td>\r\n\t\t\t\t\t\t<td>{infected}</td>\r\n\t\t\t\t\t\t<td>{immune}</td>\r\n\t\t\t\t\t\t<td>{dead}</td>\r\n\t\t\t\t\t\t<td>{population}</td>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\treturn rows;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n\r\n\trender(){\r\n\t\treturn this.state.data !== null ? (\r\n\t\t\t<div>\r\n\t\t\t\t<table className=\"table table-striped overflow-table\">\r\n\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t<th>Day</th>\r\n\t\t\t\t\t\t\t<th>Susceptible</th>\r\n\t\t\t\t\t\t\t<th>Infected</th>\r\n\t\t\t\t\t\t\t<th>Immune</th>\r\n\t\t\t\t\t\t\t<th>Dead</th>\r\n\t\t\t\t\t\t\t<th>Total Population</th>\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t</thead>\r\n\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t{this.renderRows()}\r\n\t\t\t\t\t</tbody>\r\n\t\t\t\t</table>\r\n\t\t\t</div>\r\n\t\t) : null;\r\n\t}\r\n}","import React from \"react\";\r\nimport Simulator from \"../Simulator\";\r\nimport { LineChart } from \"react-d3-components\";\r\n\r\nexport class Graph extends React.Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\r\n\t    this.state = {\r\n\t\t\tdata: null,\t\t// graph points\r\n\t\t\tday: 0\t\t\t// current simulation day\r\n\t    };\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\t// when the simulator signals it has received data\r\n\t\tSimulator.on(\"data\", this.onSimulatorData.bind(this));\r\n\r\n\t\t// when the simulator signals a reset\r\n\t\tSimulator.on(\"reset\", this.onSimulatorReset.bind(this));\r\n\r\n\t\t// when the simulator changes the day\r\n\t\tSimulator.on(\"update\", this.onSimulatorUpdate.bind(this));\r\n\r\n\t\t// when the simulator changes the graph\r\n\t\tSimulator.on(\"update-graph\", this.onSimulatorUpdateGraph.bind(this));\r\n\t}\r\n\r\n\t// simulator has data - convert to d3 format and store it\r\n\tonSimulatorData(){\r\n\t\t// map a new array of {x: day, y: dead}\r\n\t\tlet data = Simulator.data.map((row, index) => {\r\n\t\t\treturn {\r\n\t\t\t\tx: index,\r\n\t\t\t\ty: row.infected\r\n\t\t\t};\r\n\t\t});\r\n\r\n\t\t// update\r\n\t\tthis.setState({data});\r\n\t}\r\n\r\n\t// simulator reset - reset this component\r\n\tonSimulatorReset(){\r\n\t\tthis.setState({data: null, day: 0});\r\n\t}\r\n\r\n\t// simulator update - update to the current day\r\n\tonSimulatorUpdate(){\r\n\t\tthis.setState({day: Simulator.currentDay});\r\n\t}\r\n\r\n\t// simulator update - graph change\r\n\tonSimulatorUpdateGraph(evt){\r\n\t\t// day change\r\n\t\tif(\"day\" in evt){\r\n\t\t\tthis.setState({day: evt.day});\r\n\t\t}\r\n\t}\r\n\r\n\t// gets the data values up to the current day\r\n\tgetData(){\r\n\t\tif(!this.state.data || this.state.day < 1){\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\t// d3 wants {values:[...]}\r\n\t\tlet values = this.state.data.slice(0, this.state.day + 1);\r\n\t\treturn {values};\r\n\t}\r\n\r\n\trender(){\r\n\t\treturn this.state.data !== null ? (\r\n\t\t\t<div>\r\n\t\t\t\t<h5></h5>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<LineChart\r\n\t\t\t\t\t\tdata={this.getData()}\r\n\t\t\t\t\t\taxes\r\n\t\t\t\t\t\twidth={400}\r\n\t\t\t\t\t\theight={400}\r\n\t\t\t\t\t\tmargin={{top: 10, bottom: 50, left: 80, right: 10}}\r\n\t\t\t\t\t\txAxis={{label: \"Day\"}}\r\n\t\t\t\t\t\tyAxis={{label: \"Infected\"}}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t) : null;\r\n\t}\r\n}","import \"../lib/bootstrap.min.css\";\r\nimport \"./App.css\";\r\nimport React from \"react\";\r\nimport { Inputs } from \"./Inputs\";\r\nimport { Navbar } from \"./Navbar\";\r\nimport { Chart } from \"./Chart\";\r\nimport { Graph } from \"./Graph\";\r\n\r\nexport class App extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            rows: null\r\n        };\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <Navbar/>\r\n                <br/>\r\n                <main className=\"container card card-body bg-light\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-lg-6\">\r\n                            <Inputs/>\r\n                        </div>\r\n                        <div className=\"col-lg-6 graph\">\r\n                            <Graph rows={this.state.rows}/>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-lg-12\">\r\n                        <Chart/>\r\n                    </div>\r\n                </main>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { App } from \"./components/App\";\r\n\r\nReactDOM.render(<App/>, document.querySelector(\"#root\"));"],"sourceRoot":""}